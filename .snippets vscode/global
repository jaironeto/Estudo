{
	/********************************* Javascript Library ****************************************************/
		"                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object() ",
			"body": [
				"const obj = new Object();",
				"obj.prop = 'valor';",
				"console.log(obj.prop); // Saída: 'valor'"
			],
			"description": "Cria um novo objeto. O construtor Object cria uma instância de um Objeto, que é a base para todos os objetos em JavaScript."
		},
		"                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.assign()",
			"body": [
				"const alvo = { a: 1 };",
				"const fonte = { b: 2, c: 3 };",
				"const resultado = Object.assign(alvo, fonte);",
				"console.log(resultado); // Saída: { a: 1, b: 2, c: 3 }"
			],
			"description": "Copia os valores de todas as propriedades próprias enumeráveis de um ou mais objetos de origem para um objeto alvo. Útil para combinar objetos."
		},
		"                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.create()",
			"body": [
				"const prototipo = { saudacao: 'Olá' };",
				"const obj = Object.create(prototipo);",
				"console.log(obj.saudacao); // Saída: 'Olá'"
			],
			"description": "Cria um novo objeto com o objeto protótipo especificado e propriedades. Útil para herança prototípica."
		},
		"                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.defineProperties()",
			"body": [
				"const obj = {};",
				"Object.defineProperties(obj, {",
				"    propriedade1: {",
				"        value: true,",
				"        writable: true",
				"    },",
				"    propriedade2: {",
				"        value: 'Olá',",
				"        writable: false",
				"    }",
				"});",
				"console.log(obj.propriedade2); // Saída: 'Olá'"
			],
			"description": "Define novas ou modifica propriedades existentes diretamente em um objeto, retornando o objeto. Útil para definir múltiplas propriedades de uma só vez."
		},
		"                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.defineProperty()",
			"body": [
				"const obj = {};",
				"Object.defineProperty(obj, 'propriedade1', {",
				"    value: 42,",
				"    writable: true",
				"});",
				"console.log(obj.propriedade1); // Saída: 42"
			],
			"description": "Define uma nova propriedade diretamente em um objeto ou modifica uma propriedade existente. Útil para controle fino sobre as propriedades de um objeto."
		},
		"                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.entries()",
			"body": [
				"const obj = { a: 1, b: 2, c: 3 };",
				"const entries = Object.entries(obj);",
				"console.log(entries); // Saída: [['a', 1], ['b', 2], ['c', 3]]"
			],
			"description": "Retorna uma array de pares [key, value] das propriedades enumeráveis de um objeto. Útil para iterar sobre pares chave-valor."
		},
		"                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.freeze()",
			"body": [
				"const obj = { prop: 42 };",
				"Object.freeze(obj);",
				"obj.prop = 33;",
				"console.log(obj.prop); // Saída: 42"
			],
			"description": "Congela um objeto, impedindo novas adições ou modificações em suas propriedades. Útil para criar objetos imutáveis."
		},
		"                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.fromEntries()",
			"body": [
				"const entries = [['a', 1], ['b', 2]];",
				"const obj = Object.fromEntries(entries);",
				"console.log(obj); // Saída: { a: 1, b: 2 }"
			],
			"description": "Transforma uma lista de pares chave-valor em um objeto. Útil para converter Map ou arrays de pares em objetos."
		},
		"                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.getOwnPropertyDescriptor()",
			"body": [
				"const obj = { a: 1 };",
				"const desc = Object.getOwnPropertyDescriptor(obj, 'a');",
				"console.log(desc); // Saída: { value: 1, writable: true, enumerable: true, configurable: true }"
			],
			"description": "Retorna o descritor de propriedade para uma propriedade específica de um objeto. Útil para inspecionar as características de uma propriedade."
		},
		"                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.getOwnPropertyDescriptors()",
			"body": [
				"const obj = { a: 1, b: 2 };",
				"const descs = Object.getOwnPropertyDescriptors(obj);",
				"console.log(descs); // Saída: { a: {...}, b: {...} }"
			],
			"description": "Retorna todos os descritores de propriedade de um objeto. Útil para inspecionar todas as propriedades de um objeto."
		},
		"                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.getOwnPropertyNames()",
			"body": [
				"const obj = { a: 1, b: 2, [Symbol('c')]: 3 };",
				"const nomes = Object.getOwnPropertyNames(obj);",
				"console.log(nomes); // Saída: ['a', 'b']"
			],
			"description": "Retorna uma array com os nomes das propriedades próprias enumeráveis e não enumeráveis de um objeto. Útil para inspecionar todas as propriedades próprias de um objeto."
		},
		"                            ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.getOwnPropertySymbols()",
			"body": [
				"const obj = { [Symbol('a')]: 1 };",
				"const symbols = Object.getOwnPropertySymbols(obj);",
				"console.log(symbols); // Saída: [Symbol(a)]"
			],
			"description": "Retorna uma array de todos os símbolos próprios de um objeto. Útil para inspecionar as propriedades de símbolo de um objeto."
		},
		"                         ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.getPrototypeOf()",
			"body": [
				"const obj = {};",
				"const prototipo = Object.getPrototypeOf(obj);",
				"console.log(prototipo); // Saída: {}"
			],
			"description": "Retorna o protótipo de um objeto especificado. Útil para inspecionar a cadeia de protótipos de um objeto."
		},
		"                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.groupBy()",
			"body": [
				"const pessoas = [",
				"    { nome: 'Alice', idade: 21 },",
				"    { nome: 'Bob', idade: 25 },",
				"    { nome: 'Charlie', idade: 21 }",
				"];",
				"const agrupadoPorIdade = Object.groupBy(pessoas, 'idade');",
				"console.log(agrupadoPorIdade); // Saída: { '21': [{...}, {...}], '25': [{...}] }"
			],
			"description": "Agrupa os itens de uma coleção por uma propriedade especificada. Útil para organizar e categorizar dados."
		},
		"                        ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.hasOwn()",
			"body": [
				"const obj = { a: 1 };",
				"const hasA = Object.hasOwn(obj, 'a');",
				"console.log(hasA); // Saída: true"
			],
			"description": "Verifica se o objeto possui a propriedade especificada como propriedade própria (não herdada). Útil para checar a existência de propriedades."
		},
		"                                ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.is()",
			"body": [
				"console.log(Object.is(NaN, NaN)); // Saída: true",
				"console.log(Object.is(0, -0)); // Saída: false"
			],
			"description": "Compara se dois valores são o mesmo valor. Útil para comparações rigorosas, especialmente com NaN e zeros positivos/negativos."
		},
		"                       ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.isExtensible()",
			"body": [
				"const obj = {};",
				"const extensivel = Object.isExtensible(obj);",
				"console.log(extensivel); // Saída: true"
			],
			"description": "Verifica se um objeto é extensível (pode ter novas propriedades adicionadas). Útil para verificar se um objeto pode ser modificado."
		},
		"                             ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.isFrozen()",
			"body": [
				"const obj = Object.freeze({});",
				"const congelado = Object.isFrozen(obj);",
				"console.log(congelado); // Saída: true"
			],
			"description": "Verifica se um objeto está congelado, ou seja, se novas propriedades não podem ser adicionadas e as existentes não podem ser removidas. Útil para garantir a imutabilidade de objetos."
		},
		"                           ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.isSealed()",
			"body": [
				"const obj = Object.seal({});",
				"const selado = Object.isSealed(obj);",
				"console.log(selado); // Saída: true"
			],
			"description": "Verifica se um objeto está selado, ou seja, se novas propriedades não podem ser adicionadas, mas as existentes podem ser modificadas. Útil para restringir a estrutura de um objeto."
		},
		"                      ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.keys()",
			"body": [
				"const obj = { a: 1, b: 2, c: 3 };",
				"const chaves = Object.keys(obj);",
				"console.log(chaves); // Saída: ['a', 'b', 'c']"
			],
			"description": "Retorna uma array das propriedades próprias enumeráveis de um objeto. Útil para iterar sobre as chaves de um objeto."
		},
		"                   ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.preventExtensions()",
			"body": [
				"const obj = { a: 1 };",
				"Object.preventExtensions(obj);",
				"obj.b = 2;",
				"console.log(obj.b); // Saída: undefined"
			],
			"description": "Impede que novas propriedades sejam adicionadas a um objeto. Útil para evitar modificações na estrutura de um objeto."
		},
		"          ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.seal()",
			"body": [
				"const obj = { a: 1 };",
				"Object.seal(obj);",
				"obj.a = 2;",
				"obj.b = 3;",
				"console.log(obj.a); // Saída: 2",
				"console.log(obj.b); // Saída: undefined"
			],
			"description": "Sela um objeto, impedindo a adição de novas propriedades e tornando todas as propriedades existentes não configuráveis. Útil para garantir uma estrutura de objeto rígida."
		},
		"        ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.setPrototypeOf()",
			"body": [
				"const obj = {};",
				"const prototipo = { saudacao: 'Olá' };",
				"Object.setPrototypeOf(obj, prototipo);",
				"console.log(obj.saudacao); // Saída: 'Olá'"
			],
			"description": "Define o protótipo (isto é, o [[Prototype]]) de um objeto especificado. Útil para estabelecer ou alterar a herança prototípica de um objeto."
		},
		"       ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.values()",
			"body": [
				"const obj = { a: 1, b: 2, c: 3 };",
				"const valores = Object.values(obj);",
				"console.log(valores); // Saída: [1, 2, 3]"
			],
			"description": "Retorna uma array com os valores das propriedades próprias enumeráveis de um objeto. Útil para iterar sobre os valores de um objeto."
		},
		"      ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.prototype.hasOwnProperty()",
			"body": [
				"const obj = { a: 1 };",
				"const hasA = obj.hasOwnProperty('a');",
				"console.log(hasA); // Saída: true"
			],
			"description": "Verifica se o objeto possui a propriedade especificada como propriedade própria (não herdada). Útil para checar a existência de propriedades em objetos."
		},
		"     ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.prototype.isPrototypeOf()",
			"body": [
				"function Func() {}",
				"const objeto = new Func();",
				"const isPrototype = Func.prototype.isPrototypeOf(objeto);",
				"console.log(isPrototype); // Saída: true"
			],
			"description": "Verifica se um objeto está presente na cadeia de protótipos de outro objeto. Útil para checar a herança de protótipos."
		},
		"    ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.prototype.propertyIsEnumerable()",
			"body": [
				"const obj = { a: 1 };",
				"const isEnum = obj.propertyIsEnumerable('a');",
				"console.log(isEnum); // Saída: true"
			],
			"description": "Verifica se a propriedade especificada é enumerável. Útil para determinar se uma propriedade pode ser iterada em um loop for...in."
		},
		"   ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.prototype.toLocaleString()",
			"body": [
				"const obj = new Date();",
				"const localString = obj.toLocaleString();",
				"console.log(localString); // Saída depende do locale"
			],
			"description": "Retorna uma string representando o objeto. Essa string é específica para o locale, ou seja, pode variar de acordo com a localização. Útil para formatação local."
		},
		"              ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.prototype.toString()",
			"body": [
				"const obj = {};",
				"const str = obj.toString();",
				"console.log(str); // Saída: '[object Object]'"
			],
			"description": "Retorna uma string representando o objeto. Útil para debugging e para obter uma representação textual de um objeto."
		},
		"           ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Object.prototype.valueOf()",
			"body": [
				"const obj = {};",
				"const valor = obj.valueOf();",
				"console.log(valor); // Saída: {}"
			],
			"description": "Retorna o valor primitivo de um objeto. Útil para obter o valor subjacente de um objeto."
		},
		"  ": {
			"scope": "javascript, typescript",
			"prefix": "Object.prototype.constructor",
			"body": [
				"function Obj() {}",
				"const obj = new Obj();",
				"console.log(obj.constructor); // Saída: [Function: Obj]"
			],
			"description": "A propriedade constructor retorna a função construtora que criou a instância do objeto. Útil para verificar qual função construiu um objeto."
		},
		"         ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Function()",
			"body": [
				"function name(params) {",
				"    // Código da função",
				"    console.log('Função executada');",
				"}",
				"name(); // Chamada da função"
			],
			"description": "Declara uma função em JavaScript. As funções são blocos de código que podem ser nomeados e executados quando chamados. Elas podem receber parâmetros e retornar valores."
		},
		"            ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Function.prototype.apply()",
			"body": [
				"const contexto = { saudacao: 'Olá' };",
				"function saudar(nome) {",
				"    console.log(`${this.saudacao}, ${nome}`);",
				"}",
				"saudar.apply(contexto, ['Mundo']); // Saída: 'Olá, Mundo'"
			],
			"description": "Chama uma função com um dado valor this e argumentos fornecidos como um array. Útil para funções que necessitam de um contexto específico."
		},
		"               ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Function.prototype.bind()",
			"body": [
				"const contexto = { saudacao: 'Oi' };",
				"function saudar(nome) {",
				"    console.log(`${this.saudacao}, ${nome}`);",
				"}",
				"const saudarContexto = saudar.bind(contexto);",
				"saudarContexto('Mundo'); // Saída: 'Oi, Mundo'"
			],
			"description": "Cria uma nova função que, quando chamada, tem sua palavra-chave this definida com o valor fornecido. Útil para funções que precisam ser executadas em um contexto específico."
		},
		"                 ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Function.prototype.call()",
			"body": [
				"const contexto = { saudacao: 'Olá' };",
				"function saudar(nome) {",
				"    console.log(`${this.saudacao}, ${nome}`);",
				"}",
				"saudar.call(contexto, 'Mundo'); // Saída: 'Olá, Mundo'"
			],
			"description": "Chama uma função com um dado valor this e argumentos individuais. Semelhante ao apply, mas os argumentos são passados individualmente."
		},
		"                ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Function.prototype.toString()",
			"body": [
				"function exemplo() {",
				"    console.log('Exemplo de função');",
				"}",
				"console.log(exemplo.toString());"
			],
			"description": "Retorna uma string representando o código-fonte da função. Útil para debugging ou inspecionar o conteúdo de uma função."
		},
		"                  ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Function.prototype[Symbol.hasInstance]()",
			"body": [
				"class MeuClass {}",
				"const obj = new MeuClass();",
				"console.log(MeuClass[Symbol.hasInstance](obj)); // Saída: true"
			],
			"description": "Determina se um objeto é uma instância de um construtor específico. Útil para verificações de tipo em tempo de execução."
		},
		"             ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Function: length",
			"body": [
				"function exemplo(a, b, c) {",
				"    return a + b + c;",
				"}",
				"console.log(exemplo.length); // Saída: 3"
			],
			"description": "A propriedade length indica o número de parâmetros esperados por uma função. Útil para verificar a aridade (número de parâmetros) de uma função."
		},
		"                    ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Function: name",
			"body": [
				"function minhaFuncao() {",
				"    console.log('Função nomeada');",
				"}",
				"console.log(minhaFuncao.name); // Saída: 'minhaFuncao'"
			],
			"description": "A propriedade name retorna o nome da função como uma string. Útil para depuração e identificação de funções em código dinâmico."
		},
		"                     ": {
			"scope": "javascript, typescript",
			"prefix": "#1 Function: prototype",
			"body": [
				"function Pessoa(nome) {",
				"    this.nome = nome;",
				"}",
				"Pessoa.prototype.falar = function() {",
				"    console.log(`Olá, eu sou ${this.nome}`);",
				"};",
				"const pessoa1 = new Pessoa('João');",
				"pessoa1.falar(); // Saída: 'Olá, eu sou João'"
			],
			"description": "A propriedade prototype permite adicionar propriedades e métodos a todos os objetos criados por uma função construtora. Útil para compartilhar comportamentos entre instâncias."
		},
	/********************************* Javascript Codigo *****************************************************/
		"0": {
		"scope": "javascript, typescript",
		"prefix": "_Javascript 1.0",
					"body": [
						"1 Definir uma função com uma expressão de função condicionalmente\r\n2 Criar uma função com 'function' construtor\r\n3 Arrow 'function' sem e com abreviações\r\n4 Callback\r\n5 Cadeia de promise com arrow function\r\n6 Chamar uma função\r\n7 closure\r\n8 Expressão de função\r\n9 Função anônima como argumento de outra função\r\n10 Função auto invocada com e sem argumento\r\n11 Função auto invocado com void\r\n12 Função com um iterator e consumir ele\r\n13 Função construtora com campo e metodo\r\n14 Função hoisting\r\n15 Funções de seta\r\n16 Função geradora lidando com sequencias assincrona\r\n17 Lançar uma exeção com um bloco de instrução\r\n18 Acessando um objeto, criando e atribuindo valores as propriedades\r\n19 Matriz de 2 dimensoes sendo com inicialiazação sendo criada e acessada\r\n20 Uso arguments\r\n21 Classe com construtor e um metodo, sendo construido com tres campos direto no construtor\r\n22 Classe com campos e metodos privados\r\n23 try...catch\r\n24 concatenar string com +\r\n25 Uso de get/set com propriedades privadas em classe\r\n26 Uso while\r\n27 Uso throw\r\n28 Uso var, let e const\r\n29 tratamento de erro async/await\r\n30 usar async/await\r\n31 template string\r\n32 typeof\r\n33 for...of\r\n34 switch\r\n35 super e this em classes\r\n36 for..in\r\n37 Herança em classe e override metodos da classe pai\r\n38 do while\r\n39 campos static, metodo static e static block em uma class\r\n40 parametro rest em contrutor de classe\r\n41 objeto literal\r\n42 parametro padrão\r\n43 use de then em promisse, com suas duas funções no Promise construtor\r\n44 declaração de função\r\n45 definir campo/metodo em prototype\r\n46 definir um get/set em um objeto literal\r\n47 definir um get/set posteriomente em um objeto ja criado\r\n48 definir um metodo em uma classe via this\r\n49 definir um metodo normal e abreviado em um objeto literal\r\n50 destruturação em for..of\r\n51 substituir um membros static de uma classe, mas aprimorado com super\r\n52 Objeto literal com prototipo, campo e metodo\r\n53 Definir dinamicamente o nome de um campo em um objeto literal\r\n54 Definir dinamicamente o nome de um campo em uma classe\r\n55 Export default e import\r\n56 Export nomeado e import\r\n57 Exportando todas as funções como um objeto padrão e import\r\n58 Module.exports e require\r\n59 Module.exports e require com desestruturação\r\n60 encadeamento opcional\r\n61 operador de coalescência nula (??)"
					],
		"description": ""
		},
	
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 1.1",
			"body": [
				"/* Verifica uma condição*/",
				"if (algumaCondicao) {",
				"  var minhaFuncao = function() {",
				"    console.log('A condição foi atendida.');",
				"  };",
				"} else {",
				"  var minhaFuncao = function() {",
				"    console.log('A condição não foi atendida.');",
				"  };",
				"}",
				"",
				"/* Chama a função*/",
				"minhaFuncao();",
			],
			"description": "Definir uma função com uma expressão de função condicionalmente"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 1.2",
			"body": [
				"var minhaFuncao = new Function('console.log('Isso é uma função criada com o construtor Function.');');",
				"",
				"/* Chamando a função*/",
				"minhaFuncao();",
			],
			"description": "Criar uma função com 'function' construtor"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 1.3",
			"body": [
				"> **Função de Seta Sem Abreviação**",
				"const soma = (a, b) => {",
				"return a + b;",
				"};",
				"",
				"console.log(soma(5, 3)); /* Saída: 8*/",
				"",
				"> **Função de seta com abreviação**",
				"const soma = a => a + 10;",
				"",
				"console.log(soma(5, 3)); /* Saída: 8*/",
				"```",
			],
			"description": "Arrow 'function' sem e com abreviações"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 1.4",
			"body": [
				"function fazerAlgumaCoisa(callback) {",
				"  console.log('Fazendo algo...'');",
				"  /* Simulando uma operação assíncrona*/",
				"  setTimeout(function () {",
				"    console.log('Operação concluída.');",
				"    callback(); /* Chamando a função de retorno (callback)*/",
				"  }, 2000);",
				"}",
				"",
				"function minhaFuncaoDeRetorno() {",
				"  console.log('A operação foi tratada pelo callback!');",
				"}",
				"",
				"/* Chamando a função e passando a função de retorno como callback*/",
				"fazerAlgumaCoisa(minhaFuncaoDeRetorno);",
			],
			"description": "Callback"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 1.5",
			"body": [
				"// Função que retorna uma promessa que resolve após um atraso",
				"const fazerAlgumaCoisa = () => {",
				"  return new Promise((resolve, reject) => {",
				"    setTimeout(() => {",
				"      console.log('Passo 1: Fazendo algo...');",
				"      resolve('Passo 1 concluído.');",
				"    }, 1000);",
				"  });",
				"};",
				"",
				"/* Função que retorna uma promessa que resolve após um atraso*/",
				"const fazerOutraCoisa = () => {",
				"  return new Promise((resolve, reject) => {",
				"    setTimeout(() => {",
				"      console.log('Passo 2: Fazendo outra coisa...');",
				"      resolve('Passo 2 concluído.');",
				"    }, 1000);",
				"  });",
				"};",
				"",
				"/* Chama as funções em sequência usando Promise chaining (cadeia de promessas)*/",
				"fazerAlgumaCoisa()",
				"  .then((resultadoPasso1) => {",
				"    console.log(resultadoPasso1);",
				"    return fazerOutraCoisa();",
				"  })",
				"  .then((resultadoPasso2) => {",
				"    console.log(resultadoPasso2);",
				"    console.log('Todas as etapas estão concluídas.');",
				"  })",
				"  .catch((erro) => {",
				"    console.error('Ocorreu um erro:', erro);",
				"  });",
			],
			"description": "Cadeia de promise com arrow 'function'"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 1.6",
			"body": [
				"// Definindo uma função chamada 'saudacao'",
				"function saudacao(nome) {",
				"  console.log('Olá, ' + nome + '!');",
				"}",
				"",
				"// Chamando a função e passando um argumento",
				"saudacao('Alice'); // Isso irá imprimir 'Olá, Alice!' no console",
			],
			"description": "Chamar uma função"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 1.7",
			"body": [
				"function contador() {",
				"  let count = 0;",
				"",
				" function increment() {",
				"    count++;",
				"    console.log(count);",
				"  }",
				"",
				"  return increment;",
				"}",
				"",
				"const contador1 = contador();",
				"const contador2 = contador();",
				"",
				"contador1(); // Isso irá imprimir '1' no console",
				"contador1(); // Isso irá imprimir '2' no console",
				"",
				"contador2(); // Isso irá imprimir '1' no console (outro contador independente)",
			],
			"description": "closure"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 1.8",
			"body": [
				"// Expressão de função anônima",
				"const soma = function (a, b) {",
				"  return a + b;",
				"};",
				"",
				"console.log(soma(5, 3)); // Isso imprimirá 8 no console",
			],
			"description": "Expressão de função"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 1.9",
			"body": [
				"// Função que recebe uma função anônima como argumento",
				"function executarFuncao(callback) {",
				"  console.log('Executando a função...');",
				"  callback(); // Chama a função anônima passada como argumento",
				"}",
				"",
				"// Chama a função executarFuncao e passa uma função anônima como argumento",
				"executarFuncao(function() {",
				"  console.log('Esta é uma função anônima.');",
				"});",
			],
			"description": "Função anônima como argumento de outra função"
		},
		"10                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "_Javascript 2.1",
			"body": [
				"```",
				"> **Funcao Auto Invocada**",
				"```",
				"(function() {",
				"  var mensagem = 'Esta é uma função auto-invocada.';",
				"  console.log(mensagem);",
				"})();",
				"```",
				"> **Funcao Auto Invocada com Argumento**",
				"```",
				"(function(nome) {",
				"  console.log('Olá, ' + nome);",
				"})('João');",
			],
			"description": "Função auto invocada com e sem argumento"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 2.2",
			"body": [
				"void function() {",
				"  console.log('Esta é uma função auto-invocada com void.');",
				"}();",
			],
			"description": "Função auto invocado com void"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 2.3",
			"body": [
				"function* meuGerador() {",
				"  yield 1;",
				"  yield 2;",
				"  yield 3;",
				"}",
				"",
				"function consumirIterator() {",
				"  const iterator = meuGerador();",
				"",
				"  for (const valor of iterator) {",
				"    console.log('Valor do iterator:', valor);",
				"  }",
				"}",
				"",
				"consumirIterator();",
			],
			"description": "Função com um iterator e consumir ele"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 2.4",
			"body": [
				"function Pessoa(nome, idade) {",
				"  this.nome = nome;",
				"  this.idade = idade;",
				"  this.cumprimentar = function() {",
				"    console.log('Olá, meu nome é ' + this.nome + ' e eu tenho ' + this.idade + ' anos.');",
				"  };",
				"}",
				"",
				"// Usando a função construtora para criar objetos Pessoa",
				"var pessoa1 = new Pessoa('João', 30);",
				"var pessoa2 = new Pessoa('Maria', 25);",
				"",
				"// Chamando o método cumprimentar dos objetos",
				"pessoa1.cumprimentar(); // 'Olá, meu nome é João e eu tenho 30 anos.'",
				"pessoa2.cumprimentar(); // 'Olá, meu nome é Maria e eu tenho 25 anos.'",
			],
			"description": "Função construtora"
		},
		"14                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "_Javascript 2.5",
			"body": [
				"minhaFuncao(); // Saída: 'Olá, mundo!'",
				"",
				"function minhaFuncao() {",
				"  console.log('Olá, mundo!');",
				"}",
			],
			"description": "Função hoisting"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 2.6",
			"body": [
				"// Sem parâmetros",
				"const funcaoArrow = () => {",
				"  // Código da função",
				"};",
				"",
				"// Com um parâmetro",
				"const funcaoArrowComParametro = parametro => {",
				"  // Código da função usando o parâmetro",
				"};",
				"",
				"// Com múltiplos parâmetros",
				"const funcaoArrowComMultiplosParametros = (param1, param2) => {",
				"  // Código da função usando os parâmetros",
				"};",
				"",
				"// Com uma expressão de retorno",
				"const soma = (a, b) => a + b;",
			],
			"description": "Funções de seta"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 2.7",
			"body": [
				"function* buscarDadosAssincronamente() {",
				"  const resultado = yield fazerRequisicaoAssincrona();",
				"  console.log(resultado);",
				"}",
				"",
				"function fazerRequisicaoAssincrona() {",
				"  setTimeout(() => {",
				"    gerador.next('Dados da API');",
				"  }, 1000);",
				"}",
				"",
				"const gerador = buscarDadosAssincronamente();",
				"gerador.next();",
			],
			"description": "Função geradora lidando com sequencias assincrona"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 2.8",
			"body": [
				"try {",
				"  throw {",
				"    mensagem: 'Esta é uma exceção lançada com um bloco de instrução.',",
				"    codigo: 500",
				"  };",
				"} catch (excecao) {",
				"  console.error('Uma exceção foi lançada:', excecao.mensagem);",
				"  console.error('Código da exceção:', excecao.codigo);",
				"}",
			],
			"description": "Lançar uma exeção com um bloco de instrução"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 2.9",
			"body": [
				"const pessoa = {",
				" nome: 'João',",
				"  idade: 30,",
				"  cidade: 'São Paulo'",
				"};",
				"",
				"// Acessando propriedades do objeto",
				"console.log(pessoa.nome); // Saída: João",
				"console.log(pessoa.idade); // Saída: 30",
				"console.log(pessoa.cidade); // Saída: São Paulo",
				"",
				"// Alterando o valor de uma propriedade",
				"pessoa.idade = 31;",
				"",
				"// Adicionando uma nova propriedade",
				"pessoa.profissao = 'Engenheiro';",
				"",
				"// Acessando a nova propriedade",
				"console.log(pessoa.profissao); // Saída: Engenheiro",
			],
			"description": "Acessando um objeto, criando e atribuindo valores as propriedades"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 3.1",
			"body": [
				"const matriz = [",
				"  [1, 2, 3],",
				"  [4, 5, 6],",
				"  [7, 8, 9]",
				"];",
				"",
				"// Acessando elementos da matriz",
				"console.log(matriz[0][0]); // Saída: 1",
				"console.log(matriz[1][1]); // Saída: 5",
				"console.log(matriz[2][2]); // Saída: 9",
			],
			"description": "Matriz de 2 dimensoes sendo com inicialiazação sendo criada e acessada"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 3.2",
			"body": [
				"function soma() {",
				"  let total = 0;",
				"  for (let i = 0; i < arguments.length; i++) {",
				"    total += arguments[i];",
				"  }",
				"  return total;",
				"}",
				"",
				"console.log(soma(1, 2, 3)); // Saída: 6",
				"console.log(soma(1, 2, 3, 4, 5)); // Saída: 15",
			],
			"description": "Uso arguments"
		},
		"21                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "_Javascript 3.3",
			"body": [
				"class MinhaClasse {",
				"  constructor(valor1, valor2, valor3) {",
				"    this.valor1 = valor1;",
				"    this.valor2 = valor2;",
				"    this.valor3 = valor3;",
				"  }",
				"",
				" metodo() {",
				"    return this.valor1 + this.valor2 + this.valor3;",
				"  }",
				"}",
				"",
				"const objeto = new MinhaClasse(1, 2, 3);",
				"console.log(objeto.metodo()); // Saída: 6",
			],
			"description": "Classe normal com construtor e um metodo, sendo construido com tres valores"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 3.4",
			"body": [
				"class MinhaClasse {",
				"  #campoPrivado;",
				"",
				"  constructor(campo) {",
				"    this.#campoPrivado = campo;",
				"  }",
				"",
				"  #metodoPrivado() {",
				"    return this.#campoPrivado;",
				"  }",
				"",
				"  metodoPublico() {",
				"    return this.#metodoPrivado();",
				"  }",
				"}",
				"",
				"const objeto = new MinhaClasse('valor');",
				"console.log(objeto.metodoPublico()); // Saída: valor",
			],
			"description": "Classe com campos e metodos privados"
		},
		"23                                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "_Javascript 3.5",
			"body": [
				"try {",
				"  // Código que pode gerar um erro",
				"  throw 'Erro ocorreu!';",
				"} catch (error) {",
				"  console.error('Ocorreu um erro:', error);",
				"}",
			],
			"description": "try...catch"
		},
		"24                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "_Javascript 3.6",
			"body": [
				"const nome = 'João';",
				"const sobrenome = 'Silva';",
				"const nomeCompleto = nome + ' ' + sobrenome;",
				"console.log(nomeCompleto); // Saída: João Silva",
			],
			"description": "concatenar string com +"
		},
		"25                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "_Javascript 3.7",
			"body": [
				"class Exemplo {",
				" #valorPrivado = 0;",
				"",
				" get valor() {",
				"  return this.#valorPrivado;",
				" }",
				"",
				" set valor(novoValor) {",
				"  if (novoValor >= 0) {",
				"     this.#valorPrivado = novoValor;",
				"  } else {",
				"    throw new Error('O valor não pode ser negativo.');",
				"  }",
				" }",
				"}",
				"",
				"const exemplo = new Exemplo();",
				"console.log(exemplo.valor); // Saída: 0",
				"exemplo.valor = 10;",
				"console.log(exemplo.valor); // Saída: 10",
				"exemplo.valor = -5; // Lança um erro",
			],
			"description": "Uso de get/set com propriedades privadas em classe"
		},
		"26                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "_Javascript 3.8",
			"body": [
				"let i = 0;",
				"while (i < 5) {",
				" console.log(i);",
				" i++;",
				"}",
			],
			"description": "Uso while"
		},
		"27                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "_Javascript 3.9",
			"body": [
				"function dividir(dividendo, divisor) {",
				" if (divisor === 0) {",
				"  throw new Error('Não é possível dividir por zero.');",
				" }",
				"return dividendo / divisor;",
				"}",
				"",
				"try {",
				" const resultado = dividir(10, 0);",
				" console.log(resultado);",
				"} catch (error) {",
				"   console.error('Ocorreu um erro:', error.message);",
				"}",
			],
			"description": "Uso throw"
		},
		"28                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "_Javascript 4.1",
			"body": [
				"// Uso de var",
				"var variavelVar = 'valor inicial';",
				"console.log(variavelVar); // Saída: valor inicial",
				"",
				"// Uso de let",
				"let variavelLet = 'valor inicial';",
				"variavelLet = 'novo valor';",
				"console.log(variavelLet); // Saída: novo valor",
				"",
				"// Uso de const",
				"const variavelConst = 'valor inicial';",
				"// variavelConst = 'novo valor'; // Isso resultaria em um erro, pois const não pode ser reatribuído",
				"console.log(variavelConst); // Saída: valor inicial",
			],
			"description": "Uso var, let e const"
		},
		"29                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "_Javascript 4.2",
			"body": [
				"async function minhaFuncao() {",
				"  try {",
				"    const resultado = await algumaFuncaoAsync();",
				"    console.log(resultado);",
				"  } catch (erro) {",
				"    console.error('Ocorreu um erro:', erro);",
				"  }",
				"}",
				"minhaFuncao();",
			],
			"description": "tratamento de erro async/await"
		},
		"30  ": {
			"scope": "javascript, typescript",
			"prefix": "_Javascript 4.3",
			"body": [
				"async function minhaFuncao() {",
				"  try {",
				"    const resultado = await minhaOperacaoAsync();",
				"    console.log(resultado);",
				"  } catch (erro) {",
				"    console.error('Ocorreu um erro:', erro);",
				"  }",
				"}",
				"",
				"minhaFuncao();",
			],
			"description": "usar async/await"
		},
		"31                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "_Javascript 4.4",
			"body": [
				"const nome = 'Alice';",
				"const idade = 30;",
				"",
				"const mensagem = `Olá, meu nome é ${nome} e tenho ${idade} anos.`;",
				"",
				"console.log(mensagem); // Saída: Olá, meu nome é Alice e tenho 30 anos.",
			],
			"description": "template string"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 4.5",
			"body": [
				"const valor = 42;",
				"console.log(typeof valor); // Saída: number",
				"",
				"const nome = 'João';",
				"console.log(typeof nome); // Saída: string",
				"",
				"const ativo = true;",
				"console.log(typeof ativo); // Saída: boolean",
				"",
				"const pessoa = { nome: 'Maria', idade: 25 };",
				"console.log(typeof pessoa); // Saída: object",
				"",
				"const numeros = [1, 2, 3, 4, 5];",
				"console.log(typeof numeros); // Saída: object",
				"",
				"function soma(a, b) {",
				"  return a + b;",
				"}",
				"console.log(typeof soma); // Saída: function",
			],
			"description": "typeof"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 4.6",
			"body": [
				"const numeros = [1, 2, 3, 4, 5];",
				"",
				"for (const numero of numeros) {",
				"  console.log(numero);",
				"}",
			],
			"description": "for...of"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 4.7",
			"body": [
				"const dia = 3;",
				"let mensagem;",
				"",
				"switch (dia) {",
				"  case 1:",
				"    mensagem = 'Segunda-feira';",
				"    break;",
				"  case 2:",
				"    mensagem = 'Terça-feira';",
				"    break;",
				"  case 3:",
				"    mensagem = 'Quarta-feira';",
				"    break;",
				"  case 4:",
				"    mensagem = 'Quinta-feira';",
				"    break;",
				"  case 5:",
				"    mensagem = 'Sexta-feira';",
				"    break;",
				"  case 6:",
				"    mensagem = 'Sábado';",
				"    break;",
				"  case 7:",
				"    mensagem = 'Domingo';",
				"    break;",
				"  default:",
				"    mensagem = 'Dia inválido';",
				"}",
				"",
				"console.log(mensagem);",
			],
			"description": "switch"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 4.8",
			"body": [
				"class Animal {",
				"  constructor(nome) {",
				"    this.nome = nome;",
				"  }",
				"",
				"  emitirSom() {",
				"    console.log(`${this.nome} emitiu um som.`);",
				"  }",
				"}",
				"",
				"class Cachorro extends Animal {",
				"  constructor(nome, raca) {",
				"    super(nome);",
				"    this.raca = raca;",
				"  }",
				"",
				"  latir() {",
				"    console.log(`${this.nome} da raça ${this.raca} está latindo.`);",
				"  }",
				"}",
				"",
				"const cachorro = new Cachorro('Rex', 'Labrador');",
				"cachorro.emitirSom(); // Saída: Rex emitiu um som.",
				"cachorro.latir(); // Saída: Rex da raça Labrador está latindo.",
			],
			"description": "super e this em classes"
		},
		"36                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "_Javascript 4.9",
			"body": [
				"const objeto = { a: 1, b: 2, c: 3 };",
				"",
				"for (const chave in objeto) {",
				"  console.log(`${chave}: ${objeto[chave]}`);",
				"}",
			],
			"description": "for..in"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 5.1",
			"body": [
				"// Definindo a classe pai",
				"class Animal {",
				"  constructor(name) {",
				"    this.name = name;",
				"  }",
				"",
				"  // Método da classe pai",
				"  speak() {",
				"    console.log(`${this.name} faz um barulho.`);",
				"  }",
				"}",
				"",
				"// Definindo a classe filha que herda de Animal",
				"class Dog extends Animal {",
				"constructor(name, breed) {",
				"// Chamando o construtor da classe pai com super()",
				"super(name);",
				"this.breed = breed;",
				"  }",
				"",
				"  // Sobrescrevendo o método da classe pai",
				"  speak() {",
				"    console.log(`${this.name} é um ${this.breed} e late.`);",
				"  }",
				"}",
				"",
				"// Criando uma instância da classe filha",
				"const dog = new Dog('Fido', 'Golden Retriever');",
				"",
				"// Chamando o método da classe filha",
				"dog.speak();",
			],
			"description": "Herança em classe e override metodos da classe pai"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 5.2",
			"body": [
				"let i = 0;",
				"",
				"do {",
				"  console.log(i);",
				"  i++;",
				"} while (i < 5);",
			],
			"description": "do while"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 5.3",
			"body": [
				"class MinhaClasse {",
				"  // Atributos de classe (estáticos)",
				"  static variavelEstatica;",
				"",
				"  // Método estático para inicialização de variáveis estáticas",
				"  static inicializar() {",
				"    MinhaClasse.variavelEstatica = 'Valor inicial';",
				"  }",
				"",
				"  // Bloco de inicialização estático (simulado)",
				"  static {",
				"    // Chamada para o método estático de inicialização",
				"    MinhaClasse.inicializar();",
				"    console.log('Bloco estático executado');",
				"  }",
				"}",
				"",
				"// A classe pode ser usada normalmente após sua definição",
				"console.log(MinhaClasse.variavelEstatica); // Saída: Valor inicial",
			],
			"description": "campos static, metodo static e static block em uma class"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 5.4",
			"body": [
				"class MinhaClasse {",
				"  constructor(...args) {",
				"    console.log('Construtor chamado com os seguintes argumentos:', args);",
				"  }",
				"}",
				"",
				"// Criando instância da classe com diferentes números de argumentos",
				"const instancia1 = new MinhaClasse();",
				"const instancia2 = new MinhaClasse(1, 2, 3);",
				"const instancia3 = new MinhaClasse('a', 'b', 'c', 'd');",
				"",
				"// Saída no console:",
				"// Construtor chamado com os seguint",
			],
			"description": "parametro rest em contrutor de classe"
		},
		"41                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "_Javascript 5.5",
			"body": [
				"const pessoa = {",
				"  nome: 'João',",
				"  idade: 30,",
				"  profissao: 'Engenheiro'",
				"};",
				"",
				"console.log(pessoa.nome); // Saída: João",
				"console.log(pessoa.idade); // Saída: 30",
				"console.log(pessoa.profissao); // Saída: Engenheiro",
			],
			"description": "objeto literal"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 5.6",
			"body": [
				"function saudacao(nome = 'visitante') {",
				"  console.log(`Olá, ${nome}!`);",
				"}",
				"",
				"saudacao(); // Saída: Olá, visitante!",
				"saudacao('João'); // Saída: Olá, João!",
			],
			"description": "parametro padrão"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 5.7",
			"body": [
				"function obterDados() {",
				"  return new Promise((resolve, reject) => {",
				"    // Simulando uma requisição assíncrona",
				"    setTimeout(() => {",
				"      const sucesso = true;",
				"      if (sucesso) {",
				"        resolve('Dados foram obtidos com sucesso!');",
				"      } else {",
				"        reject(new Error('Falha ao obter os dados.'));",
				"      }",
				"    }, 2000);",
				"  });",
				"}",
				"",
				"obterDados()",
				"  .then((dados) => {",
				"    console.log('Sucesso:', dados);",
				"  })",
				"  .catch((erro) => {",
				"    console.error('Erro:', erro.message);",
				"  });",
			],
			"description": "use de then em promisse, com suas duas funções no Promise construtor"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 5.8",
			"body": [
				"// Declaração de função tradicional",
				"function somar(a, b) {",
				"  return a + b;",
				"}",
				"",
				"// Chamada da função",
				"console.log(somar(3, 5)); // Saída: 8",
				"",
				"// Declaração de função anônima atribuída a uma variável",
				"const multiplicar = function(a, b) {",
				"  return a * b;",
				"};",
				"",
				"// Chamada da função anônima",
				"console.log(multiplicar(4, 6)); // Saída 24",
			],
			"description": "declaração de função"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 5.9",
			"body": [
				"// Definindo uma função construtora",
				"function Animal(nome) {",
				"  this.nome = nome;",
				"}",
				"",
				"// Adicionando um método ao protótipo do objeto Animal",
				"Animal.prototype.andar = function() {",
				"  console.log(this.nome + ' está andando...');",
				"};",
				"",
				"// Criando uma instância do objeto Animal",
				"let cachorro = new Animal('Bob');",
				"",
				"// Chamando o método adicionado ao protótipo",
				"cachorro.andar(); // Saída: Bob está andando...",
				"",
				"// Adicionando uma propriedade ao protótipo do objeto Animal",
				"Animal.prototype.tipo = 'Mamífero';",
				"",
				"// Acessando a propriedade adicionada ao protótipo",
				"console.log(cachorro.tipo); // Saída: Mamífero",
			],
			"description": "definir propriedade/metdo em prototype"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 6.1",
			"body": [
				"let pessoa = {",
				"  // Propriedade privada",
				"  _nome: 'John Doe',",
				"",
				"  // Getter para obter o nome",
				"  get nome() {",
				"    return this._nome;",
				"  },",
				"",
				"  // Setter para definir o nome",
				"  set nome(novoNome) {",
				"    this._nome = novoNome;",
				"  }",
				"};",
				"",
				"// Usando o getter para obter o nome",
				"console.log(pessoa.nome); // Saída: John Doe",
				"",
				"// Usando o setter para definir um novo nome",
				"pessoa.nome = 'Alice';",
				"console.log(pessoa.nome); // Saída: Alice",
			],
			"description": "definir um get/set em um objeto literal"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 6.2",
			"body": [
				"let pessoa = {",
				"  _nome: 'John Doe'",
				"};",
				"",
				"// Definindo um getter para a propriedade nome",
				"Object.defineProperty(pessoa, 'nome', {",
				"  get: function() {",
				"    return this._nome;",
				"  },",
				"  enumerable: true, // torna a propriedade visível durante a enumeração",
				"  configurable: true // permite reconfigurar a propriedade posteriormente",
				"});",
				"",
				"// Definindo um setter para a propriedade nome",
				"Object.defineProperty(pessoa, 'nome', {",
				"  set: function(novoNome) {",
				"    this._nome = novoNome;",
				"  },",
				"  enumerable: true, // torna a propriedade visível durante a enumeração",
				"  configurable: true // permite reconfigurar a propriedade posteriormente",
				"});",
				"",
				"// Usando o getter para obter o nome",
				"console.log(pessoa.nome); // Saída: John Doe",
				"",
				"// Usando o setter para definir um novo nome",
				"pessoa.nome = 'Alice';",
				"console.log(pessoa.nome); // Saída: Alice",
			],
			"description": "definir um get/set posteriomente em um objeto ja criado"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 6.3",
			"body": [
				"class Pessoa {",
				"  constructor(nome, idade) {",
				"    this.nome = nome;",
				"    this.idade = idade;",
				"    this.apresentar = function() {",
				"      console.log(`Olá, meu nome é ${this.nome} e tenho ${this.idade} anos.`);",
				"    };",
				"  }",
				"}",
				"",
				"// Criando uma instância da classe Pessoa",
				"let pessoa1 = new Pessoa('João', 30);",
				"",
				"// Chamando o método apresentar",
				"pessoa1.apresentar(); // Saída: Olá, meu nome é João e tenho 30 anos.",
			],
			"description": "definir um metodo em uma classe via this"
		},
		"49                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "_Javascript 6.4",
			"body": [
				"let objeto = {",
				"  // Método normal",
				"  metodoNormal: function() {",
				"    console.log('Este é um método normal');",
				"  },",
				"",
				"  // Método abreviado",
				"  metodoAbreviado() {",
				"    console.log('Este é um método abreviado');",
				"  }",
				"};",
				"",
				"// Chamando os métodos",
				"objeto.metodoNormal();   // Saída: Este é um método normal",
				"objeto.metodoAbreviado(); // Saída: Este é um método abreviado",
			],
			"description": "definir um metodo normal e abreviado em um objeto literal"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 6.5",
			"body": [
				"// Array de objetos",
				"const pessoas = [",
				"  { nome: 'Alice', idade: 30 },",
				"  { nome: 'Bob', idade: 25 },",
				"  { nome: 'Carol', idade: 35 }",
				"];",
				"",
				"// Iterando sobre o array de objetos usando for...of com destruturação",
				"for (const { nome, idade } of pessoas) {",
				"  console.log(`${nome} tem ${idade} anos.`);",
				"}",
			],
			"description": "destruturação em for..of"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 6.6",
			"body": [
				"class Pai {",
				"  static mensagem() {",
				"    return 'Olá do pai!'';",
				"  }",
				"}",
				"",
				"class Filho extends Pai {",
				"  static mensagem() {",
				"    return 'Olá do filho!';",
				"  }",
				"",
				"  static mensagemDoPai() {",
				"    return super.mensagem(); // Acessando a classe pai diretamente",
				"  }",
				"}",
				"",
				"console.log(Filho.mensagem()); // Saída: 'Olá do filho!'",
				"console.log(Filho.mensagemDoPai()); // Saída: 'Olá do pai!'",
			],
			"description": "substituir um membros static de uma classe, mas aprimorado com super"
		},
		{
			"scope": "javascript, typescript",
			"prefix": "_Javascript 6.7",
			"body": [
				"const obj = {",
				"  // __proto__",
				"  __proto__: theProtoObj,",
				"  // Shorthand for 'handler: handler'",
				"  handler,",
				"  // Methods",
				"  toString() {",
				"    // Super calls",
				"    return ''d'' + super.toString();",
				"  },",
				"  // Computed (dynamic) property names",
				"  ['prop_' + (() => 42)()]: 42,",
				"};",
			],
			"description": "Objeto literal com prototipo, campo e metodo"
		},
		"53                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "_Javascript 6.8",
			"body": [
				"const dynamicFieldName = \"idade\";\r\nconst obj = {\r\n  [dynamicFieldName]: 25,\r\n  nome: \"João\"\r\n};\r\n\r\nconsole.log(obj); // { idade: 25, nome: 'João' }"
			],
			"description": "Definir dinamicamente o nome de um campo em um objeto literal"
		},
		"54                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "_Javascript 6.9",
			"body": [
				"class Pessoa {\r\n  constructor(nome, campoDinamico, valorDinamico) {\r\n    this.nome = nome;\r\n    this[campoDinamico] = valorDinamico; // Definindo dinamicamente o campo\r\n  }\r\n}\r\n\r\nconst pessoa1 = new Pessoa(\"João\", \"idade\", 30);\r\nconst pessoa2 = new Pessoa(\"Maria\", \"profissao\", \"Engenheira\");\r\n\r\nconsole.log(pessoa1); // { nome: 'João', idade: 30 }\r\nconsole.log(pessoa2); // { nome: 'Maria', profissao: 'Engenheira' }\r\n"
			],
			"description": "Definir dinamicamente o nome de um campo em uma classe"
		},
		"55": {
		"scope": "javascript, typescript",
		"prefix": "_Javascript 7.1 ",
					"body": [
					"// greeting.js\r\nfunction greet(name) {\r\n  return `Olá, ${name}!`;\r\n}\r\n\r\nexport default greet;\r\n\r\n\r\n// Arquivo: app.js\r\njavascript\r\n// app.js\r\nimport greet from './greeting';\r\n\r\nconsole.log(greet('Mundo')); "
								],
		"description": "export default e import"
		},
	
		"56": {
		"scope": "javascript, typescript",
		"prefix": "_Javascript 7.2",
					"body": [
					"// math.js\r\nexport function add(a, b) {\r\n  return a + b;\r\n}\r\n\r\nexport function subtract(a, b) {\r\n  return a - b;\r\n}\r\n\r\n// app.js\r\nimport { add, subtract } from './math';\r\n\r\nconsole.log(add(2, 3));       // Output: 5\r\nconsole.log(subtract(5, 2));  // Output: 3\r\n"
								],
		"description": "Export nomeado e import"
		},
	
		"57": {
		"scope": "javascript, typescript",
		"prefix": "_Javascript 7.3",
					"body": [
						"// utils.js\r\nfunction greet(name) {\r\n  return `Olá, ${name}!`;\r\n}\r\n\r\nfunction add(a, b) {\r\n  return a + b;\r\n}\r\n\r\nfunction subtract(a, b) {\r\n  return a - b;\r\n}\r\n\r\n// Exportando todas as funções como um objeto padrão\r\nexport default {\r\n  greet,\r\n  add,\r\n  subtract\r\n};\r\n\r\n// app.js\r\nimport utils from './utils';\r\n\r\n// Usando as funções importadas do objeto 'utils'\r\nconsole.log(utils.greet('Mundo'));     // Output: Olá, Mundo!\r\nconsole.log(utils.add(2, 3));          // Output: 5\r\nconsole.log(utils.subtract(5, 2));     // Output: 3\r\n"
								],
		"description": "Exportando todas as funções como um objeto padrão e import"
		},
	
		"58": {
		"scope": "javascript, typescript",
		"prefix": "_Javascript 7.4",
					"body": [
						"// utils.js\r\nfunction greet(name) {\r\n  return `Olá, ${name}!`;\r\n}\r\n\r\nfunction add(a, b) {\r\n  return a + b;\r\n}\r\n\r\nfunction subtract(a, b) {\r\n  return a - b;\r\n}\r\n\r\n// Exportando todas as funções como um objeto\r\nmodule.exports = {\r\n  greet,\r\n  add,\r\n  subtract\r\n};\r\n\r\n// app.js\r\n// Importando o módulo\r\nconst utils = require('./utils');\r\n\r\n// Usando as funções do módulo 'utils'\r\nconsole.log(utils.greet('Mundo'));     // Output: Olá, Mundo!\r\nconsole.log(utils.add(2, 3));          // Output: 5\r\nconsole.log(utils.subtract(5, 2));     // Output: 3\r\n"
								],
		"description": "module.exports e require"
		},
	
		"59": {
		"scope": "javascript, typescript",
		"prefix": "_Javascript 7.5",
					"body": [
					"// utils.js\r\nfunction greet(name) {\r\n  return `Olá, ${name}!`;\r\n}\r\n\r\nfunction add(a, b) {\r\n  return a + b;\r\n}\r\n\r\nfunction subtract(a, b) {\r\n  return a - b;\r\n}\r\n\r\n// Exportando todas as funções como um objeto\r\nmodule.exports = {\r\n  greet,\r\n  add,\r\n  subtract\r\n};\r\n\r\n// app.js\r\n// Importação com desestruturação\r\nconst { greet, add, subtract } = require('./utils');\r\n\r\n// Usando as funções importadas\r\nconsole.log(greet('Mundo'));     // Output: Olá, Mundo!\r\nconsole.log(add(2, 3));          // Output: 5\r\nconsole.log(subtract(5, 2));     // Output: 3"
					
								],
		"description": "Module.exports e require com desestruturação"
		},
	
		"60": {
		"scope": "javascript, typescript",
		"prefix": "_Javascript 7.6",
						"body": [
							"let usuario = {\r\n    nome: 'Maria',\r\n    endereco: {\r\n        cidade: 'Natal',\r\n        estado: 'RN'\r\n    }\r\n};\r\n\r\n// Usando o operador ?. para acessar uma propriedade aninhada\r\nlet cidade = usuario.endereco?.cidade;\r\n\r\nconsole.log(cidade); // Saída: 'Natal'\r\n\r\n// Tentando acessar uma propriedade que não existe sem ?. resultaria em erro\r\nlet pais = usuario.endereco?.pais;\r\n\r\nconsole.log(pais); // Saída: undefined\r\n"
						
									],
		"description": "encadeamento opcional"
			},
	
		"61": {
		"scope": "javascript, typescript",
		"prefix": "_Javascript 7.7",
							"body": [
								"let numeroAnulavel = null;\r\n\r\n// Usando o operador ?? para atribuir um valor padrão se numeroAnulavel for null ou undefined\r\nlet valor = numeroAnulavel ?? 0;\r\n\r\nconsole.log(`O valor é: ${valor}`); // Saída: 0\r\n"
							
										],
		"description": "operador de coalescência nula (??)"
		},
	
			/*"?": {
		"scope": "javascript, typescript",
		"prefix": "?",
					"body": [
						
					
								],
		"description": ""
		},*/
	/********************************* DOM Library ***********************************************************/
		"❓                                                                          ": {
			"scope": "javascript,typescript",
			"prefix": "#3 AbortSignal aborted",
			"body": [
				"const controller = new AbortController();",
				"const signal = controller.signal;",
				"console.log(signal.aborted); // Verifica se foi abortado"
			],
			"description": "Propriedade que indica se o AbortSignal foi abortado"
		},
		"❓                                                                         ": {
			"scope": "javascript,typescript",
			"prefix": "#3 AbortSignal reason",
			"body": [
				"const controller = new AbortController();",
				"const signal = controller.signal;",
				"console.log(signal.reason); // Obtém a razão da interrupção"
			],
			"description": "Propriedade que retorna a razão pela qual o AbortSignal foi abortado"
		},
		"❓                                                                        ": {
			"scope": "javascript,typescript",
			"prefix": "#3 AbortSignal abort()",
			"body": [
				"const abortSignal = AbortSignal.abort('Operação abortada');",
				"console.log(abortSignal.aborted); // true",
				"console.log(abortSignal.reason); // 'Operação abortada'"
			],
			"description": "Método estático que cria e aborta um AbortSignal com uma razão especificada"
		},
		"❓                                                                      ": {
			"scope": "javascript,typescript",
			"prefix": "#3 AbortSignal any()",
			"body": [
				"const controller1 = new AbortController();",
				"const controller2 = new AbortController();",
				"const signal1 = controller1.signal;",
				"const signal2 = controller2.signal;",
				"const anySignal = AbortSignal.any([signal1, signal2]);",
				"console.log(anySignal.aborted); // Verifica se qualquer sinal foi abortado"
			],
			"description": "Método estático que retorna um AbortSignal que é abortado se qualquer um dos sinais fornecidos for abortado"
		},
		"❓                                                                     ": {
			"scope": "javascript,typescript",
			"prefix": "#3 AbortSignal timeout()",
			"body": [
				"const timeoutSignal = AbortSignal.timeout(5000);",
				"timeoutSignal.addEventListener('abort', () => {",
				"  console.log('A operação foi abortada após 5000ms');",
				"});"
			],
			"description": "Método estático que cria um AbortSignal que é abortado após um período de tempo especificado"
		},
		"❓                                                                    ": {
			"scope": "javascript,typescript",
			"prefix": "#3 AbortSignal throwifaborted()",
			"body": [
				"const controller = new AbortController();",
				"const signal = controller.signal;",
				"try {",
				"  signal.throwIfAborted();",
				"  console.log('Sinal não foi abortado');",
				"} catch (e) {",
				"  console.error('Sinal foi abortado', e);",
				"}"
			],
			"description": "Método da instância que lança um erro se o AbortSignal foi abortado"
		},
		"❓                                                                   ": {
			"scope": "javascript,typescript",
			"prefix": "#3 AbortSignal abort",
			"body": [
				"const controller = new AbortController();",
				"const signal = controller.signal;",
				"signal.addEventListener('abort', () => {",
				"  console.log('A operação foi abortada');",
				"});"
			],
			"description": "Evento que é disparado quando o AbortSignal é abortado"
		},
		"❓                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 AbstractRange Collapsed",
			"body": [
				"if (range.collapsed) {",
				"  console.log('O intervalo está colapsado.');",
				"} else {",
				"  console.log('O intervalo não está colapsado.');",
				"}"
			],
			"description": "Verifica se o intervalo está colapsado (sem seleção), retornando verdadeiro se a posição inicial e final do intervalo forem iguais."
		},
		"❓                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 AbstractRange EndContainer",
			"body": [
				"let endNode = range.endContainer;",
				"console.log('Nó final do intervalo:', endNode);"
			],
			"description": "Obtém o nó (elemento DOM) que contém o fim do intervalo. Útil para identificar onde a seleção ou intervalo termina no documento."
		},
		"❓                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 AbstractRange EndOffset",
			"body": [
				"let endOffset = range.endOffset;",
				"console.log('Deslocamento final do intervalo:', endOffset);"
			],
			"description": "Retorna a posição dentro do 'endContainer' onde o intervalo termina. Útil para saber a posição exata do final do intervalo dentro do nó."
		},
		"❓                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 AbstractRange StartContainer",
			"body": [
				"let startNode = range.startContainer;",
				"console.log('Nó inicial do intervalo:', startNode);"
			],
			"description": "Obtém o nó (elemento DOM) que contém o início do intervalo. Isso é útil para determinar onde a seleção ou intervalo começa no documento."
		},
		"❓                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 AbstractRange StartOffset",
			"body": [
				"let startOffset = range.startOffset;",
				"console.log('Deslocamento inicial do intervalo:', startOffset);"
			],
			"description": "Retorna a posição dentro do 'startContainer' onde o intervalo começa. Útil para saber a posição exata do início do intervalo dentro do nó."
		},
		"❓                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Attr LocalName",
			"body": [
				"let localName = attr.localName;",
				"console.log('Nome local do atributo:', localName);"
			],
			"description": "Obtém o nome local do atributo, que é o nome sem o prefixo do namespace. Isso é útil quando você precisa manipular o nome do atributo em um contexto específico, como alterar ou comparar nomes de atributos sem se preocupar com o namespace."
		},
		"❓                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Attr Name",
			"body": [
				"let name = attr.name;",
				"console.log('Nome do atributo:', name);"
			],
			"description": "Obtém o nome completo do atributo, incluindo qualquer prefixo de namespace. Isso é importante quando você está manipulando documentos XML ou HTML e precisa trabalhar com atributos qualificados por namespaces."
		},
		"❓                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Attr NamespaceURI",
			"body": [
				"let namespaceURI = attr.namespaceURI;",
				"console.log('URI do namespace do atributo:', namespaceURI);"
			],
			"description": "Obtém o URI do namespace ao qual o atributo pertence. Isso é útil para identificar ou manipular atributos que pertencem a diferentes namespaces, especialmente em documentos XML."
		},
		"❓                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Attr OwnerElement",
			"body": [
				"let ownerElement = attr.ownerElement;",
				"console.log('Elemento dono do atributo:', ownerElement);"
			],
			"description": "Obtém o elemento ao qual o atributo pertence. Isso é crucial quando você precisa acessar ou modificar o elemento pai que possui o atributo."
		},
		"❓                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Attr Prefix",
			"body": [
				"let prefix = attr.prefix;",
				"console.log('Prefixo do atributo:', prefix);"
			],
			"description": "Obtém o prefixo do namespace do atributo, se houver. Isso é útil em documentos XML onde os atributos podem ser qualificados por prefixos de namespace."
		},
		"❓                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Attr Value",
			"body": [
				"let value = attr.value;",
				"console.log('Valor do atributo:', value);"
			],
			"description": "Obtém ou define o valor atual do atributo. Isso é essencial para manipular o valor dos atributos em elementos HTML ou XML."
		},
		"❓                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CDATASection Text",
			"body": [
				"// Criando uma seção CDATA",
				"let cdataSection = document.createCDATASection('Este é um conteúdo de CDATA');",
				"// Acessando a propriedade Text (herdada de Text)",
				"let textContent = cdataSection.textContent;",
				"console.log('Conteúdo de texto do CDATA:', textContent);"
			],
			"description": "Cria uma seção CDATA e acessa o conteúdo de texto herdado da interface Text."
		},
		"❓                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CDATASection CharacterData",
			"body": [
				"// Criando uma seção CDATA",
				"let cdataSection = document.createCDATASection('Este é um conteúdo de CDATA');",
				"// Acessando propriedades herdadas de CharacterData",
				"let data = cdataSection.data;",
				"console.log('Dados do CDATA:', data);",
				"// Alterando dados do CDATA",
				"cdataSection.data = 'Novo conteúdo de CDATA';",
				"console.log('Novos dados do CDATA:', cdataSection.data);"
			],
			"description": "Cria uma seção CDATA e acessa/edita os dados herdados da interface CharacterData."
		},
		"❓                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CDATASection Node",
			"body": [
				"// Criando uma seção CDATA",
				"let cdataSection = document.createCDATASection('Este é um conteúdo de CDATA');",
				"// Acessando propriedades herdadas de Node",
				"let nodeName = cdataSection.nodeName;",
				"console.log('Nome do nó CDATA:', nodeName);",
				"let nodeType = cdataSection.nodeType;",
				"console.log('Tipo de nó CDATA:', nodeType);"
			],
			"description": "Cria uma seção CDATA e acessa propriedades herdadas da interface Node."
		},
		"❓                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CDATASection EventTarget",
			"body": [
				"// Criando uma seção CDATA",
				"let cdataSection = document.createCDATASection('Este é um conteúdo de CDATA');",
				"// Adicionando um evento herdado de EventTarget",
				"cdataSection.addEventListener('someevent', function(event) {",
				"  console.log('Evento disparado no CDATA:', event);",
				"});"
			],
			"description": "Cria uma seção CDATA e adiciona um evento herdado da interface EventTarget."
		},
		"❓": {
			"scope": "javascript, typescript",
			"prefix": "#3 CharacterData Data",
			"body": [
				"let data = charData.data;",
				"console.log('Dados:', data);"
			],
			"description": "Obtém os dados contidos no objeto CharacterData."
		},
		"❓ ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CharacterData Length",
			"body": [
				"let length = charData.length;",
				"console.log('Comprimento dos dados:', length);"
			],
			"description": "Obtém o comprimento dos dados contidos no objeto CharacterData."
		},
		"❓  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CharacterData NextElementSibling",
			"body": [
				"let nextElem = charData.nextElementSibling;",
				"console.log('Próximo elemento irmão:', nextElem);"
			],
			"description": "Obtém o próximo elemento irmão do objeto CharacterData."
		},
		"❓   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CharacterData PreviousElementSibling",
			"body": [
				"let prevElem = charData.previousElementSibling;",
				"console.log('Elemento irmão anterior:', prevElem);"
			],
			"description": "Obtém o elemento irmão anterior do objeto CharacterData."
		},
		"❓    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CharacterData After()",
			"body": [
				"charData.after('Novo texto');",
				"console.log('Texto inserido após CharacterData.');"
			],
			"description": "Insere um texto após o objeto CharacterData."
		},
		"❓     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CharacterData AppendData()",
			"body": [
				"charData.appendData('Texto adicional');",
				"console.log('Dados anexados ao CharacterData:', charData.data);"
			],
			"description": "Anexa dados adicionais ao objeto CharacterData."
		},
		"❓      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CharacterData Before()",
			"body": [
				"charData.before('Texto antes');",
				"console.log('Texto inserido antes do CharacterData.');"
			],
			"description": "Insere um texto antes do objeto CharacterData."
		},
		"❓       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CharacterData DeleteData()",
			"body": [
				"charData.deleteData(0, 5);",
				"console.log('Dados após a exclusão:', charData.data);"
			],
			"description": "Exclui dados do objeto CharacterData a partir de um índice específico."
		},
		"❓        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CharacterData InsertData()",
			"body": [
				"charData.insertData(0, 'Texto inserido');",
				"console.log('Dados após inserção:', charData.data);"
			],
			"description": "Insere dados no objeto CharacterData a partir de um índice específico."
		},
		"❓         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CharacterData Remove()",
			"body": [
				"charData.remove();",
				"console.log('CharacterData removido.');"
			],
			"description": "Remove o objeto CharacterData do documento."
		},
		"❓          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CharacterData ReplaceData()",
			"body": [
				"charData.replaceData(0, 5, 'Texto substituído');",
				"console.log('Dados após substituição:', charData.data);"
			],
			"description": "Substitui dados no objeto CharacterData a partir de um índice específico."
		},
		"❓           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CharacterData ReplaceWith()",
			"body": [
				"charData.replaceWith('Novo conteúdo');",
				"console.log('CharacterData substituído.');"
			],
			"description": "Substitui o objeto CharacterData com novo conteúdo."
		},
		"❓            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CharacterData SubstringData()",
			"body": [
				"let substring = charData.substringData(0, 5);",
				"console.log('Substring dos dados:', substring);"
			],
			"description": "Extrai uma substring dos dados contidos no objeto CharacterData."
		},
		"❓             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Comment()",
			"body": [
				"// Criando um novo nó de comentário",
				"let comment = new Comment('Este é um comentário');",
				"console.log('Nó de comentário criado:', comment);"
			],
			"description": "Construtor da interface Comment que cria um novo nó de comentário com o texto especificado."
		},
		"❓              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CustomEvent()",
			"body": [
				"// Criando um novo evento personalizado",
				"let event = new CustomEvent('eventoPersonalizado', { detail: { mensagem: 'Este é um evento personalizado' } });",
				"console.log('Evento personalizado criado:', event);"
			],
			"description": "Construtor da interface CustomEvent que cria um novo evento personalizado com o nome especificado e detalhes opcionais."
		},
		"❓               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 CustomEvent Detail",
			"body": [
				"// Criando um novo evento personalizado",
				"let event = new CustomEvent('eventoPersonalizado', { detail: { mensagem: 'Este é um evento personalizado' } });",
				"// Acessando a propriedade detail do evento personalizado",
				"let detalhes = event.detail;",
				"console.log('Detalhes do evento personalizado:', detalhes);"
			],
			"description": "Acessa a propriedade 'detail' do evento personalizado, que contém informações adicionais associadas ao evento."
		},
		"❓                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentFragment()",
			"body": [
				"// Criando um novo DocumentFragment",
				"let docFragment = document.createDocumentFragment();",
				"console.log('DocumentFragment criado:', docFragment);"
			],
			"description": "Construtor da interface DocumentFragment que cria um novo fragmento de documento vazio."
		},
		"❓                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentFragment ChildElementCount",
			"body": [
				"let childCount = docFragment.childElementCount;",
				"console.log('Número de elementos filhos:', childCount);"
			],
			"description": "Obtém o número de elementos filhos diretos no DocumentFragment."
		},
		"❓                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentFragment Children",
			"body": [
				"let children = docFragment.children;",
				"console.log('Elementos filhos:', children);"
			],
			"description": "Obtém uma coleção de elementos filhos diretos no DocumentFragment."
		},
		"❓                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentFragment FirstElementChild",
			"body": [
				"let firstChild = docFragment.firstElementChild;",
				"console.log('Primeiro elemento filho:', firstChild);"
			],
			"description": "Obtém o primeiro elemento filho direto no DocumentFragment."
		},
		"❓                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentFragment LastElementChild",
			"body": [
				"let lastChild = docFragment.lastElementChild;",
				"console.log('Último elemento filho:', lastChild);"
			],
			"description": "Obtém o último elemento filho direto no DocumentFragment."
		},
		"❓                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentFragment Append()",
			"body": [
				"let newElement = document.createElement('div');",
				"docFragment.append(newElement);",
				"console.log('Elemento anexado ao DocumentFragment:', docFragment);"
			],
			"description": "Anexa um novo elemento ao DocumentFragment."
		},
		"❓                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentFragment GetElementById()",
			"body": [
				"let element = docFragment.getElementById('elementId');",
				"console.log('Elemento obtido pelo ID:', element);"
			],
			"description": "Obtém um elemento dentro do DocumentFragment pelo seu ID."
		},
		"❓                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentFragment Prepend()",
			"body": [
				"let newElement = document.createElement('div');",
				"docFragment.prepend(newElement);",
				"console.log('Elemento adicionado ao início do DocumentFragment:', docFragment);"
			],
			"description": "Adiciona um novo elemento ao início do DocumentFragment."
		},
		"❓                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentFragment QuerySelector()",
			"body": [
				"let element = docFragment.querySelector('div');",
				"console.log('Elemento selecionado no DocumentFragment:', element);"
			],
			"description": "Seleciona o primeiro elemento correspondente ao seletor CSS no DocumentFragment."
		},
		"❓                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentFragment QuerySelectorAll()",
			"body": [
				"let elements = docFragment.querySelectorAll('div');",
				"console.log('Elementos selecionados no DocumentFragment:', elements);"
			],
			"description": "Seleciona todos os elementos correspondentes ao seletor CSS no DocumentFragment."
		},
		"❓                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentFragment ReplaceChildren",
			"body": [
				"let newElement = document.createElement('div');",
				"docFragment.replaceChildren(newElement);",
				"console.log('Elementos filhos substituídos no DocumentFragment:', docFragment);"
			],
			"description": "Substitui os elementos filhos do DocumentFragment pelos novos elementos especificados."
		},
		"❓                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentType Name",
			"body": [
				"let name = document.doctype.name;",
				"console.log('Nome do tipo de documento:', name);"
			],
			"description": "Obtém o nome do tipo de documento do nó DocumentType."
		},
		"❓                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentType PublicId",
			"body": [
				"let publicId = document.doctype.publicId;",
				"console.log('ID público do tipo de documento:', publicId);"
			],
			"description": "Obtém o ID público do tipo de documento do nó DocumentType."
		},
		"❓                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentType SystemId",
			"body": [
				"let systemId = document.doctype.systemId;",
				"console.log('ID do sistema do tipo de documento:', systemId);"
			],
			"description": "Obtém o ID do sistema do tipo de documento do nó DocumentType."
		},
		"❓                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentType After()",
			"body": [
				"document.doctype.after('Novo conteúdo');",
				"console.log('Conteúdo adicionado após o DocumentType.');"
			],
			"description": "Insere conteúdo após o nó DocumentType."
		},
		"❓                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentType Before()",
			"body": [
				"document.doctype.before('Novo conteúdo');",
				"console.log('Conteúdo adicionado antes do DocumentType.');"
			],
			"description": "Insere conteúdo antes do nó DocumentType."
		},
		"❓                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentType Remove()",
			"body": [
				"document.doctype.remove();",
				"console.log('DocumentType removido.');"
			],
			"description": "Remove o nó DocumentType do documento."
		},
		"❓                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DocumentType ReplaceWith()",
			"body": [
				"document.doctype.replaceWith('Novo conteúdo');",
				"console.log('DocumentType substituído.');"
			],
			"description": "Substitui o nó DocumentType com o novo conteúdo especificado."
		},
		"❓                                  ": {
			"scope": "javascript, typescript",
			"prefix": "docConstructor1",
			"body": [
				"// Criando um novo objeto Document",
				"let doc = new Document();",
				"console.log('Documento criado:', doc);"
			],
			"description": "Construtor da interface Document que cria um novo objeto Document."
		},
		"❓                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ActiveElement",
			"body": [
				"let activeElement = document.activeElement;",
				"console.log('Elemento ativo:', activeElement);"
			],
			"description": "Obtém o elemento que atualmente tem o foco no documento."
		},
		"❓                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document AdoptedStyleSheets",
			"body": [
				"let styleSheets = document.adoptedStyleSheets;",
				"console.log('StyleSheets adotados:', styleSheets);"
			],
			"description": "Obtém uma lista de folhas de estilo adotadas pelo documento."
		},
		"❓                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Body",
			"body": [
				"let body = document.body;",
				"console.log('Elemento body do documento:', body);"
			],
			"description": "Obtém o elemento body do documento."
		},
		"❓                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CharacterSet",
			"body": [
				"let charSet = document.characterSet;",
				"console.log('Conjunto de caracteres do documento:', charSet);"
			],
			"description": "Obtém o conjunto de caracteres usado pelo documento."
		},
		"❓                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ChildElementCount",
			"body": [
				"let childCount = document.childElementCount;",
				"console.log('Número de elementos filhos:', childCount);"
			],
			"description": "Obtém o número de elementos filhos diretos do documento."
		},
		"❓                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Children",
			"body": [
				"let children = document.children;",
				"console.log('Elementos filhos:', children);"
			],
			"description": "Obtém uma coleção de elementos filhos diretos do documento."
		},
		"❓                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CompatMode",
			"body": [
				"let compatMode = document.compatMode;",
				"console.log('Modo de compatibilidade do documento:', compatMode);"
			],
			"description": "Obtém o modo de compatibilidade do documento (por exemplo, 'BackCompat' para modo Quirks ou 'CSS1Compat' para modo Padrões)."
		},
		"❓                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ContentType",
			"body": [
				"let contentType = document.contentType;",
				"console.log('Tipo de conteúdo do documento:', contentType);"
			],
			"description": "Obtém o tipo MIME do conteúdo do documento."
		},
		"❓                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Cookie",
			"body": [
				"let cookie = document.cookie;",
				"console.log('Cookies do documento:', cookie);"
			],
			"description": "Obtém ou define os cookies associados ao documento."
		},
		"❓                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CurrentScript",
			"body": [
				"let currentScript = document.currentScript;",
				"console.log('Script atual:', currentScript);"
			],
			"description": "Obtém o script que está atualmente sendo processado."
		},
		"❓                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document DefaultView",
			"body": [
				"let defaultView = document.defaultView;",
				"console.log('Janela ou contexto de exibição do documento:', defaultView);"
			],
			"description": "Obtém a janela ou outro contexto de exibição associado ao documento."
		},
		"❓                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document DesignMode",
			"body": [
				"let designMode = document.designMode;",
				"console.log('Modo de design do documento:', designMode);",
				"// Ativar/desativar o modo de design",
				"document.designMode = 'on'; // ou 'off'"
			],
			"description": "Obtém ou define o modo de design do documento ('on' para edição, 'off' para exibição normal)."
		},
		"❓                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Dir",
			"body": [
				"let dir = document.dir;",
				"console.log('Direção de texto do documento:', dir);",
				"// Definir a direção do texto",
				"document.dir = 'rtl'; // ou 'ltr'"
			],
			"description": "Obtém ou define a direção do texto do documento ('ltr' para da esquerda para a direita, 'rtl' para da direita para a esquerda)."
		},
		"❓                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Doctype",
			"body": [
				"let doctype = document.doctype;",
				"console.log('Tipo de documento:', doctype);"
			],
			"description": "Obtém o nó do tipo de documento (DOCTYPE) associado ao documento."
		},
		"❓                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document DocumentElement",
			"body": [
				"let docElement = document.documentElement;",
				"console.log('Elemento raiz do documento:', docElement);"
			],
			"description": "Obtém o elemento raiz (geralmente o elemento <html>) do documento."
		},
		"❓                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document DocumentURI",
			"body": [
				"let docURI = document.documentURI;",
				"console.log('URI do documento:', docURI);"
			],
			"description": "Obtém a URI do documento."
		},
		"❓                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Embeds",
			"body": [
				"let embeds = document.embeds;",
				"console.log('Coleção de elementos embed:', embeds);"
			],
			"description": "Obtém uma coleção de todos os elementos <embed> no documento."
		},
		"⚠️           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document FeaturePolicy",
			"body": [
				"let featurePolicy = document.featurePolicy;",
				"console.log('Política de recursos do documento:', featurePolicy);"
			],
			"description": "Obtém a política de recursos (Feature Policy) aplicada ao documento."
		},
		"❓                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document FirstElementChild",
			"body": [
				"let firstChild = document.firstElementChild;",
				"console.log('Primeiro elemento filho do documento:', firstChild);"
			],
			"description": "Obtém o primeiro elemento filho direto do documento."
		},
		"❓                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Fonts",
			"body": [
				"let fonts = document.fonts;",
				"console.log('Coleção de fontes carregadas no documento:', fonts);"
			],
			"description": "Obtém uma coleção de fontes carregadas no documento."
		},
		"❓                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Forms",
			"body": [
				"let forms = document.forms;",
				"console.log('Coleção de formulários no documento:', forms);"
			],
			"description": "Obtém uma coleção de todos os elementos <form> no documento."
		},
		"❓                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document FragmentDirective",
			"body": [
				"let fragmentDirective = document.fragmentDirective;",
				"console.log('Diretiva de fragmento:', fragmentDirective);"
			],
			"description": "Obtém a diretiva de fragmento do documento."
		},
		"❓                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document FullscreenElement",
			"body": [
				"let fullscreenElement = document.fullscreenElement;",
				"console.log('Elemento em tela cheia:', fullscreenElement);"
			],
			"description": "Obtém o elemento que está atualmente em modo de tela cheia no documento."
		},
		"❓                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document FullscreenEnabled",
			"body": [
				"let fullscreenEnabled = document.fullscreenEnabled;",
				"console.log('Tela cheia habilitada:', fullscreenEnabled);"
			],
			"description": "Verifica se a API de tela cheia está habilitada no documento."
		},
		"❓                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Head",
			"body": [
				"let head = document.head;",
				"console.log('Elemento head do documento:', head);"
			],
			"description": "Obtém o elemento <head> do documento."
		},
		"❓                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Hidden",
			"body": [
				"let hidden = document.hidden;",
				"console.log('Documento oculto:', hidden);"
			],
			"description": "Verifica se o documento está atualmente oculto."
		},
		"❓                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Images",
			"body": [
				"let images = document.images;",
				"console.log('Coleção de imagens no documento:', images);"
			],
			"description": "Obtém uma coleção de todos os elementos <img> no documento."
		},
		"❓                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Implementation",
			"body": [
				"let implementation = document.implementation;",
				"console.log('Implementação do documento:', implementation);"
			],
			"description": "Obtém o objeto DOMImplementation associado ao documento."
		},
		"❓                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document LastElementChild",
			"body": [
				"let lastChild = document.lastElementChild;",
				"console.log('Último elemento filho do documento:', lastChild);"
			],
			"description": "Obtém o último elemento filho direto do documento."
		},
		"❓                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document LastModified",
			"body": [
				"let lastModified = document.lastModified;",
				"console.log('Última modificação do documento:', lastModified);"
			],
			"description": "Obtém a data e hora da última modificação do documento."
		},
		"❓                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document LinkColor",
			"body": [
				"let linkColor = document.linkColor;",
				"console.log('Cor dos links no documento:', linkColor);",
				"// Definir a cor dos links",
				"document.linkColor = '#FF0000'; // vermelho"
			],
			"description": "Obtém ou define a cor dos links no documento."
		},
		"❓                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Links",
			"body": [
				"let links = document.links;",
				"console.log('Coleção de links no documento:', links);"
			],
			"description": "Obtém uma coleção de todos os links (<a>) no documento."
		},
		"❓                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Location",
			"body": [
				"let location = document.location;",
				"console.log('Localização do documento:', location);"
			],
			"description": "Obtém a localização (URL) do documento."
		},
		"❓                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document PictureInPictureElement",
			"body": [
				"let pipElement = document.pictureInPictureElement;",
				"console.log('Elemento em modo Picture-in-Picture:', pipElement);"
			],
			"description": "Obtém o elemento que está atualmente em modo Picture-in-Picture."
		},
		"❓                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document PictureInPictureEnabled",
			"body": [
				"let pipEnabled = document.pictureInPictureEnabled;",
				"console.log('Picture-in-Picture habilitado:', pipEnabled);"
			],
			"description": "Verifica se a API Picture-in-Picture está habilitada no documento."
		},
		"❓                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Plugins",
			"body": [
				"let plugins = document.plugins;",
				"console.log('Plugins do documento:', plugins);"
			],
			"description": "Obtém uma coleção de todos os plugins no documento."
		},
		"❓                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document PointerLockElement",
			"body": [
				"let pointerLockElement = document.pointerLockElement;",
				"console.log('Elemento com bloqueio do ponteiro:', pointerLockElement);"
			],
			"description": "Obtém o elemento que atualmente tem o ponteiro bloqueado."
		},
		"⚠️ ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Prerendering39",
			"body": [
				"let prerendering = document.prerendering;",
				"console.log('Documento em pré-renderização:', prerendering);"
			],
			"description": "Verifica se o documento está em estado de pré-renderização (experimental)."
		},
		"❓                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ReadyState40",
			"body": [
				"let readyState = document.readyState;",
				"console.log('Estado de prontidão do documento:', readyState);"
			],
			"description": "Obtém o estado de prontidão do documento ('loading', 'interactive' ou 'complete')."
		},
		"❓                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Referrer",
			"body": [
				"let referrer = document.referrer;",
				"console.log('Referenciador do documento:', referrer);"
			],
			"description": "Obtém o URI da página que vinculou ao documento atual."
		},
		"❓                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Scripts",
			"body": [
				"let scripts = document.scripts;",
				"console.log('Coleção de scripts no documento:', scripts);"
			],
			"description": "Obtém uma coleção de todos os elementos <script> no documento."
		},
		"❓                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ScrollingElement",
			"body": [
				"let scrollingElement = document.scrollingElement;",
				"console.log('Elemento de rolagem do documento:', scrollingElement);"
			],
			"description": "Obtém o elemento que é usado como elemento de rolagem do documento."
		},
		"❓                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document StyleSheets",
			"body": [
				"let styleSheets = document.styleSheets;",
				"console.log('Folhas de estilo do documento:', styleSheets);"
			],
			"description": "Obtém uma lista de todas as folhas de estilo associadas ao documento."
		},
		"❓                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Timeline",
			"body": [
				"let timeline = document.timeline;",
				"console.log('Timeline do documento:', timeline);"
			],
			"description": "Obtém a linha do tempo (timeline) do documento."
		},
		"❓                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Title",
			"body": [
				"let title = document.title;",
				"console.log('Título do documento:', title);",
				"// Definir o título do documento",
				"document.title = 'Novo Título';"
			],
			"description": "Obtém ou define o título do documento."
		},
		"❓                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document URL",
			"body": [
				"let url = document.URL;",
				"console.log('URL do documento:', url);"
			],
			"description": "Obtém o URL completo do documento."
		},
		"❓                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document VisibilityState",
			"body": [
				"let visibilityState = document.visibilityState;",
				"console.log('Estado de visibilidade do documento:', visibilityState);"
			],
			"description": "Obtém o estado de visibilidade do documento ('visible', 'hidden', etc.)."
		},
		"❓                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ParseHTMLUnsafe()",
			"body": [
				"let parsedHTML = Document.parseHTMLUnsafe('<div>Conteúdo HTML</div>');",
				"console.log('HTML analisado:', parsedHTML);"
			],
			"description": "Analisa uma string HTML e retorna um fragmento de documento. Este método é estático"
		},
		"❓                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document AdoptNode()",
			"body": [
				"let adoptedNode = document.adoptNode(node);",
				"console.log('Nó adotado:', adoptedNode);"
			],
			"description": "Adota um nó de outro documento, permitindo que ele seja utilizado no documento atual sem clonagem. O nó é removido do documento original e anexado ao novo documento."
		},
		"❓                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Append()",
			"body": [
				"document.append(elemento);",
				"console.log('Elemento anexado ao documento:', elemento);"
			],
			"description": "Anexa um ou mais nós (elementos) ao final da lista de filhos do documento."
		},
		"⚠️  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document BrowsingTopics()",
			"body": [
				"let topics = await document.browsingTopics();",
				"console.log('Tópicos de navegação:', topics);"
			],
			"description": "Recupera informações sobre os tópicos de navegação do usuário. Este método é experimental e pode não estar disponível em todos os navegadores."
		},
		"❓                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CaretPositionFromPoint()",
			"body": [
				"let caretPosition = document.caretPositionFromPoint(x, y);",
				"console.log('Posição do caret:', caretPosition);"
			],
			"description": "Retorna a posição do caret (cursor de texto) com base nas coordenadas x e y fornecidas."
		},
		"⚠️": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CaretRangeFromPoint()",
			"body": [
				"let range = document.caretRangeFromPoint(x, y);",
				"console.log('Intervalo de caret:', range);"
			],
			"description": "Retorna um intervalo (range) que contém a posição do caret com base nas coordenadas x e y fornecidas. Este método é experimental e pode não estar disponível em todos os navegadores."
		},
		"❓                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Close()",
			"body": [
				"document.close();",
				"console.log('Documento fechado.');"
			],
			"description": "Fecha um documento que foi aberto por document.open(). Principalmente usado em conjunto com document.write() para modificar o conteúdo do documento."
		},
		"❓                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CreateAttribute()",
			"body": [
				"let attr = document.createAttribute('atributo');",
				"console.log('Atributo criado:', attr);"
			],
			"description": "Cria um novo nó de atributo com o nome especificado e o retorna. Pode ser usado para adicionar novos atributos a elementos."
		},
		"❓                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CreateAttributeNS()",
			"body": [
				"let attr = document.createAttributeNS('namespaceURI', 'qualificado');",
				"console.log('Atributo com namespace criado:', attr);"
			],
			"description": "Cria um novo nó de atributo com um namespace URI e um nome qualificado, e o retorna."
		},
		"❓                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CreateCDATASection()",
			"body": [
				"let cdata = document.createCDATASection('Conteúdo de CDATA');",
				"console.log('Seção CDATA criada:', cdata);"
			],
			"description": "Cria um novo nó CDATASection com os dados de texto fornecidos e o retorna. CDATA é usado para incluir blocos de texto que não devem ser interpretados como código."
		},
		"❓                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CreateComment()",
			"body": [
				"let comment = document.createComment('Este é um comentário');",
				"console.log('Comentário criado:', comment);"
			],
			"description": "Cria um novo nó de comentário com os dados de texto fornecidos e o retorna."
		},
		"❓                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CreateDocumentFragment()",
			"body": [
				"let fragment = document.createDocumentFragment();",
				"console.log('Fragmento de documento criado:', fragment);"
			],
			"description": "Cria um novo DocumentFragment vazio. Um DocumentFragment é uma porção leve de um documento que pode conter nós e ser utilizado para realizar operações em massa nos elementos do DOM."
		},
		"❓                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CreateElement()",
			"body": [
				"let element = document.createElement('div');",
				"console.log('Elemento criado:', element);"
			],
			"description": "Cria um novo elemento HTML com o nome de tag especificado e o retorna."
		},
		"❓                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CreateElementNS()",
			"body": [
				"let element = document.createElementNS('namespaceURI', 'qualificado');",
				"console.log('Elemento com namespace criado:', element);"
			],
			"description": "Cria um novo elemento com um namespace URI e um nome qualificado, e o retorna. Isto é útil para criar elementos em documentos XML ou HTML que usam namespaces."
		},
		"❓                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CreateExpression()",
			"body": [
				"let expression = document.createExpression(xpath, namespaceResolver);",
				"console.log('Expressão XPath criada:', expression);"
			],
			"description": "Cria uma nova expressão XPath com a string XPath especificada e um resolvedor de namespace opcional."
		},
		"❓                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CreateNodeIterator()",
			"body": [
				"let nodeIterator = document.createNodeIterator(root, whatToShow, filter);",
				"console.log('NodeIterator criado:', nodeIterator);"
			],
			"description": "Cria um novo NodeIterator, que é usado para atravessar uma lista de nós em um documento. Pode ser configurado para mostrar tipos de nós específicos e aplicar um filtro opcional."
		},
		"❓                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CreateProcessingInstruction()",
			"body": [
				"let pi = document.createProcessingInstruction('target', 'data');",
				"console.log('Instrução de processamento criada:', pi);"
			],
			"description": "Cria um novo nó de instrução de processamento com o destino e os dados fornecidos, e o retorna. Instruções de processamento são usadas para transmitir informações específicas de processamento para um aplicativo que está processando o documento."
		},
		"❓                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CreateRange()",
			"body": [
				"let range = document.createRange();",
				"console.log('Intervalo criado:', range);"
			],
			"description": "Cria um novo objeto Range, que representa uma seção do documento."
		},
		"❓                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CreateTextNode()",
			"body": [
				"let textNode = document.createTextNode('Texto de exemplo');",
				"console.log('Nó de texto criado:', textNode);"
			],
			"description": "Cria um novo nó de texto com os dados de texto fornecidos e o retorna."
		},
		"❓                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document CreateTreeWalker()",
			"body": [
				"let treeWalker = document.createTreeWalker(root, whatToShow, filter);",
				"console.log('TreeWalker criado:', treeWalker);"
			],
			"description": "Cria um novo TreeWalker, que é usado para percorrer nós na estrutura do documento. Pode ser configurado para mostrar tipos de nós específicos e aplicar um filtro opcional."
		},
		"❓                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ElementFromPoint()",
			"body": [
				"let element = document.elementFromPoint(x, y);",
				"console.log('Elemento no ponto:', element);"
			],
			"description": "Retorna o elemento mais alto (no z-index) no ponto especificado pelas coordenadas x e y."
		},
		"❓                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ElementsFromPoint()",
			"body": [
				"let elements = document.elementsFromPoint(x, y);",
				"console.log('Elementos no ponto:', elements);"
			],
			"description": "Retorna uma lista de todos os elementos sob o ponto especificado pelas coordenadas x e y, ordenados do mais alto no z-index para o mais baixo."
		},
		"❓                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Evaluate()",
			"body": [
				"let result = document.evaluate(xpathExpression, contextNode, namespaceResolver, resultType, result);",
				"console.log('Resultado da avaliação:', result);"
			],
			"description": "Avalia uma expressão XPath no contexto do documento e retorna um resultado XPathResult."
		},
		"❓                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ExitFullscreen()",
			"body": [
				"document.exitFullscreen().then(() => {",
				"  console.log('Saiu do modo tela cheia.');",
				"}).catch((err) => {",
				"  console.error('Erro ao sair do modo tela cheia:', err);",
				"});"
			],
			"description": "Sai do modo de tela cheia, retornando a exibição do documento ao estado normal."
		},
		"❓                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ExitPictureInPicture()",
			"body": [
				"document.exitPictureInPicture().then(() => {",
				"  console.log('Saiu do modo Picture-in-Picture.');",
				"}).catch((err) => {",
				"  console.error('Erro ao sair do modo Picture-in-Picture:', err);",
				"});"
			],
			"description": "Sai do modo Picture-in-Picture, retornando o elemento de vídeo ao seu estado normal."
		},
		"❓                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ExitPointerLock()",
			"body": [
				"document.exitPointerLock();",
				"console.log('Saiu do modo de bloqueio do ponteiro.');"
			],
			"description": "Sai do modo de bloqueio do ponteiro, permitindo que o ponteiro do mouse se mova livremente."
		},
		"❓                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document GetAnimations()",
			"body": [
				"let animations = document.getAnimations();",
				"console.log('Animações do documento:', animations);"
			],
			"description": "Obtém uma lista de todas as animações que estão atualmente em execução no documento."
		},
		"❓                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document GetElementById()",
			"body": [
				"let element = document.getElementById('elementId');",
				"console.log('Elemento com ID especificado:', element);"
			],
			"description": "Retorna o elemento cujo ID é igual ao valor especificado."
		},
		"❓                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document GetElementsByClassName()",
			"body": [
				"let elements = document.getElementsByClassName('className');",
				"console.log('Elementos com a classe especificada:', elements);"
			],
			"description": "Retorna uma lista de elementos que possuem a classe especificada."
		},
		"❓                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document GetElementsByName()",
			"body": [
				"let elements = document.getElementsByName('name');",
				"console.log('Elementos com o nome especificado:', elements);"
			],
			"description": "Retorna uma lista de elementos que possuem o atributo nome especificado."
		},
		"❓                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document GetElementsByTagName()",
			"body": [
				"let elements = document.getElementsByTagName('tagName');",
				"console.log('Elementos com a tag especificada:', elements);"
			],
			"description": "Retorna uma lista de elementos que possuem o nome de tag especificado."
		},
		"❓                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document GetElementsByTagNameNS()",
			"body": [
				"let elements = document.getElementsByTagNameNS('namespaceURI', 'localName');",
				"console.log('Elementos com o namespace e nome local especificados:', elements);"
			],
			"description": "Retorna uma lista de elementos que possuem o namespace e o nome local especificados."
		},
		"❓                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document GetSelection()",
			"body": [
				"let selection = document.getSelection();",
				"console.log('Seleção atual:', selection);"
			],
			"description": "Obtém o objeto Selection, representando a seleção de texto do usuário."
		},
		"❓                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document HasFocus()",
			"body": [
				"let hasFocus = document.hasFocus();",
				"console.log('Documento está em foco:', hasFocus);"
			],
			"description": "Verifica se o documento atualmente tem foco."
		},
		"❓                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document HasStorageAccess()",
			"body": [
				"document.hasStorageAccess().then((hasAccess) => {",
				"  console.log('Acesso ao armazenamento:', hasAccess);",
				"}).catch((err) => {",
				"  console.error('Erro ao verificar acesso ao armazenamento:', err);",
				"});"
			],
			"description": "Verifica se o documento tem acesso ao armazenamento de primeira parte. Retorna uma Promise que é resolvida com um booleano."
		},
		"❓                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document HasUnpartitionedCookieAccess()",
			"body": [
				"document.hasUnpartitionedCookieAccess().then((hasAccess) => {",
				"  console.log('Acesso a cookies não particionados:', hasAccess);",
				"}).catch((err) => {",
				"  console.error('Erro ao verificar acesso a cookies não particionados:', err);",
				"});"
			],
			"description": "Verifica se o documento tem acesso a cookies não particionados. Retorna uma Promise que é resolvida com um booleano."
		},
		"❓                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ImportNode()",
			"body": [
				"let importedNode = document.importNode(externalNode, true);",
				"console.log('Nó importado:', importedNode);"
			],
			"description": "Importa um nó de outro documento para o documento atual. Pode opcionalmente importar o nó inteiro ou apenas uma cópia superficial."
		},
		"⚠️   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document MozSetImageElement())",
			"body": [
				"document.mozSetImageElement('elementId', imageElement);",
				"console.log('Elemento de imagem definido no documento.');"
			],
			"description": "Define um elemento de imagem para ser usado como uma máscara de imagem ou referência de imagem no documento. Este método é específico do Firefox."
		},
		"❓                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Open()",
			"body": [
				"document.open('text/html', 'replace');",
				"console.log('Documento aberto para escrita.');"
			],
			"description": "Abre um fluxo de documento para escrita. Geralmente usado antes de document.write() para modificar o conteúdo do documento."
		},
		"❓                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Prepend()",
			"body": [
				"document.prepend(elemento);",
				"console.log('Elemento adicionado ao início do documento:', elemento);"
			],
			"description": "Adiciona um ou mais nós (elementos) ao início da lista de filhos do documento."
		},
		"❓                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document QuerySelector()",
			"body": [
				"let element = document.querySelector('selector');",
				"console.log('Elemento selecionado:', element);"
			],
			"description": "Retorna o primeiro elemento que corresponde ao seletor CSS especificado."
		},
		"❓                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document QuerySelectorAll()",
			"body": [
				"let elements = document.querySelectorAll('selector');",
				"console.log('Elementos selecionados:', elements);"
			],
			"description": "Retorna uma lista de todos os elementos que correspondem ao seletor CSS especificado."
		},
		"⚠️    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ReleaseCapture",
			"body": [
				"document.releaseCapture();",
				"console.log('Liberação do capture do documento.');"
			],
			"description": "Libera o capture do mouse do documento, permitindo que eventos de mouse sejam capturados novamente por outros elementos."
		},
		"❓                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ReplaceChildren()",
			"body": [
				"document.replaceChildren(novoElemento);",
				"console.log('Elementos filhos substituídos no documento:', novoElemento);"
			],
			"description": "Substitui todos os filhos do documento pelos novos nós especificados."
		},
		"❓                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document RequestStorageAccess()",
			"body": [
				"document.requestStorageAccess().then(() => {",
				"  console.log('Acesso ao armazenamento concedido.');",
				"}).catch((err) => {",
				"  console.error('Erro ao solicitar acesso ao armazenamento:', err);",
				"});"
			],
			"description": "Solicita acesso ao armazenamento de primeira parte. Retorna uma Promise que é resolvida se o acesso for concedido."
		},
		"⚠️     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document RequestStorageAccessFor()",
			"body": [
				"document.requestStorageAccessFor('siteEspecifico').then(() => {",
				"  console.log('Acesso ao armazenamento para o site específico concedido.');",
				"}).catch((err) => {",
				"  console.error('Erro ao solicitar acesso ao armazenamento para o site específico:', err);",
				"});"
			],
			"description": "Solicita acesso ao armazenamento para um site específico. Retorna uma Promise que é resolvida se o acesso for concedido. Este método é experimental."
		},
		"❓                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document StartViewTransition()",
			"body": [
				"document.startViewTransition(() => {",
				"  console.log('Transição de visualização iniciada.');",
				"  // Código da transição aqui",
				"});"
			],
			"description": "Inicia uma transição de visualização, permitindo que você defina animações ou transições visuais enquanto o conteúdo da página é atualizado. Este método é experimental."
		},
		"❓                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Writeln()",
			"body": [
				"document.writeln('Conteúdo escrito no documento com nova linha.');",
				"console.log('Conteúdo adicionado ao documento com nova linha.');"
			],
			"description": "Escreve uma string de texto no documento seguida por uma nova linha, substituindo o conteúdo atual se o documento foi aberto com document.open(). Este método está obsoleto."
		},
		"⚠️      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Afterscriptexecute",
			"body": [
				"document.addEventListener('afterscriptexecute', (event) => {",
				"  console.log('Script executado:', event.target);",
				"});"
			],
			"description": "Ouve o evento afterscriptexecute, que é disparado após a execução de um script inserido no documento. Este método é experimental."
		},
		"⚠️       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Beforescriptexecute",
			"body": [
				"document.addEventListener('beforescriptexecute', (event) => {",
				"  console.log('Script prestes a ser executado:', event.target);",
				"});"
			],
			"description": "Ouve o evento beforescriptexecute, que é disparado antes da execução de um script inserido no documento. Este método é experimental."
		},
		"Evento": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Copy",
			"body": [
				"document.addEventListener('copy', (event) => {",
				"  console.log('Conteúdo copiado:', event);",
				"});"
			],
			"description": "Ouve o evento de cópia (copy), que é disparado quando o conteúdo do documento é copiado para a área de transferência."
		},
		"Evento ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Cut",
			"body": [
				"document.addEventListener('cut', (event) => {",
				"  console.log('Conteúdo recortado:', event);",
				"});"
			],
			"description": "Ouve o evento de recorte (cut), que é disparado quando o conteúdo do documento é recortado para a área de transferência."
		},
		"Evento  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document DOMContentLoaded",
			"body": [
				"document.addEventListener('DOMContentLoaded', () => {",
				"  console.log('DOM completamente carregado e analisado.');",
				"});"
			],
			"description": "Ouve o evento DOMContentLoaded, que é disparado quando o DOM do documento foi completamente carregado e analisado."
		},
		"Evento   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document FullscreenChange",
			"body": [
				"document.addEventListener('fullscreenchange', () => {",
				"  console.log('Modo de tela cheia mudou.');",
				"});"
			],
			"description": "Ouve o evento fullscreenchange, que é disparado quando o estado de tela cheia do documento muda."
		},
		"Evento    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document FullscreenError",
			"body": [
				"document.addEventListener('fullscreenerror', () => {",
				"  console.error('Erro ao entrar no modo de tela cheia.');",
				"});"
			],
			"description": "Ouve o evento fullscreenerror, que é disparado quando ocorre um erro ao tentar entrar ou sair do modo de tela cheia."
		},
		"Evento     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Paste",
			"body": [
				"document.addEventListener('paste', (event) => {",
				"  console.log('Conteúdo colado:', event);",
				"});"
			],
			"description": "Ouve o evento de colagem (paste), que é disparado quando o conteúdo é colado no documento."
		},
		"Evento      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document PointerlockChange",
			"body": [
				"document.addEventListener('pointerlockchange', () => {",
				"  console.log('Estado de bloqueio do ponteiro mudou.');",
				"});"
			],
			"description": "Ouve o evento pointerlockchange, que é disparado quando o estado de bloqueio do ponteiro muda."
		},
		"Evento       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document PointerlockError",
			"body": [
				"document.addEventListener('pointerlockerror', () => {",
				"  console.error('Erro ao tentar bloquear o ponteiro.');",
				"});"
			],
			"description": "Ouve o evento pointerlockerror, que é disparado quando ocorre um erro ao tentar bloquear o ponteiro."
		},
		"⚠️        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document PrerenderingChange",
			"body": [
				"document.addEventListener('prerenderingchange', () => {",
				"  console.log('Estado de pré-renderização mudou.');",
				"});"
			],
			"description": "Ouve o evento prerenderingchange, que é disparado quando o estado de pré-renderização do documento muda. Este evento é experimental."
		},
		"Evento        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ReadyStateChange",
			"body": [
				"document.addEventListener('readystatechange', () => {",
				"  console.log('Estado de prontidão do documento mudou:', document.readyState);",
				"});"
			],
			"description": "Ouve o evento readystatechange, que é disparado quando o estado de prontidão do documento muda ('loading', 'interactive', 'complete')."
		},
		"Evento         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document Scroll",
			"body": [
				"document.addEventListener('scroll', () => {",
				"  console.log('Documento rolado.');",
				"});"
			],
			"description": "Ouve o evento scroll, que é disparado quando o documento é rolado."
		},
		"Evento          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ScrollEnd",
			"body": [
				"document.addEventListener('scrollend', () => {",
				"  console.log('Rolagem do documento terminou.');",
				"});"
			],
			"description": "Ouve o evento scrollend, que é disparado quando a rolagem do documento termina."
		},
		"⚠️          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ScrollSnapChange",
			"body": [
				"document.addEventListener('scrollsnapchange', () => {",
				"  console.log('Posição de snap de rolagem do documento mudou.');",
				"});"
			],
			"description": "Ouve o evento scrollsnapchange, que é disparado quando a posição de snap de rolagem do documento muda. Este evento é experimental."
		},
		"⚠️         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document ScrollSnapChanging",
			"body": [
				"document.addEventListener('scrollsnapchanging', () => {",
				"  console.log('Posição de snap de rolagem do documento está mudando.');",
				"});"
			],
			"description": "Ouve o evento scrollsnapchanging, que é disparado quando a posição de snap de rolagem do documento está mudando. Este evento é experimental."
		},
		"Evento           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document SecurityPolicyViolation",
			"body": [
				"document.addEventListener('securitypolicyviolation', (event) => {",
				"  console.log('Violação de política de segurança:', event);",
				"});"
			],
			"description": "Ouve o evento securitypolicyviolation, que é disparado quando ocorre uma violação da política de segurança do conteúdo (CSP) do documento."
		},
		"Evento            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document SelectionChange",
			"body": [
				"document.addEventListener('selectionchange', () => {",
				"  console.log('Seleção do documento mudou.');",
				"});"
			],
			"description": "Ouve o evento selectionchange, que é disparado quando a seleção de texto no documento muda."
		},
		"Evento             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Document VisibilityChange",
			"body": [
				"document.addEventListener('visibilitychange', () => {",
				"  console.log('Visibilidade do documento mudou:', document.visibilityState);",
				"});"
			],
			"description": "Ouve o evento visibilitychange, que é disparado quando a visibilidade do documento muda ('visible', 'hidden', etc.)."
		},
		"❓                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMException()",
			"body": [
				"// Criando um novo DOMException",
				"try {",
				"  throw new DOMException('Mensagem de erro detalhada', 'NomeDoErro');",
				"} catch (exception) {",
				"  console.log('DOMException criada:');",
				"  console.log('Mensagem:', exception.message);",
				"  console.log('Nome:', exception.name);",
				"}"
			],
			"description": "Construtor da interface DOMException que cria um novo objeto DOMException com uma mensagem de erro detalhada e nome do erro especificado. O exemplo também demonstra como capturar e exibir as informações da exceção."
		},
		"❓                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMException Message",
			"body": [
				"// Exemplo detalhado da propriedade message",
				"try {",
				"  throw new DOMException('Erro ao tentar realizar a operação X', 'OperationError');",
				"} catch (exception) {",
				"  let message = exception.message;",
				"  console.log('Mensagem detalhada da exceção:', message);",
				"  // Saída esperada: 'Erro ao tentar realizar a operação X'",
				"}"
			],
			"description": "Obtém a mensagem de erro associada à DOMException. O exemplo demonstra como criar uma exceção com uma mensagem específica e capturá-la para exibição detalhada."
		},
		"❓                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMException Name",
			"body": [
				"// Exemplo detalhado da propriedade name",
				"try {",
				"  throw new DOMException('Erro genérico', 'GenericError');",
				"} catch (exception) {",
				"  let name = exception.name;",
				"  console.log('Nome detalhado da exceção:', name);",
				"  // Saída esperada: 'GenericError'",
				"}"
			],
			"description": "Obtém o nome da DOMException, que indica o tipo de erro. O exemplo demonstra como criar uma exceção com um nome específico e capturá-la para exibição detalhada."
		},
		"❓                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMImplementation CreateDocument",
			"body": [
				"// Criando um novo documento XML com o método createDocument",
				"let impl = document.implementation;",
				"let newDoc = impl.createDocument('http://www.w3.org/1999/xhtml', 'html', null);",
				"console.log('Documento XML criado:', newDoc);",
				"// Cria um elemento raiz",
				"let root = newDoc.documentElement;",
				"console.log('Elemento raiz:', root);"
			],
			"description": "Cria um novo documento XML usando o método createDocument. Este exemplo cria um documento XHTML com um elemento raiz <html>."
		},
		"❓                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMImplementation CreateDocumentType",
			"body": [
				"// Criando um novo DocumentType com o método createDocumentType",
				"let impl = document.implementation;",
				"let doctype = impl.createDocumentType('html', '', '');",
				"console.log('DocumentType criado:', doctype);",
				"// Criando um novo documento XML com o DocumentType",
				"let newDoc = impl.createDocument('http://www.w3.org/1999/xhtml', 'html', doctype);",
				"console.log('Documento XML com DocumentType criado:', newDoc);"
			],
			"description": "Cria um novo DocumentType e um documento XML associado com o método createDocumentType. O exemplo cria um DocumentType para XHTML e um documento com esse tipo de documento."
		},
		"❓                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMImplementation createHTMLDocument",
			"body": [
				"// Criando um novo documento HTML com o método createHTMLDocument",
				"let impl = document.implementation;",
				"let htmlDoc = impl.createHTMLDocument('Título do Novo Documento');",
				"console.log('Documento HTML criado:', htmlDoc);",
				"// Acessando e modificando o elemento body",
				"let body = htmlDoc.body;",
				"body.innerHTML = '<h1>Olá, mundo!</h1>';",
				"console.log('Elemento body modificado:', body);"
			],
			"description": "Cria um novo documento HTML usando o método createHTMLDocument. Este exemplo cria um documento HTML com um título especificado e modifica o conteúdo do elemento <body>."
		},
		"❓                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMParser()",
			"body": [
				"// Criando uma nova instância do DOMParser",
				"let parser = new DOMParser();",
				"console.log('DOMParser criado:', parser);"
			],
			"description": "Construtor da interface DOMParser que cria uma nova instância do DOMParser."
		},
		"❓                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMParser ParseFromString",
			"body": [
				"// Criando uma nova instância do DOMParser",
				"let parser = new DOMParser();",
				"// Exemplo detalhado do método parseFromString",
				"let xmlString = `<?xml version=\"1.0\" encoding=\"UTF-8\"?><note><to>Tove</to><from>Jani</from><heading>Reminder</heading><body>Don't forget me this weekend!</body></note>`;",
				"let xmlDoc = parser.parseFromString(xmlString, 'application/xml');",
				"console.log('Documento XML analisado:', xmlDoc);",
				"// Acessando o conteúdo do documento XML",
				"let to = xmlDoc.getElementsByTagName('to')[0].textContent;",
				"let from = xmlDoc.getElementsByTagName('from')[0].textContent;",
				"let heading = xmlDoc.getElementsByTagName('heading')[0].textContent;",
				"let body = xmlDoc.getElementsByTagName('body')[0].textContent;",
				"console.log('Conteúdo do XML:', { to, from, heading, body });"
			],
			"description": "Utiliza o método parseFromString do DOMParser para analisar uma string XML e retornar um documento XML. O exemplo demonstra como criar uma instância do DOMParser, analisar uma string XML e acessar o conteúdo do documento resultante."
		},
		"❓                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMPoint()",
			"body": [
				"// Criando uma nova instância de DOMPoint",
				"let point = new DOMPoint(10, 20, 30, 1);",
				"console.log('DOMPoint criado:', point);",
				"// Acessando as propriedades do ponto",
				"console.log('x:', point.x);",
				"console.log('y:', point.y);",
				"console.log('z:', point.z);",
				"console.log('w:', point.w);"
			],
			"description": "Construtor da interface DOMPoint que cria um novo ponto com coordenadas especificadas x, y, z e w. O exemplo demonstra como criar uma instância de DOMPoint e acessar suas propriedades."
		},
		"❓                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMPoint W",
			"body": [
				"// Acessando e modificando a propriedade w de um DOMPoint",
				"let point = new DOMPoint();",
				"point.w = 1;",
				"console.log('Propriedade w do ponto:', point.w);"
			],
			"description": "Obtém e define a coordenada w do ponto. A propriedade w representa a componente homogênea do ponto."
		},
		"❓                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMPoint X",
			"body": [
				"// Acessando e modificando a propriedade x de um DOMPoint",
				"let point = new DOMPoint();",
				"point.x = 10;",
				"console.log('Propriedade x do ponto:', point.x);"
			],
			"description": "Obtém e define a coordenada x do ponto. A propriedade x representa a componente horizontal do ponto."
		},
		"❓                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMPoint Y",
			"body": [
				"// Acessando e modificando a propriedade y de um DOMPoint",
				"let point = new DOMPoint();",
				"point.y = 20;",
				"console.log('Propriedade y do ponto:', point.y);"
			],
			"description": "Obtém e define a coordenada y do ponto. A propriedade y representa a componente vertical do ponto."
		},
		"❓                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMPoint Z",
			"body": [
				"// Acessando e modificando a propriedade z de um DOMPoint",
				"let point = new DOMPoint();",
				"point.z = 30;",
				"console.log('Propriedade z do ponto:', point.z);"
			],
			"description": "Obtém e define a coordenada z do ponto. A propriedade z representa a componente de profundidade do ponto."
		},
		"❓                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMPoint FromPoint",
			"body": [
				"// Criando um DOMPoint a partir de outro ponto usando fromPoint",
				"let sourcePoint = { x: 10, y: 20, z: 30, w: 1 };",
				"let newPoint = DOMPoint.fromPoint(sourcePoint);",
				"console.log('Novo DOMPoint criado a partir de outro ponto:', newPoint);"
			],
			"description": "Cria um novo DOMPoint a partir de outro ponto usando o método estático fromPoint. Este exemplo demonstra como usar fromPoint para copiar as coordenadas de um ponto existente para um novo DOMPoint."
		},
		"❓                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMPointReadOnly()",
			"body": [
				"// Criando uma nova instância de DOMPointReadOnly",
				"let readOnlyPoint = new DOMPointReadOnly(10, 20, 30, 1);",
				"console.log('DOMPointReadOnly criado:', readOnlyPoint);",
				"// Acessando as propriedades do ponto de leitura",
				"console.log('x:', readOnlyPoint.x);",
				"console.log('y:', readOnlyPoint.y);",
				"console.log('z:', readOnlyPoint.z);",
				"console.log('w:', readOnlyPoint.w);"
			],
			"description": "Construtor da interface DOMPointReadOnly que cria um novo ponto de leitura com coordenadas especificadas x, y, z e w. O exemplo demonstra como criar uma instância de DOMPointReadOnly e acessar suas propriedades."
		},
		"❓                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMPointReadOnly W",
			"body": [
				"// Acessando a propriedade w de um DOMPointReadOnly",
				"let readOnlyPoint = new DOMPointReadOnly(10, 20, 30, 1);",
				"console.log('Propriedade w do ponto de leitura:', readOnlyPoint.w);"
			],
			"description": "Obtém a coordenada w do ponto de leitura. A propriedade w representa a componente homogênea do ponto."
		},
		"❓                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMPointReadOnly X",
			"body": [
				"// Acessando a propriedade x de um DOMPointReadOnly",
				"let readOnlyPoint = new DOMPointReadOnly(10, 20, 30, 1);",
				"console.log('Propriedade x do ponto de leitura:', readOnlyPoint.x);"
			],
			"description": "Obtém a coordenada x do ponto de leitura. A propriedade x representa a componente horizontal do ponto."
		},
		"❓                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMPointReadOnly Y",
			"body": [
				"// Acessando a propriedade y de um DOMPointReadOnly",
				"let readOnlyPoint = new DOMPointReadOnly(10, 20, 30, 1);",
				"console.log('Propriedade y do ponto de leitura:', readOnlyPoint.y);"
			],
			"description": "Obtém a coordenada y do ponto de leitura. A propriedade y representa a componente vertical do ponto."
		},
		"❓                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMPointReadOnly Z",
			"body": [
				"// Acessando a propriedade z de um DOMPointReadOnly",
				"let readOnlyPoint = new DOMPointReadOnly(10, 20, 30, 1);",
				"console.log('Propriedade z do ponto de leitura:', readOnlyPoint.z);"
			],
			"description": "Obtém a coordenada z do ponto de leitura. A propriedade z representa a componente de profundidade do ponto."
		},
		"❓                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMPointReadOnly FromPoint()",
			"body": [
				"// Criando um DOMPointReadOnly a partir de outro ponto usando fromPoint",
				"let sourcePoint = { x: 10, y: 20, z: 30, w: 1 };",
				"let readOnlyPoint = DOMPointReadOnly.fromPoint(sourcePoint);",
				"console.log('DOMPointReadOnly criado a partir de outro ponto:', readOnlyPoint);"
			],
			"description": "Cria um novo DOMPointReadOnly a partir de outro ponto usando o método estático fromPoint. Este exemplo demonstra como usar fromPoint para copiar as coordenadas de um ponto existente para um novo DOMPointReadOnly."
		},
		"❓                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMPointReadOnly MatrixTransform()",
			"body": [
				"// Aplicando uma transformação de matriz a um DOMPointReadOnly",
				"let readOnlyPoint = new DOMPointReadOnly(10, 20, 30, 1);",
				"let matrix = new DOMMatrix().translate(5, 10, 15);",
				"let transformedPoint = readOnlyPoint.matrixTransform(matrix);",
				"console.log('Ponto transformado:', transformedPoint);"
			],
			"description": "Aplica uma transformação de matriz a um DOMPointReadOnly e retorna um novo ponto transformado. Este exemplo demonstra como usar o método matrixTransform para aplicar uma transformação de matriz a um ponto."
		},
		"❓                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMPointReadOnly ToJSON()",
			"body": [
				"// Convertendo um DOMPointReadOnly para JSON",
				"let readOnlyPoint = new DOMPointReadOnly(10, 20, 30, 1);",
				"let json = readOnlyPoint.toJSON();",
				"console.log('Ponto convertido para JSON:', json);"
			],
			"description": "Converte um DOMPointReadOnly para um objeto JSON. Este exemplo demonstra como usar o método toJSON para converter um ponto de leitura para JSON."
		},
		"❓                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMRect()",
			"body": [
				"// Criando uma nova instância de DOMRect",
				"let rect = new DOMRect(10, 20, 30, 40);",
				"console.log('DOMRect criado:', rect);",
				"// Acessando as propriedades do retângulo",
				"console.log('x:', rect.x);",
				"console.log('y:', rect.y);",
				"console.log('width:', rect.width);",
				"console.log('height:', rect.height);"
			],
			"description": "Construtor da interface DOMRect que cria um novo retângulo com coordenadas x, y e dimensões width e height especificadas. O exemplo demonstra como criar uma instância de DOMRect e acessar suas propriedades."
		},
		"❓                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMRect Height",
			"body": [
				"// Acessando e modificando a propriedade height de um DOMRect",
				"let rect = new DOMRect(10, 20, 30, 40);",
				"rect.height = 50;",
				"console.log('Propriedade height do retângulo:', rect.height);"
			],
			"description": "Obtém e define a altura do retângulo. A propriedade height representa a altura em unidades CSS pixels."
		},
		"❓                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMRect Width",
			"body": [
				"// Acessando e modificando a propriedade width de um DOMRect",
				"let rect = new DOMRect(10, 20, 30, 40);",
				"rect.width = 60;",
				"console.log('Propriedade width do retângulo:', rect.width);"
			],
			"description": "Obtém e define a largura do retângulo. A propriedade width representa a largura em unidades CSS pixels."
		},
		"❓                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMRect X",
			"body": [
				"// Acessando e modificando a propriedade x de um DOMRect",
				"let rect = new DOMRect(10, 20, 30, 40);",
				"rect.x = 15;",
				"console.log('Propriedade x do retângulo:', rect.x);"
			],
			"description": "Obtém e define a coordenada x do retângulo. A propriedade x representa a posição horizontal do canto superior esquerdo do retângulo em unidades CSS pixels."
		},
		"❓                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMRect Y",
			"body": [
				"// Acessando e modificando a propriedade y de um DOMRect",
				"let rect = new DOMRect(10, 20, 30, 40);",
				"rect.y = 25;",
				"console.log('Propriedade y do retângulo:', rect.y);"
			],
			"description": "Obtém e define a coordenada y do retângulo. A propriedade y representa a posição vertical do canto superior esquerdo do retângulo em unidades CSS pixels."
		},
		"❓                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMRect FromRect",
			"body": [
				"// Criando um DOMRect a partir de outro retângulo usando fromRect",
				"let sourceRect = { x: 10, y: 20, width: 30, height: 40 };",
				"let newRect = DOMRect.fromRect(sourceRect);",
				"console.log('Novo DOMRect criado a partir de outro retângulo:', newRect);"
			],
			"description": "Cria um novo DOMRect a partir de outro retângulo usando o método estático fromRect. Este exemplo demonstra como usar fromRect para copiar as coordenadas e dimensões de um retângulo existente para um novo DOMRect."
		},
		"❓                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMTokenList Length",
			"body": [
				"// Acessando a propriedade length de um DOMTokenList",
				"let tokenList = document.body.classList;",
				"let length = tokenList.length;",
				"console.log('Número de tokens na lista:', length);"
			],
			"description": "Obtém o número de tokens na lista de tokens (DOMTokenList). Este exemplo demonstra como acessar a propriedade length de uma lista de classes de um elemento."
		},
		"❓                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMTokenList Value",
			"body": [
				"// Acessando e modificando a propriedade value de um DOMTokenList",
				"let tokenList = document.body.classList;",
				"let value = tokenList.value;",
				"console.log('Valor atual da lista de tokens:', value);",
				"// Definir um novo valor para a lista de tokens",
				"tokenList.value = 'new-class';",
				"console.log('Novo valor da lista de tokens:', tokenList.value);"
			],
			"description": "Obtém e define o valor da lista de tokens (DOMTokenList) como uma string. Este exemplo demonstra como acessar e modificar a propriedade value de uma lista de classes de um elemento."
		},
		"❓                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMTokenList Add()",
			"body": [
				"// Adicionando um ou mais tokens a um DOMTokenList",
				"let tokenList = document.body.classList;",
				"tokenList.add('new-class');",
				"console.log('Tokens após adicionar:', tokenList);"
			],
			"description": "Adiciona um ou mais tokens à lista de tokens (DOMTokenList). Este exemplo demonstra como adicionar uma nova classe à lista de classes de um elemento."
		},
		"❓                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMTokenList Contains()",
			"body": [
				"// Verificando se um DOMTokenList contém um token específico",
				"let tokenList = document.body.classList;",
				"let contains = tokenList.contains('existing-class');",
				"console.log('A lista de tokens contém a classe específica:', contains);"
			],
			"description": "Verifica se a lista de tokens (DOMTokenList) contém um token específico. Este exemplo demonstra como verificar se um elemento possui uma classe específica."
		},
		"❓                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMTokenList Entries()",
			"body": [
				"// Obtendo um iterador de pares chave/valor para os tokens em um DOMTokenList",
				"let tokenList = document.body.classList;",
				"let entries = tokenList.entries();",
				"for (let entry of entries) {",
				"  console.log('Entrada na lista de tokens:', entry);",
				"}"
			],
			"description": "Obtém um iterador de pares chave/valor para os tokens na lista de tokens (DOMTokenList). Este exemplo demonstra como iterar sobre as entradas de uma lista de classes de um elemento."
		},
		"❓                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMTokenList ForEach()",
			"body": [
				"// Executando uma função para cada token em um DOMTokenList",
				"let tokenList = document.body.classList;",
				"tokenList.forEach((token) => {",
				"  console.log('Token na lista de tokens:', token);",
				"});"
			],
			"description": "Executa uma função de callback para cada token na lista de tokens (DOMTokenList). Este exemplo demonstra como iterar sobre os tokens de uma lista de classes de um elemento usando forEach."
		},
		"❓                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMTokenList item()",
			"body": [
				"// Obtendo um token específico por índice de um DOMTokenList",
				"let tokenList = document.body.classList;",
				"let token = tokenList.item(0);",
				"console.log('Token no índice 0:', token);"
			],
			"description": "Obtém um token específico pelo índice na lista de tokens (DOMTokenList). Este exemplo demonstra como acessar um token específico em uma lista de classes de um elemento."
		},
		"❓                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMTokenList Keys()",
			"body": [
				"// Obtendo um iterador para as chaves de um DOMTokenList",
				"let tokenList = document.body.classList;",
				"let keys = tokenList.keys();",
				"for (let key of keys) {",
				"  console.log('Chave na lista de tokens:', key);",
				"}"
			],
			"description": "Obtém um iterador para as chaves na lista de tokens (DOMTokenList). Este exemplo demonstra como iterar sobre as chaves de uma lista de classes de um elemento."
		},
		"❓                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMTokenList Remove()",
			"body": [
				"// Removendo um ou mais tokens de um DOMTokenList",
				"let tokenList = document.body.classList;",
				"tokenList.remove('old-class');",
				"console.log('Tokens após remover:', tokenList);"
			],
			"description": "Remove um ou mais tokens da lista de tokens (DOMTokenList). Este exemplo demonstra como remover uma classe existente da lista de classes de um elemento."
		},
		"❓                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMTokenList Replace()",
			"body": [
				"// Substituindo um token por outro em um DOMTokenList",
				"let tokenList = document.body.classList;",
				"tokenList.replace('old-class', 'new-class');",
				"console.log('Tokens após substituição:', tokenList);"
			],
			"description": "Substitui um token por outro na lista de tokens (DOMTokenList). Este exemplo demonstra como substituir uma classe existente por uma nova na lista de classes de um elemento."
		},
		"❓                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMTokenList Supports()",
			"body": [
				"// Verificando se um token é suportado em um DOMTokenList",
				"let tokenList = document.body.classList;",
				"let supports = tokenList.supports('new-class');",
				"console.log('A classe é suportada:', supports);"
			],
			"description": "Verifica se um token é suportado na lista de tokens (DOMTokenList). Este exemplo demonstra como verificar se uma classe específica é suportada em um contexto que utiliza DOMTokenList."
		},
		"❓                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMTokenList Toggle()",
			"body": [
				"// Alternando a presença de um token em um DOMTokenList",
				"let tokenList = document.body.classList;",
				"let toggled = tokenList.toggle('toggle-class');",
				"console.log('Token alternado:', toggled);"
			],
			"description": "Alterna a presença de um token na lista de tokens (DOMTokenList). Este exemplo demonstra como alternar a presença de uma classe em um elemento."
		},
		"❓                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMTokenList ToString()",
			"body": [
				"// Convertendo um DOMTokenList para string",
				"let tokenList = document.body.classList;",
				"let stringRepresentation = tokenList.toString();",
				"console.log('Representação em string da lista de tokens:', stringRepresentation);"
			],
			"description": "Converte a lista de tokens (DOMTokenList) para uma string. Este exemplo demonstra como obter uma representação em string das classes de um elemento."
		},
		"❓                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 DOMTokenList Values()",
			"body": [
				"// Obtendo um iterador para os valores de um DOMTokenList",
				"let tokenList = document.body.classList;",
				"let values = tokenList.values();",
				"for (let value of values) {",
				"  console.log('Valor na lista de tokens:', value);",
				"}"
			],
			"description": "Obtém um iterador para os valores na lista de tokens (DOMTokenList). Este exemplo demonstra como iterar sobre os valores de uma lista de classes de um elemento."
		},
		"❓                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaAtomic",
			"body": [
				"element.setAttribute('aria-atomic', 'true');",
				"/*",
				"    O atributo aria-atomic é usado para indicar se as tecnologias assistivas irão apresentar",
				"    todo, ou apenas partes, da região alterada com base nas notificações de mudanças. Quando configurado",
				"    como 'true', todo o conteúdo do elemento, incluindo sua subárvore, será apresentado ao usuário.",
				"    Quando configurado como 'false', apenas a região alterada é apresentada. Isso é particularmente útil",
				"    em regiões dinâmicas onde atualizações de conteúdo são frequentes. Por exemplo, em uma região de alertas",
				"    ao vivo, definir aria-atomic como 'true' garante que os usuários sejam notificados de toda a mensagem de alerta.",
				"*/"
			],
			"description": "Define o atributo aria-atomic, indicando o nível de importância das mudanças em uma região dinâmica para tecnologias assistivas."
		},
		"❓                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaAutoComplete",
			"body": [
				"element.setAttribute('aria-autocomplete', 'list');",
				"/*",
				"    O atributo aria-autocomplete é usado para indicar se sugestões de conclusão de entrada do usuário",
				"    estão sendo fornecidas. Pode ser configurado como 'inline', 'list', 'both' ou 'none'. Quando configurado",
				"    como 'list', as sugestões serão apresentadas em uma lista, ajudando os usuários a concluir suas entradas",
				"    de forma mais eficiente. Este atributo é comum em campos de busca, onde os usuários recebem sugestões",
				"    de preenchimento automático à medida que digitam.",
				"*/"
			],
			"description": "Define o atributo aria-autocomplete, especificando se as sugestões de conclusão de entrada estão disponíveis e como elas são apresentadas ao usuário."
		},
		"❓                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaBrailleLabel",
			"body": [
				"element.setAttribute('aria-braillelabel', 'exemplo');",
				"/*",
				"    O atributo aria-braillelabel fornece um rótulo especificamente direcionado para usuários de displays",
				"    Braille. Este rótulo pode ser usado para fornecer informações adicionais que podem não ser visualmente aparentes.",
				"    Por exemplo, um ícone visual de uma lixeira pode ter um rótulo Braille descrevendo sua função como 'Excluir arquivo'.",
				"*/"
			],
			"description": "Define o atributo aria-braillelabel, fornecendo um rótulo especificamente direcionado para usuários de displays Braille."
		},
		"❓                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaBrailleRoleDescription",
			"body": [
				"element.setAttribute('aria-brailleroleDescription', 'exemplo');",
				"/*",
				"    O atributo aria-brailleroleDescription fornece uma descrição do papel de um elemento especificamente",
				"    para usuários que dependem de displays Braille. Isso pode ajudar a esclarecer o propósito do elemento.",
				"    Por exemplo, uma tabela pode ter uma descrição Braille que explique como ela está estruturada.",
				"*/"
			],
			"description": "Define o atributo aria-brailleroleDescription, fornecendo uma descrição do papel de um elemento para usuários de displays Braille."
		},
		"❓                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaBusy",
			"body": [
				"element.setAttribute('aria-busy', 'true');",
				"/*",
				"    O atributo aria-busy indica se um elemento está atualmente sendo atualizado. Quando configurado como 'true',",
				"    as tecnologias assistivas informam aos usuários que o elemento está ocupado e que eles podem precisar esperar",
				"    antes de interagir com ele. Por exemplo, em um aplicativo de carregamento de arquivos, aria-busy pode ser usado",
				"    para sinalizar que o processo de upload está em andamento.",
				"*/"
			],
			"description": "Define o atributo aria-busy, indicando se um elemento está atualmente sendo atualizado e informando aos usuários para esperar antes de interagir com ele."
		},
		"❓                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaChecked",
			"body": [
				"element.setAttribute('aria-checked', 'true');",
				"/*",
				"    O atributo aria-checked indica o estado 'marcado' atual de caixas de seleção, botões de rádio e outros widgets.",
				"    Pode ser configurado como 'true', 'false' ou 'mixed'. Este atributo ajuda as tecnologias assistivas a transmitir",
				"    o estado dos controles interativos. Por exemplo, em uma lista de tarefas, aria-checked pode ser usado para",
				"    indicar que uma tarefa foi concluída.",
				"*/"
			],
			"description": "Define o atributo aria-checked, indicando o estado 'marcado' atual de caixas de seleção, botões de rádio e outros widgets."
		},
		"❓                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaColCount",
			"body": [
				"element.setAttribute('aria-colcount', '4');",
				"/*",
				"    O atributo aria-colcount é usado para definir o número total de colunas em uma grade ou tabela. Isso ajuda as tecnologias assistivas",
				"    a entenderem a estrutura da tabela e fornecerem informações precisas aos usuários sobre a navegação e a posição dos dados.",
				"*/"
			],
			"description": "Define o atributo aria-colcount, indicando o número total de colunas em uma grade ou tabela."
		},
		"❓                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaColIndex",
			"body": [
				"element.setAttribute('aria-colindex', '2');",
				"/*",
				"    O atributo aria-colindex é usado para indicar a posição da coluna atual dentro de uma grade ou tabela.",
				"    Isso é particularmente útil em interfaces de usuário complexas, onde a navegação precisa ser clara e precisa.",
				"*/"
			],
			"description": "Define o atributo aria-colindex, indicando a posição da coluna atual dentro de uma grade ou tabela."
		},
		"❓                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaColIndexText",
			"body": [
				"element.setAttribute('aria-colindextext', 'Coluna 2');",
				"/*",
				"    O atributo aria-colindextext fornece um rótulo textual para a posição da coluna atual dentro de uma grade ou tabela.",
				"    Isso pode melhorar a acessibilidade ao fornecer uma descrição mais clara da posição da coluna.",
				"*/"
			],
			"description": "Define o atributo aria-colindextext, fornecendo um rótulo textual para a posição da coluna atual dentro de uma grade ou tabela."
		},
		"❓                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaColSpan",
			"body": [
				"element.setAttribute('aria-colspan', '2');",
				"/*",
				"    O atributo aria-colspan é usado para indicar quantas colunas uma célula em uma tabela ou grade abrange.",
				"    Isso ajuda as tecnologias assistivas a entenderem a estrutura da tabela e fornecerem informações precisas aos usuários.",
				"*/"
			],
			"description": "Define o atributo aria-colspan, indicando quantas colunas uma célula em uma tabela ou grade abrange."
		},
		"❓                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaCurrent",
			"body": [
				"element.setAttribute('aria-current', 'true');",
				"/*",
				"    O atributo aria-current é usado para indicar o item atual dentro de um conjunto ou a posição atual",
				"    dentro de um componente. Isso é particularmente útil em elementos de navegação, como menus ou carrosséis,",
				"    onde é necessário destacar o item atualmente selecionado para os usuários.",
				"*/"
			],
			"description": "Define o atributo aria-current, indicando o item atual dentro de um conjunto ou a posição atual dentro de um componente."
		},
		"❓                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaDescription",
			"body": [
				"element.setAttribute('aria-description', 'Descrição do elemento');",
				"/*",
				"    O atributo aria-description fornece uma descrição adicional para o elemento que pode ser lida por tecnologias assistivas.",
				"    Esta descrição pode oferecer mais contexto ou detalhes sobre a função ou o conteúdo do elemento que não são imediatamente aparentes.",
				"*/"
			],
			"description": "Define o atributo aria-description, fornecendo uma descrição adicional para o elemento que pode ser lida por tecnologias assistivas."
		},
		"❓                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaDisabled",
			"body": [
				"element.setAttribute('aria-disabled', 'true');",
				"/*",
				"    O atributo aria-disabled é usado para indicar que um elemento está desativado e, portanto, não pode ser",
				"    interagido. Isso ajuda as tecnologias assistivas a comunicar aos usuários que o elemento não está disponível para",
				"    interação, mesmo que ainda seja visível na interface.",
				"*/"
			],
			"description": "Define o atributo aria-disabled, indicando que um elemento está desativado e não pode ser interagido."
		},
		"❓                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaExpanded",
			"body": [
				"element.setAttribute('aria-expanded', 'true');",
				"/*",
				"    O atributo aria-expanded é usado para indicar se um elemento, como um painel de detalhes ou um menu, está",
				"    atualmente expandido ou contraído. Quando configurado como 'true', o conteúdo do elemento é exibido; quando",
				"    configurado como 'false', o conteúdo está oculto.",
				"*/"
			],
			"description": "Define o atributo aria-expanded, indicando se um elemento está atualmente expandido ou contraído."
		},
		"❓                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaHasPopup",
			"body": [
				"element.setAttribute('aria-haspopup', 'dialog');",
				"/*",
				"    O atributo aria-haspopup é usado para indicar que um elemento tem um popup associado, como um menu, lista",
				"    suspensa ou diálogo. Isso ajuda as tecnologias assistivas a preparar os usuários para a interação com o popup.",
				"*/"
			],
			"description": "Define o atributo aria-haspopup, indicando que um elemento tem um popup associado, como um menu, lista suspensa ou diálogo."
		},
		"❓                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaHidden",
			"body": [
				"element.setAttribute('aria-hidden', 'true');",
				"/*",
				"    O atributo aria-hidden é usado para indicar se um elemento deve ser ignorado pelas tecnologias assistivas.",
				"    Quando configurado como 'true', o elemento é considerado invisível para leitores de tela e outras tecnologias",
				"    assistivas, embora permaneça visível visualmente.",
				"*/"
			],
			"description": "Define o atributo aria-hidden, indicando se um elemento deve ser ignorado pelas tecnologias assistivas."
		},
		"❓                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaKeyShortcuts",
			"body": [
				"element.setAttribute('aria-keyshortcuts', 'Ctrl+S');",
				"/*",
				"    O atributo aria-keyshortcuts é usado para fornecer uma lista de atalhos de teclado associados a um elemento.",
				"    Isso ajuda os usuários de tecnologias assistivas a conhecerem os atalhos disponíveis para interagir com o elemento.",
				"*/"
			],
			"description": "Define o atributo aria-keyshortcuts, fornecendo uma lista de atalhos de teclado associados a um elemento."
		},
		"❓                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaLabel",
			"body": [
				"element.setAttribute('aria-label', 'Rótulo do elemento');",
				"/*",
				"    O atributo aria-label é usado para fornecer um rótulo acessível a um elemento que pode ser lido por tecnologias assistivas.",
				"    Este rótulo substitui qualquer texto visível e oferece uma descrição clara e concisa da função do elemento.",
				"*/"
			],
			"description": "Define o atributo aria-label, fornecendo um rótulo acessível a um elemento que pode ser lido por tecnologias assistivas."
		},
		"❓                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaLevel",
			"body": [
				"element.setAttribute('aria-level', '1');",
				"/*",
				"    O atributo aria-level é usado para definir o nível hierárquico de um elemento dentro de uma estrutura,",
				"    como uma árvore ou lista. Isso ajuda as tecnologias assistivas a transmitir a profundidade e a relação do",
				"    elemento com outros elementos na hierarquia.",
				"*/"
			],
			"description": "Define o atributo aria-level, indicando o nível hierárquico de um elemento dentro de uma estrutura."
		},
		"❓                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaLive",
			"body": [
				"element.setAttribute('aria-live', 'polite');",
				"/*",
				"    O atributo aria-live é usado para indicar o grau de prioridade com que as mudanças em uma região dinâmica",
				"    devem ser apresentadas aos usuários por tecnologias assistivas. Pode ser configurado como 'off', 'polite' ou 'assertive'.",
				"    Isso é útil em regiões de conteúdo ao vivo, como notificações ou mensagens de status.",
				"*/"
			],
			"description": "Define o atributo aria-live, indicando o grau de prioridade com que as mudanças em uma região dinâmica devem ser apresentadas aos usuários."
		},
		"❓                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaModal",
			"body": [
				"element.setAttribute('aria-modal', 'true');",
				"/*",
				"    O atributo aria-modal é usado para indicar que um elemento apresenta um modo modal onde o foco permanece",
				"    contido até que o modo seja encerrado. Isso é comum em caixas de diálogo modais que exigem a interação do usuário",
				"    antes de retornar ao conteúdo principal.",
				"*/"
			],
			"description": "Define o atributo aria-modal, indicando que um elemento apresenta um modo modal onde o foco permanece contido até que o modo seja encerrado."
		},
		"❓                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaMultiLine",
			"body": [
				"element.setAttribute('aria-multiline', 'true');",
				"/*",
				"    O atributo aria-multiline é usado para indicar que um campo de entrada de texto pode conter várias linhas de texto.",
				"    Isso ajuda as tecnologias assistivas a prepararem os usuários para a entrada de texto multilinha, como em caixas de texto.",
				"*/"
			],
			"description": "Define o atributo aria-multiline, indicando que um campo de entrada de texto pode conter várias linhas de texto."
		},
		"❓                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaMultiSelectable",
			"body": [
				"element.setAttribute('aria-multiselectable', 'true');",
				"/*",
				"    O atributo aria-multiselectable é usado para indicar que múltiplos itens em uma lista ou grade podem ser",
				"    selecionados ao mesmo tempo. Isso é útil em interfaces onde a seleção múltipla de itens é permitida e esperada.",
				"*/"
			],
			"description": "Define o atributo aria-multiselectable, indicando que múltiplos itens em uma lista ou grade podem ser selecionados ao mesmo tempo."
		},
		"❓                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaOrientation",
			"body": [
				"element.setAttribute('aria-orientation', 'horizontal');",
				"/*",
				"    O atributo aria-orientation é usado para indicar a orientação de um elemento, como uma lista ou barra de rolagem.",
				"    Pode ser configurado como 'horizontal' ou 'vertical'. Isso ajuda as tecnologias assistivas a comunicarem aos usuários",
				"    como os itens dentro do elemento estão organizados.",
				"*/"
			],
			"description": "Define o atributo aria-orientation, indicando a orientação de um elemento, como uma lista ou barra de rolagem."
		},
		"❓                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaPlaceholder",
			"body": [
				"element.setAttribute('aria-placeholder', 'Digite aqui...');",
				"/*",
				"    O atributo aria-placeholder é usado para definir uma sugestão inicial ou um espaço reservado em um campo de entrada.",
				"    Este atributo é especialmente útil para fornecer dicas de formato ou exemplos do que deve ser inserido no campo.",
				"*/"
			],
			"description": "Define o atributo aria-placeholder, fornecendo uma sugestão inicial ou espaço reservado em um campo de entrada."
		},
		"❓                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaPosInSet",
			"body": [
				"element.setAttribute('aria-posinset', '2');",
				"/*",
				"    O atributo aria-posinset é usado para indicar a posição de um item dentro de um conjunto ou lista.",
				"    Isso ajuda as tecnologias assistivas a informar aos usuários onde o item está localizado dentro da sequência.",
				"*/"
			],
			"description": "Define o atributo aria-posinset, indicando a posição de um item dentro de um conjunto ou lista."
		},
		"❓                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaPressed",
			"body": [
				"element.setAttribute('aria-pressed', 'true');",
				"/*",
				"    O atributo aria-pressed é usado para indicar o estado pressionado de um botão, seja ele de alternância ou não.",
				"    Isso é útil para botões que mudam de estado quando pressionados, como botões de play/pause ou mute/unmute.",
				"*/"
			],
			"description": "Define o atributo aria-pressed, indicando o estado pressionado de um botão."
		},
		"❓                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaReadOnly",
			"body": [
				"element.setAttribute('aria-readonly', 'true');",
				"/*",
				"    O atributo aria-readonly é usado para indicar que um elemento, como um campo de entrada, é somente leitura.",
				"    Isso ajuda as tecnologias assistivas a informar aos usuários que o conteúdo do elemento não pode ser alterado.",
				"*/"
			],
			"description": "Define o atributo aria-readonly, indicando que um elemento é somente leitura."
		},
		"⚠️                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaRelevant",
			"body": [
				"element.setAttribute('aria-relevant', 'additions');",
				"/*",
				"    O atributo aria-relevant é usado para definir quais tipos de mudanças em uma região dinâmica devem ser monitorados",
				"    pelas tecnologias assistivas. Pode incluir valores como 'additions', 'removals', 'text', entre outros.",
				"*/"
			],
			"description": "Define o atributo aria-relevant, especificando quais tipos de mudanças em uma região dinâmica devem ser monitorados."
		},
		"❓                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaRequired",
			"body": [
				"element.setAttribute('aria-required', 'true');",
				"/*",
				"    O atributo aria-required é usado para indicar que um campo de entrada é obrigatório.",
				"    Isso ajuda as tecnologias assistivas a informar aos usuários que o preenchimento do campo é necessário antes de enviar um formulário.",
				"*/"
			],
			"description": "Define o atributo aria-required, indicando que um campo de entrada é obrigatório."
		},
		"❓                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaRoleDescription",
			"body": [
				"element.setAttribute('aria-roledescription', 'Botão');",
				"/*",
				"    O atributo aria-roledescription é usado para fornecer uma descrição personalizada do papel de um elemento.",
				"    Isso pode ajudar a esclarecer a função do elemento quando a descrição padrão do papel não for suficientemente clara.",
				"*/"
			],
			"description": "Define o atributo aria-roledescription, fornecendo uma descrição personalizada do papel de um elemento."
		},
		"❓                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaRowCount",
			"body": [
				"element.setAttribute('aria-rowcount', '10');",
				"/*",
				"    O atributo aria-rowcount é usado para definir o número total de linhas em uma tabela ou grade.",
				"    Isso ajuda as tecnologias assistivas a fornecerem informações precisas aos usuários sobre a navegação e a posição dos dados.",
				"*/"
			],
			"description": "Define o atributo aria-rowcount, indicando o número total de linhas em uma tabela ou grade."
		},
		"❓                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaRowIndex",
			"body": [
				"element.setAttribute('aria-rowindex', '3');",
				"/*",
				"    O atributo aria-rowindex é usado para indicar a posição da linha atual dentro de uma tabela ou grade.",
				"    Isso é particularmente útil em interfaces de usuário complexas, onde a navegação precisa ser clara e precisa.",
				"*/"
			],
			"description": "Define o atributo aria-rowindex, indicando a posição da linha atual dentro de uma tabela ou grade."
		},
		"❓                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaRowIndexText",
			"body": [
				"element.setAttribute('aria-rowindextext', 'Linha 3');",
				"/*",
				"    O atributo aria-rowindextext fornece um rótulo textual para a posição da linha atual dentro de uma tabela ou grade.",
				"    Isso pode melhorar a acessibilidade ao fornecer uma descrição mais clara da posição da linha.",
				"*/"
			],
			"description": "Define o atributo aria-rowindextext, fornecendo um rótulo textual para a posição da linha atual dentro de uma tabela ou grade."
		},
		"❓                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaRowSpan",
			"body": [
				"element.setAttribute('aria-rowspan', '2');",
				"/*",
				"    O atributo aria-rowspan é usado para indicar quantas linhas uma célula em uma tabela ou grade abrange.",
				"    Isso ajuda as tecnologias assistivas a entenderem a estrutura da tabela e fornecerem informações precisas aos usuários.",
				"*/"
			],
			"description": "Define o atributo aria-rowspan, indicando quantas linhas uma célula em uma tabela ou grade abrange."
		},
		"❓                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaSelected",
			"body": [
				"element.setAttribute('aria-selected', 'true');",
				"/*",
				"    O atributo aria-selected é usado para indicar se um item em uma lista ou grade está atualmente selecionado.",
				"    Isso ajuda as tecnologias assistivas a informarem aos usuários quais itens estão selecionados.",
				"*/"
			],
			"description": "Define o atributo aria-selected, indicando se um item em uma lista ou grade está atualmente selecionado."
		},
		"❓                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaSetSize",
			"body": [
				"element.setAttribute('aria-setsize', '5');",
				"/*",
				"    O atributo aria-setsize é usado para definir o número total de itens em um conjunto ou lista.",
				"    Isso ajuda as tecnologias assistivas a fornecerem informações precisas aos usuários sobre a extensão do conjunto.",
				"*/"
			],
			"description": "Define o atributo aria-setsize, indicando o número total de itens em um conjunto ou lista."
		},
		"❓                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaSort",
			"body": [
				"element.setAttribute('aria-sort', 'ascending');",
				"/*",
				"    O atributo aria-sort é usado para indicar a ordem de classificação dos itens em uma tabela ou grade.",
				"    Pode ser configurado como 'ascending', 'descending', 'none' ou 'other'. Isso ajuda as tecnologias assistivas a informarem aos usuários",
				"    como os dados estão classificados.",
				"*/"
			],
			"description": "Define o atributo aria-sort, indicando a ordem de classificação dos itens em uma tabela ou grade."
		},
		"❓                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaValueMax",
			"body": [
				"element.setAttribute('aria-valuemax', '100');",
				"/*",
				"    O atributo aria-valuemax é usado para definir o valor máximo permitido para um controle de entrada, como um controle deslizante.",
				"    Isso ajuda as tecnologias assistivas a informarem aos usuários o intervalo total dos valores permitidos.",
				"*/"
			],
			"description": "Define o atributo aria-valuemax, indicando o valor máximo permitido para um controle de entrada."
		},
		"❓                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaValueMin",
			"body": [
				"element.setAttribute('aria-valuemin', '0');",
				"/*",
				"    O atributo aria-valuemin é usado para definir o valor mínimo permitido para um controle de entrada, como um controle deslizante.",
				"    Isso ajuda as tecnologias assistivas a informarem aos usuários o intervalo total dos valores permitidos.",
				"*/"
			],
			"description": "Define o atributo aria-valuemin, indicando o valor mínimo permitido para um controle de entrada."
		},
		"❓                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaValueNow",
			"body": [
				"element.setAttribute('aria-valuenow', '50');",
				"/*",
				"    O atributo aria-valuenow é usado para definir o valor atual de um controle de entrada, como um controle deslizante.",
				"    Isso ajuda as tecnologias assistivas a informarem aos usuários o valor atual que está sendo ajustado.",
				"*/"
			],
			"description": "Define o atributo aria-valuenow, indicando o valor atual de um controle de entrada."
		},
		"❓                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element ariaValueText",
			"body": [
				"element.setAttribute('aria-valuetext', 'Meio');",
				"/*",
				"    O atributo aria-valuetext é usado para fornecer uma representação textual do valor atual de um controle de entrada.",
				"    Isso é útil quando o valor numérico não transmite informações suficientes ao usuário.",
				"*/"
			],
			"description": "Define o atributo aria-valuetext, fornecendo uma representação textual do valor atual de um controle de entrada."
		},
		"❓                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element assignedSlot",
			"body": [
				"let slot = element.assignedSlot;",
				"/*",
				"    A propriedade assignedSlot retorna o slot <slot> ao qual um elemento foi atribuído.",
				"    Isso é útil em componentes Web onde elementos podem ser organizados em diferentes slots.",
				"*/"
			],
			"description": "Obtém o slot <slot> ao qual um elemento foi atribuído."
		},
		"❓                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element attributes",
			"body": [
				"let attrs = element.attributes;",
				"/*",
				"    A propriedade attributes retorna uma coleção de todos os atributos de um elemento.",
				"    Isso permite o acesso e a manipulação dos atributos de um elemento em uma página web.",
				"*/"
			],
			"description": "Obtém uma coleção de todos os atributos de um elemento."
		},
		"❓                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element childElementCount",
			"body": [
				"let count = element.childElementCount;",
				"/*",
				"    A propriedade childElementCount retorna o número de elementos filhos de um elemento.",
				"    Isso é útil para determinar quantos elementos filhos um elemento específico possui.",
				"*/"
			],
			"description": "Obtém o número de elementos filhos de um elemento."
		},
		"❓                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element children",
			"body": [
				"let childNodes = element.children;",
				"/*",
				"    A propriedade children retorna uma coleção de todos os elementos filhos de um elemento.",
				"    Isso permite o acesso aos elementos filhos diretamente, ignorando nós de texto.",
				"*/"
			],
			"description": "Obtém uma coleção de todos os elementos filhos de um elemento."
		},
		"❓                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element classList",
			"body": [
				"element.classList.add('nova-classe');",
				"/*",
				"    A propriedade classList retorna uma coleção DOMTokenList dos nomes das classes do elemento.",
				"    Permite adicionar, remover ou alternar classes de um elemento.",
				"*/"
			],
			"description": "Manipula a lista de classes de um elemento, permitindo adicionar, remover ou alternar classes."
		},
		"❓                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element className",
			"body": [
				"element.className = 'minha-classe';",
				"/*",
				"    A propriedade className define ou retorna o valor do atributo class de um elemento.",
				"    Isso permite definir diretamente a classe de um elemento.",
				"*/"
			],
			"description": "Define ou retorna o valor do atributo class de um elemento."
		},
		"❓                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element clientHeight",
			"body": [
				"let height = element.clientHeight;",
				"/*",
				"    A propriedade clientHeight retorna a altura interna de um elemento, em pixels.",
				"    Inclui o padding, mas não inclui a barra de rolagem, bordas ou margens.",
				"*/"
			],
			"description": "Obtém a altura interna de um elemento, incluindo o padding, mas excluindo a barra de rolagem, bordas ou margens."
		},
		"❓                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element clientLeft",
			"body": [
				"let left = element.clientLeft;",
				"/*",
				"    A propriedade clientLeft retorna a largura da borda esquerda de um elemento, em pixels.",
				"    Isso é útil para obter a distância entre a borda esquerda do conteúdo e a borda esquerda do padding.",
				"*/"
			],
			"description": "Obtém a largura da borda esquerda de um elemento, em pixels."
		},
		"❓                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element clientTop",
			"body": [
				"let top = element.clientTop;",
				"/*",
				"    A propriedade clientTop retorna a largura da borda superior de um elemento, em pixels.",
				"    Isso é útil para obter a distância entre a borda superior do conteúdo e a borda superior do padding.",
				"*/"
			],
			"description": "Obtém a largura da borda superior de um elemento, em pixels."
		},
		"❓                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element clientWidth",
			"body": [
				"let width = element.clientWidth;",
				"/*",
				"    A propriedade clientWidth retorna a largura interna de um elemento, em pixels.",
				"    Inclui o padding, mas não inclui a barra de rolagem, bordas ou margens.",
				"*/"
			],
			"description": "Obtém a largura interna de um elemento, incluindo o padding, mas excluindo a barra de rolagem, bordas ou margens."
		},
		"❓                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element currentCSSZoom",
			"body": [
				"let zoom = element.currentCSSZoom;",
				"/*",
				"    A propriedade currentCSSZoom retorna o nível de zoom CSS atual aplicado ao elemento.",
				"    Isso é útil para determinar se um elemento está sendo exibido com zoom.",
				"*/"
			],
			"description": "Obtém o nível de zoom CSS atual aplicado ao elemento."
		},
		"⚠️                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element elementTiming",
			"body": [
				"element.elementTiming = 'timing-marca';",
				"/*",
				"    A propriedade elementTiming permite definir ou obter o valor do atributo de marcação de tempo do elemento.",
				"    Isso é usado para fins de desempenho e medição.",
				"*/"
			],
			"description": "Define ou obtém o valor do atributo de marcação de tempo do elemento para fins de desempenho e medição."
		},
		"❓                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element firstElementChild",
			"body": [
				"let firstChild = element.firstElementChild;",
				"/*",
				"    A propriedade firstElementChild retorna o primeiro elemento filho do elemento.",
				"    Isso exclui nós de texto e outros nós não elementares.",
				"*/"
			],
			"description": "Obtém o primeiro elemento filho do elemento, excluindo nós de texto e outros nós não elementares."
		},
		"❓                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element id",
			"body": [
				"element.id = 'meuElemento';",
				"/*",
				"    A propriedade id define ou retorna o valor do atributo id de um elemento.",
				"    Isso é útil para identificar de maneira única um elemento dentro do documento.",
				"*/"
			],
			"description": "Define ou retorna o valor do atributo id de um elemento."
		},
		"❓                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element innerHTML",
			"body": [
				"element.innerHTML = '<p>Conteúdo HTML</p>';",
				"/*",
				"    A propriedade innerHTML define ou retorna o conteúdo HTML de um elemento.",
				"    Isso permite inserir ou modificar o conteúdo HTML de um elemento diretamente.",
				"*/"
			],
			"description": "Define ou retorna o conteúdo HTML de um elemento."
		},
		"❓                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element lastElementChild",
			"body": [
				"let lastChild = element.lastElementChild;",
				"/*",
				"    A propriedade lastElementChild retorna o último elemento filho do elemento.",
				"    Isso exclui nós de texto e outros nós não elementares.",
				"*/"
			],
			"description": "Obtém o último elemento filho do elemento, excluindo nós de texto e outros nós não elementares."
		},
		"❓                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element localName",
			"body": [
				"let name = element.localName;",
				"/*",
				"    A propriedade localName retorna o nome local (sem o prefixo do namespace) do elemento.",
				"    Isso é útil para obter o nome de um elemento sem considerar seu namespace.",
				"*/"
			],
			"description": "Obtém o nome local (sem o prefixo do namespace) do elemento."
		},
		"❓                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element namespaceURI",
			"body": [
				"let namespace = element.namespaceURI;",
				"/*",
				"    A propriedade namespaceURI retorna o URI do namespace do elemento.",
				"    Isso é útil para identificar o namespace ao qual o elemento pertence.",
				"*/"
			],
			"description": "Obtém o URI do namespace do elemento."
		},
		"❓                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element nextElementSibling",
			"body": [
				"let nextSibling = element.nextElementSibling;",
				"/*",
				"    A propriedade nextElementSibling retorna o próximo elemento irmão do elemento.",
				"    Isso exclui nós de texto e outros nós não elementares.",
				"*/"
			],
			"description": "Obtém o próximo elemento irmão do elemento, excluindo nós de texto e outros nós não elementares."
		},
		"❓                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element outerHTML",
			"body": [
				"element.outerHTML = '<div>Novo conteúdo HTML</div>';",
				"/*",
				"    A propriedade outerHTML define ou retorna o HTML completo do elemento, incluindo o próprio elemento.",
				"    Isso permite substituir completamente um elemento e seu conteúdo.",
				"*/"
			],
			"description": "Define ou retorna o HTML completo do elemento, incluindo o próprio elemento."
		},
		"❓                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element part",
			"body": [
				"element.part.add('meu-part');",
				"/*",
				"    A propriedade part é usada para associar um elemento a uma parte específica de um shadow tree.",
				"    Isso é útil para personalizar a aparência de um elemento em Shadow DOM.",
				"*/"
			],
			"description": "Associa um elemento a uma parte específica de um shadow tree para personalização de aparência em Shadow DOM."
		},
		"❓                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element prefix",
			"body": [
				"let prefix = element.prefix;",
				"/*",
				"    A propriedade prefix retorna o prefixo de namespace do elemento, se houver.",
				"    Isso é útil para obter o prefixo de namespace associado ao elemento.",
				"*/"
			],
			"description": "Obtém o prefixo de namespace do elemento, se houver."
		},
		"❓                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element previousElementSibling",
			"body": [
				"let prevSibling = element.previousElementSibling;",
				"/*",
				"    A propriedade previousElementSibling retorna o elemento irmão anterior do elemento.",
				"    Isso exclui nós de texto e outros nós não elementares.",
				"*/"
			],
			"description": "Obtém o elemento irmão anterior do elemento, excluindo nós de texto e outros nós não elementares."
		},
		"❓                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element scrollHeight",
			"body": [
				"let height = element.scrollHeight;",
				"/*",
				"    A propriedade scrollHeight retorna a altura total do elemento, incluindo o conteúdo não visível devido à rolagem.",
				"    Isso é útil para determinar a altura total do conteúdo de um elemento com barra de rolagem.",
				"*/"
			],
			"description": "Obtém a altura total do elemento, incluindo o conteúdo não visível devido à rolagem."
		},
		"❓                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element scrollLeft",
			"body": [
				"element.scrollLeft = 100;",
				"/*",
				"    A propriedade scrollLeft define ou retorna o número de pixels que o conteúdo de um elemento foi rolado horizontalmente.",
				"    Isso é útil para controlar a posição de rolagem horizontal de um elemento.",
				"*/"
			],
			"description": "Define ou retorna o número de pixels que o conteúdo de um elemento foi rolado horizontalmente."
		},
		"⚠️                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element scrollLeftMax",
			"body": [
				"let maxScrollLeft = element.scrollLeftMax;",
				"/*",
				"    A propriedade scrollLeftMax retorna o valor máximo que o scrollLeft pode assumir.",
				"    Isso é útil para determinar a extensão máxima da rolagem horizontal em um elemento.",
				"*/"
			],
			"description": "Obtém o valor máximo que o scrollLeft pode assumir."
		},
		"❓                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element scrollTop",
			"body": [
				"element.scrollTop = 100;",
				"/*",
				"    A propriedade scrollTop define ou retorna o número de pixels que o conteúdo de um elemento foi rolado verticalmente.",
				"    Isso é útil para controlar a posição de rolagem vertical de um elemento.",
				"*/"
			],
			"description": "Define ou retorna o número de pixels que o conteúdo de um elemento foi rolado verticalmente."
		},
		"⚠️                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element scrollTopMax",
			"body": [
				"let maxScrollTop = element.scrollTopMax;",
				"/*",
				"    A propriedade scrollTopMax retorna o valor máximo que o scrollTop pode assumir.",
				"    Isso é útil para determinar a extensão máxima da rolagem vertical em um elemento.",
				"*/"
			],
			"description": "Obtém o valor máximo que o scrollTop pode assumir."
		},
		"❓                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element scrollWidth",
			"body": [
				"let width = element.scrollWidth;",
				"/*",
				"    A propriedade scrollWidth retorna a largura total do elemento, incluindo o conteúdo não visível devido à rolagem.",
				"    Isso é útil para determinar a largura total do conteúdo de um elemento com barra de rolagem.",
				"*/"
			],
			"description": "Obtém a largura total do elemento, incluindo o conteúdo não visível devido à rolagem."
		},
		"❓                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element shadowRoot",
			"body": [
				"let shadow = element.shadowRoot;",
				"/*",
				"    A propriedade shadowRoot retorna o objeto shadowRoot associado ao elemento.",
				"    Isso é útil para trabalhar com o Shadow DOM do elemento.",
				"*/"
			],
			"description": "Obtém o objeto shadowRoot associado ao elemento."
		},
		"❓                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element slot",
			"body": [
				"element.slot = 'minha-slot';",
				"/*",
				"    A propriedade slot define ou retorna o valor do atributo slot de um elemento.",
				"    Isso é útil para atribuir um elemento a um slot específico em um shadow tree.",
				"*/"
			],
			"description": "Define ou retorna o valor do atributo slot de um elemento."
		},
		"❓                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element tagName",
			"body": [
				"let tag = element.tagName;",
				"/*",
				"    A propriedade tagName retorna o nome da tag do elemento em letras maiúsculas.",
				"    Isso é útil para identificar o tipo de elemento, como 'DIV', 'SPAN', etc.",
				"*/"
			],
			"description": "Obtém o nome da tag do elemento em letras maiúsculas."
		},
		"❓                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element after",
			"body": [
				"element.after('novo conteúdo');",
				"/*",
				"    O método after() insere um conjunto de Node ou DOMString depois do elemento referenciado.",
				"    Isso é útil para adicionar conteúdo imediatamente após um elemento existente.",
				"*/"
			],
			"description": "Insere um conjunto de Node ou DOMString depois do elemento referenciado."
		},
		"❓                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element animate",
			"body": [
				"element.animate([{ opacity: 0 }, { opacity: 1 }], 1000);",
				"/*",
				"    O método animate() é usado para criar uma animação em um elemento.",
				"    Isso permite definir keyframes e opções para controlar a animação.",
				"*/"
			],
			"description": "Cria uma animação em um elemento, definindo keyframes e opções."
		},
		"❓                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element append",
			"body": [
				"element.append('novo conteúdo');",
				"/*",
				"    O método append() insere um conjunto de Node ou DOMString no final do elemento referenciado.",
				"    Isso é útil para adicionar conteúdo ao final de um elemento existente.",
				"*/"
			],
			"description": "Insere um conjunto de Node ou DOMString no final do elemento referenciado."
		},
		"❓                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element attachShadow",
			"body": [
				"let shadow = element.attachShadow({ mode: 'open' });",
				"/*",
				"    O método attachShadow() cria uma árvore de sombra para o elemento e retorna um ShadowRoot.",
				"    Isso é útil para encapsular o estilo e a marcação de um elemento.",
				"*/"
			],
			"description": "Cria uma árvore de sombra para o elemento e retorna um ShadowRoot."
		},
		"❓                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element before",
			"body": [
				"element.before('novo conteúdo');",
				"/*",
				"    O método before() insere um conjunto de Node ou DOMString antes do elemento referenciado.",
				"    Isso é útil para adicionar conteúdo imediatamente antes de um elemento existente.",
				"*/"
			],
			"description": "Insere um conjunto de Node ou DOMString antes do elemento referenciado."
		},
		"❓                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element checkVisibility",
			"body": [
				"let isVisible = element.checkVisibility();",
				"/*",
				"    O método checkVisibility() verifica se o elemento é visível na tela.",
				"    Isso é útil para determinar se um elemento está dentro da viewport e visível ao usuário.",
				"*/"
			],
			"description": "Verifica se o elemento é visível na tela."
		},
		"❓                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element closest",
			"body": [
				"let closestElement = element.closest('div');",
				"/*",
				"    O método closest() retorna o ancestral mais próximo do elemento atual que corresponde ao seletor fornecido.",
				"    Isso é útil para encontrar elementos ascendentes em uma árvore DOM.",
				"*/"
			],
			"description": "Retorna o ancestral mais próximo do elemento atual que corresponde ao seletor fornecido."
		},
		"❓                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element computedStyleMap",
			"body": [
				"let styleMap = element.computedStyleMap();",
				"/*",
				"    O método computedStyleMap() retorna um estilo computado para o elemento atual como um StylePropertyMapReadOnly.",
				"    Isso é útil para acessar as propriedades de estilo computadas de um elemento.",
				"*/"
			],
			"description": "Retorna um estilo computado para o elemento atual como um StylePropertyMapReadOnly."
		},
		"❓                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element getAnimations",
			"body": [
				"let animations = element.getAnimations();",
				"/*",
				"    O método getAnimations() retorna uma lista de animações que afetam o elemento.",
				"    Isso é útil para acessar e gerenciar animações em execução em um elemento.",
				"*/"
			],
			"description": "Retorna uma lista de animações que afetam o elemento."
		},
		"❓                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element getAttribute",
			"body": [
				"let attrValue = element.getAttribute('id');",
				"/*",
				"    O método getAttribute() retorna o valor de um atributo especificado em um elemento.",
				"    Isso é útil para obter o valor de atributos HTML de um elemento.",
				"*/"
			],
			"description": "Retorna o valor de um atributo especificado em um elemento."
		},
		"❓                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element getAttributeNames",
			"body": [
				"let attrNames = element.getAttributeNames();",
				"/*",
				"    O método getAttributeNames() retorna uma lista de nomes de atributos presentes no elemento.",
				"    Isso é útil para listar todos os atributos definidos em um elemento.",
				"*/"
			],
			"description": "Retorna uma lista de nomes de atributos presentes no elemento."
		},
		"❓                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element getAttributeNode",
			"body": [
				"let attrNode = element.getAttributeNode('id');",
				"/*",
				"    O método getAttributeNode() retorna o nó de atributo especificado.",
				"    Isso é útil para obter informações detalhadas sobre um atributo específico.",
				"*/"
			],
			"description": "Retorna o nó de atributo especificado."
		},
		"❓                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element getAttributeNodeNS",
			"body": [
				"let attrNodeNS = element.getAttributeNodeNS('http://www.w3.org/1999/xhtml', 'id');",
				"/*",
				"    O método getAttributeNodeNS() retorna o nó de atributo especificado no namespace.",
				"    Isso é útil para obter informações detalhadas sobre um atributo específico em um namespace.",
				"*/"
			],
			"description": "Retorna o nó de atributo especificado no namespace."
		},
		"❓                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element getAttributeNS",
			"body": [
				"let attrValueNS = element.getAttributeNS('http://www.w3.org/1999/xhtml', 'id');",
				"/*",
				"    O método getAttributeNS() retorna o valor de um atributo especificado no namespace.",
				"    Isso é útil para obter o valor de atributos HTML de um elemento em um namespace.",
				"*/"
			],
			"description": "Retorna o valor de um atributo especificado no namespace."
		},
		"❓                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element getBoundingClientRect",
			"body": [
				"let rect = element.getBoundingClientRect();",
				"/*",
				"    O método getBoundingClientRect() retorna o tamanho e a posição de um elemento em relação à viewport.",
				"    Isso é útil para calcular a posição e dimensões de um elemento na tela.",
				"*/"
			],
			"description": "Retorna o tamanho e a posição de um elemento em relação à viewport."
		},
		"❓                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element getClientRects",
			"body": [
				"let rects = element.getClientRects();",
				"/*",
				"    O método getClientRects() retorna uma coleção de DOMRect objetos representando as caixas de um elemento.",
				"    Isso é útil para obter as dimensões de todas as caixas de um elemento na tela.",
				"*/"
			],
			"description": "Retorna uma coleção de DOMRect objetos representando as caixas de um elemento."
		},
		"❓                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element getElementsByClassName",
			"body": [
				"let elements = document.getElementsByClassName('minha-classe');",
				"/*",
				"    O método getElementsByClassName() retorna uma coleção de todos os elementos no documento com o nome da classe especificado.",
				"    Isso é útil para selecionar múltiplos elementos que compartilham a mesma classe.",
				"*/"
			],
			"description": "Retorna uma coleção de todos os elementos no documento com o nome da classe especificado."
		},
		"❓                                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element getElementsByTagName",
			"body": [
				"let elements = document.getElementsByTagName('div');",
				"/*",
				"    O método getElementsByTagName() retorna uma coleção de todos os elementos no documento com o nome da tag especificado.",
				"    Isso é útil para selecionar múltiplos elementos que compartilham a mesma tag.",
				"*/"
			],
			"description": "Retorna uma coleção de todos os elementos no documento com o nome da tag especificado."
		},
		"❓                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element getElementsByTagNameNS",
			"body": [
				"let elements = document.getElementsByTagNameNS('http://www.w3.org/1999/xhtml', 'div');",
				"/*",
				"    O método getElementsByTagNameNS() retorna uma coleção de todos os elementos no documento com o nome da tag especificado no namespace.",
				"    Isso é útil para selecionar múltiplos elementos que compartilham a mesma tag dentro de um namespace.",
				"*/"
			],
			"description": "Retorna uma coleção de todos os elementos no documento com o nome da tag especificado no namespace."
		},
		"❓                                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element getHTML",
			"body": [
				"let html = element.getHTML();",
				"/*",
				"    O método getHTML() retorna o conteúdo HTML de um elemento.",
				"    Isso é útil para obter o conteúdo HTML diretamente de um elemento.",
				"*/"
			],
			"description": "Retorna o conteúdo HTML de um elemento."
		},
		"❓                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element hasAttribute",
			"body": [
				"let hasAttr = element.hasAttribute('id');",
				"/*",
				"    O método hasAttribute() verifica se um elemento tem um atributo especificado.",
				"    Isso é útil para verificar a presença de um atributo em um elemento.",
				"*/"
			],
			"description": "Verifica se um elemento tem um atributo especificado."
		},
		"❓                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element hasAttributeNS",
			"body": [
				"let hasAttrNS = element.hasAttributeNS('http://www.w3.org/1999/xhtml', 'id');",
				"/*",
				"    O método hasAttributeNS() verifica se um elemento tem um atributo especificado no namespace.",
				"    Isso é útil para verificar a presença de um atributo em um elemento dentro de um namespace.",
				"*/"
			],
			"description": "Verifica se um elemento tem um atributo especificado no namespace."
		},
		"❓                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element hasAttributes",
			"body": [
				"let hasAttrs = element.hasAttributes();",
				"/*",
				"    O método hasAttributes() verifica se um elemento tem algum atributo.",
				"    Isso é útil para determinar se um elemento possui atributos definidos.",
				"*/"
			],
			"description": "Verifica se um elemento tem algum atributo."
		},
		"❓                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element hasPointerCapture",
			"body": [
				"let hasCapture = element.hasPointerCapture(pointerId);",
				"/*",
				"    O método hasPointerCapture() verifica se o elemento tem captura de ponteiro para o ponteiro especificado.",
				"    Isso é útil para determinar se um elemento está capturando eventos de ponteiro.",
				"*/"
			],
			"description": "Verifica se o elemento tem captura de ponteiro para o ponteiro especificado."
		},
		"❓                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element insertAdjacentElement",
			"body": [
				"element.insertAdjacentElement('beforebegin', novoElemento);",
				"/*",
				"    O método insertAdjacentElement() insere um elemento especificado em uma posição específica em relação ao elemento referenciado.",
				"    Isso é útil para inserir elementos diretamente no DOM em relação a um elemento existente.",
				"*/"
			],
			"description": "Insere um elemento especificado em uma posição específica em relação ao elemento referenciado."
		},
		"❓                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element insertAdjacentHTML",
			"body": [
				"element.insertAdjacentHTML('beforebegin', '<div>Novo conteúdo HTML</div>');",
				"/*",
				"    O método insertAdjacentHTML() insere o texto HTML especificado em uma posição específica em relação ao elemento referenciado.",
				"    Isso é útil para inserir conteúdo HTML diretamente no DOM.",
				"*/"
			],
			"description": "Insere o texto HTML especificado em uma posição específica em relação ao elemento referenciado."
		},
		"❓                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element insertAdjacentText",
			"body": [
				"element.insertAdjacentText('beforebegin', 'Novo texto');",
				"/*",
				"    O método insertAdjacentText() insere o texto especificado em uma posição específica em relação ao elemento referenciado.",
				"    Isso é útil para inserir texto diretamente no DOM.",
				"*/"
			],
			"description": "Insere o texto especificado em uma posição específica em relação ao elemento referenciado."
		},
		"❓                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element matches",
			"body": [
				"let isMatch = element.matches('.minha-classe');",
				"/*",
				"    O método matches() verifica se o elemento atual corresponde ao seletor CSS especificado.",
				"    Isso é útil para verificar se um elemento atende a um determinado critério de seleção.",
				"*/"
			],
			"description": "Verifica se o elemento atual corresponde ao seletor CSS especificado."
		},
		"❓                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element prepend",
			"body": [
				"element.prepend('novo conteúdo');",
				"/*",
				"    O método prepend() insere um conjunto de Node ou DOMString no início do elemento referenciado.",
				"    Isso é útil para adicionar conteúdo no início de um elemento existente.",
				"*/"
			],
			"description": "Insere um conjunto de Node ou DOMString no início do elemento referenciado."
		},
		"❓                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element querySelector",
			"body": [
				"let elemento = document.querySelector('div.minha-classe');",
				"/*",
				"    O método querySelector() retorna o primeiro elemento no documento que corresponde ao seletor CSS especificado.",
				"    Isso é útil para selecionar um único elemento com base em um seletor CSS.",
				"*/"
			],
			"description": "Retorna o primeiro elemento no documento que corresponde ao seletor CSS especificado."
		},
		"❓                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element querySelectorAll",
			"body": [
				"let elementos = document.querySelectorAll('div.minha-classe');",
				"/*",
				"    O método querySelectorAll() retorna uma NodeList de todos os elementos no documento que correspondem ao seletor CSS especificado.",
				"    Isso é útil para selecionar múltiplos elementos com base em um seletor CSS.",
				"*/"
			],
			"description": "Retorna uma NodeList de todos os elementos no documento que correspondem ao seletor CSS especificado."
		},
		"❓                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element releasePointerCapture",
			"body": [
				"element.releasePointerCapture(pointerId);",
				"/*",
				"    O método releasePointerCapture() libera a captura de ponteiro previamente estabelecida para o ponteiro especificado.",
				"    Isso é útil para interromper a captura de eventos de ponteiro por um elemento.",
				"*/"
			],
			"description": "Libera a captura de ponteiro previamente estabelecida para o ponteiro especificado."
		},
		"❓                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element remove",
			"body": [
				"element.remove();",
				"/*",
				"    O método remove() remove o elemento do DOM.",
				"    Isso é útil para excluir um elemento da árvore DOM.",
				"*/"
			],
			"description": "Remove o elemento do DOM."
		},
		"❓                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element removeAttribute",
			"body": [
				"element.removeAttribute('id');",
				"/*",
				"    O método removeAttribute() remove um atributo especificado do elemento.",
				"    Isso é útil para limpar atributos HTML de um elemento.",
				"*/"
			],
			"description": "Remove um atributo especificado do elemento."
		},
		"❓                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element removeAttributeNode",
			"body": [
				"let attr = element.getAttributeNode('id');",
				"element.removeAttributeNode(attr);",
				"/*",
				"    O método removeAttributeNode() remove um nó de atributo do elemento.",
				"    Isso é útil para remover nós de atributo específicos de um elemento.",
				"*/"
			],
			"description": "Remove um nó de atributo do elemento."
		},
		"❓                                                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element removeAttributeNS",
			"body": [
				"element.removeAttributeNS('http://www.w3.org/1999/xhtml', 'id');",
				"/*",
				"    O método removeAttributeNS() remove um atributo especificado do elemento no namespace.",
				"    Isso é útil para remover atributos específicos em um namespace.",
				"*/"
			],
			"description": "Remove um atributo especificado do elemento no namespace."
		},
		"❓                                                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element replaceChildren",
			"body": [
				"element.replaceChildren(novoElemento);",
				"/*",
				"    O método replaceChildren() substitui os filhos do elemento pelos novos nós especificados.",
				"    Isso é útil para substituir todo o conteúdo de um elemento.",
				"*/"
			],
			"description": "Substitui os filhos do elemento pelos novos nós especificados."
		},
		"❓                                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element replaceWith",
			"body": [
				"element.replaceWith('novo conteúdo');",
				"/*",
				"    O método replaceWith() substitui o elemento pelo novo conjunto de Node ou DOMString especificado.",
				"    Isso é útil para substituir um elemento existente por outro.",
				"*/"
			],
			"description": "Substitui o elemento pelo novo conjunto de Node ou DOMString especificado."
		},
		"❓                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element requestFullscreen",
			"body": [
				"element.requestFullscreen();",
				"/*",
				"    O método requestFullscreen() solicita que o elemento seja exibido em modo de tela cheia.",
				"    Isso é útil para exibir um elemento em tela cheia, como vídeos ou apresentações.",
				"*/"
			],
			"description": "Solicita que o elemento seja exibido em modo de tela cheia."
		},
		"❓                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element requestPointerLock",
			"body": [
				"element.requestPointerLock();",
				"/*",
				"    O método requestPointerLock() solicita a captura do ponteiro para o elemento.",
				"    Isso é útil para jogos e aplicativos onde o controle do ponteiro é necessário.",
				"*/"
			],
			"description": "Solicita a captura do ponteiro para o elemento."
		},
		"❓                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element scroll",
			"body": [
				"element.scroll(0, 100);",
				"/*",
				"    O método scroll() rola o conteúdo do elemento para as coordenadas especificadas.",
				"    Isso é útil para controlar a posição de rolagem de um elemento.",
				"*/"
			],
			"description": "Rola o conteúdo do elemento para as coordenadas especificadas."
		},
		"❓                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element scrollBy",
			"body": [
				"element.scrollBy(0, 100);",
				"/*",
				"    O método scrollBy() rola o conteúdo do elemento pela quantidade especificada de pixels.",
				"    Isso é útil para rolar o conteúdo de um elemento em incrementos.",
				"*/"
			],
			"description": "Rola o conteúdo do elemento pela quantidade especificada de pixels."
		},
		"❓                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element scrollIntoView",
			"body": [
				"element.scrollIntoView();",
				"/*",
				"    O método scrollIntoView() rola o elemento para que ele fique visível na viewport.",
				"    Isso é útil para garantir que um elemento esteja visível para o usuário.",
				"*/"
			],
			"description": "Rola o elemento para que ele fique visível na viewport."
		},
		"⚠️                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element scrollIntoViewIfNeeded",
			"body": [
				"element.scrollIntoViewIfNeeded();",
				"/*",
				"    O método scrollIntoViewIfNeeded() rola o elemento para a viewport se ele não estiver completamente visível.",
				"    Isso é útil para garantir que um elemento esteja visível apenas quando necessário.",
				"*/"
			],
			"description": "Rola o elemento para a viewport se ele não estiver completamente visível."
		},
		"❓                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element scrollTo",
			"body": [
				"element.scrollTo(0, 100);",
				"/*",
				"    O método scrollTo() rola o conteúdo do elemento para as coordenadas especificadas.",
				"    Isso é útil para definir a posição de rolagem de um elemento.",
				"*/"
			],
			"description": "Rola o conteúdo do elemento para as coordenadas especificadas."
		},
		"❓                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element setAttribute",
			"body": [
				"element.setAttribute('id', 'novo-id');",
				"/*",
				"    O método setAttribute() define o valor de um atributo especificado no elemento.",
				"    Isso é útil para atualizar ou definir atributos HTML de um elemento.",
				"*/"
			],
			"description": "Define o valor de um atributo especificado no elemento."
		},
		"❓                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element setAttributeNode",
			"body": [
				"let attr = document.createAttribute('id');",
				"attr.value = 'novo-id';",
				"element.setAttributeNode(attr);",
				"/*",
				"    O método setAttributeNode() adiciona um novo nó de atributo ao elemento.",
				"    Isso é útil para adicionar ou atualizar nós de atributo em um elemento.",
				"*/"
			],
			"description": "Adiciona um novo nó de atributo ao elemento."
		},
		"❓                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element setAttributeNodeNS",
			"body": [
				"let attrNS = document.createAttributeNS('http://www.w3.org/1999/xhtml', 'id');",
				"attrNS.value = 'novo-id';",
				"element.setAttributeNodeNS(attrNS);",
				"/*",
				"    O método setAttributeNodeNS() adiciona um novo nó de atributo ao elemento no namespace.",
				"    Isso é útil para adicionar ou atualizar nós de atributo em um elemento dentro de um namespace.",
				"*/"
			],
			"description": "Adiciona um novo nó de atributo ao elemento no namespace."
		},
		"❓                                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element setAttributeNS",
			"body": [
				"element.setAttributeNS('http://www.w3.org/1999/xhtml', 'id', 'novo-id');",
				"/*",
				"    O método setAttributeNS() adiciona um novo atributo ao elemento no namespace.",
				"    Isso é útil para definir atributos HTML de um elemento dentro de um namespace.",
				"*/"
			],
			"description": "Adiciona um novo atributo ao elemento no namespace."
		},
		"❓                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element setHTMLUnsafe",
			"body": [
				"element.setHTMLUnsafe('<div>Conteúdo não seguro</div>');",
				"/*",
				"    O método setHTMLUnsafe() define o HTML interno de um elemento sem realizar validação de segurança.",
				"    Isso é útil em casos específicos onde o conteúdo HTML deve ser inserido diretamente, mas deve ser usado com cuidado para evitar vulnerabilidades de segurança.",
				"*/"
			],
			"description": "Define o HTML interno de um elemento sem realizar validação de segurança."
		},
		"❓                                                                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element setPointerCapture",
			"body": [
				"element.setPointerCapture(pointerId);",
				"/*",
				"    O método setPointerCapture() captura eventos de ponteiro para o elemento especificado.",
				"    Isso é útil em aplicativos interativos que precisam garantir que todos os eventos de ponteiro sejam direcionados a um elemento específico.",
				"*/"
			],
			"description": "Captura eventos de ponteiro para o elemento especificado."
		},
		"❓                                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element toggleAttribute",
			"body": [
				"element.toggleAttribute('hidden');",
				"/*",
				"    O método toggleAttribute() alterna o estado de um atributo booleano no elemento.",
				"    Se o atributo estiver presente, ele será removido; se estiver ausente, ele será adicionado.",
				"*/"
			],
			"description": "Alterna o estado de um atributo booleano no elemento."
		},
		"Evento                                                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element afterscriptexecute",
			"body": [
				"element.addEventListener('afterscriptexecute', (event) => { console.log('Script executado'); });",
				"/*",
				"    O evento afterscriptexecute é disparado após a execução de um script.",
				"    Isso é útil para realizar ações após a execução de scripts em um documento.",
				"*/"
			],
			"description": "Dispara um evento após a execução de um script."
		},
		"Evento                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element animationcancel",
			"body": [
				"element.addEventListener('animationcancel', (event) => { console.log('Animação cancelada'); });",
				"/*",
				"    O evento animationcancel é disparado quando uma animação é cancelada.",
				"    Isso é útil para realizar ações quando uma animação é interrompida.",
				"*/"
			],
			"description": "Dispara um evento quando uma animação é cancelada."
		},
		"Evento                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element animationend",
			"body": [
				"element.addEventListener('animationend', (event) => { console.log('Animação concluída'); });",
				"/*",
				"    O evento animationend é disparado quando uma animação é concluída.",
				"    Isso é útil para realizar ações quando uma animação termina.",
				"*/"
			],
			"description": "Dispara um evento quando uma animação é concluída."
		},
		"Evento                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element animationiteration",
			"body": [
				"element.addEventListener('animationiteration', (event) => { console.log('Iteração da animação'); });",
				"/*",
				"    O evento animationiteration é disparado a cada iteração de uma animação.",
				"    Isso é útil para realizar ações em cada ciclo de uma animação.",
				"*/"
			],
			"description": "Dispara um evento a cada iteração de uma animação."
		},
		"Evento                                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element animationstart",
			"body": [
				"element.addEventListener('animationstart', (event) => { console.log('Animação iniciada'); });",
				"/*",
				"    O evento animationstart é disparado quando uma animação é iniciada.",
				"    Isso é útil para realizar ações quando uma animação começa.",
				"*/"
			],
			"description": "Dispara um evento quando uma animação é iniciada."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element auxclick",
			"body": [
				"element.addEventListener('auxclick', (event) => { console.log('Clique auxiliar'); });",
				"/*",
				"    O evento auxclick é disparado quando um botão auxiliar do mouse é clicado (botão do meio ou botão direito).",
				"    Isso é útil para detectar cliques auxiliares em um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando um botão auxiliar do mouse é clicado."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element beforeinput",
			"body": [
				"element.addEventListener('beforeinput', (event) => { console.log('Antes da entrada'); });",
				"/*",
				"    O evento beforeinput é disparado antes que um valor seja inserido em um elemento.",
				"    Isso é útil para interceptar e possivelmente modificar entradas do usuário.",
				"*/"
			],
			"description": "Dispara um evento antes que um valor seja inserido em um elemento."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element beforematch",
			"body": [
				"element.addEventListener('beforematch', (event) => { console.log('Antes da correspondência'); });",
				"/*",
				"    O evento beforematch é disparado antes que um trecho de texto seja destacado como resultado de uma busca.",
				"    Isso é útil para realizar ações antes que um elemento corresponda a um critério de pesquisa.",
				"*/"
			],
			"description": "Dispara um evento antes que um trecho de texto seja destacado como resultado de uma busca."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element beforescriptexecute",
			"body": [
				"element.addEventListener('beforescriptexecute', (event) => { console.log('Antes da execução do script'); });",
				"/*",
				"    O evento beforescriptexecute é disparado antes da execução de um script.",
				"    Isso é útil para realizar ações antes que scripts sejam executados em um documento.",
				"*/"
			],
			"description": "Dispara um evento antes da execução de um script."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element beforexrselect",
			"body": [
				"element.addEventListener('beforexrselect', (event) => { console.log('Antes da seleção XR'); });",
				"/*",
				"    O evento beforexrselect é disparado antes de um conteúdo XR ser selecionado.",
				"    Isso é útil para realizar ações antes que um conteúdo de realidade estendida (XR) seja interagido.",
				"*/"
			],
			"description": "Dispara um evento antes de um conteúdo XR ser selecionado."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element blur",
			"body": [
				"element.addEventListener('blur', (event) => { console.log('Elemento desfocado'); });",
				"/*",
				"    O evento blur é disparado quando um elemento perde o foco.",
				"    Isso é útil para realizar ações quando um elemento deixa de ser o foco ativo.",
				"*/"
			],
			"description": "Dispara um evento quando um elemento perde o foco."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element click",
			"body": [
				"element.addEventListener('click', (event) => { console.log('Elemento clicado'); });",
				"/*",
				"    O evento click é disparado quando um elemento é clicado.",
				"    Isso é útil para realizar ações quando um elemento é ativado via clique do mouse.",
				"*/"
			],
			"description": "Dispara um evento quando um elemento é clicado."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element compositionend",
			"body": [
				"element.addEventListener('compositionend', (event) => { console.log('Composição finalizada'); });",
				"/*",
				"    O evento compositionend é disparado quando a composição de texto é concluída.",
				"    Isso é útil para capturar o final do processo de entrada de texto composto.",
				"*/"
			],
			"description": "Dispara um evento quando a composição de texto é concluída."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element compositionstart",
			"body": [
				"element.addEventListener('compositionstart', (event) => { console.log('Início da composição'); });",
				"/*",
				"    O evento compositionstart é disparado quando a composição de texto é iniciada.",
				"    Isso é útil para capturar o início do processo de entrada de texto composto.",
				"*/"
			],
			"description": "Dispara um evento quando a composição de texto é iniciada."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element compositionupdate",
			"body": [
				"element.addEventListener('compositionupdate', (event) => { console.log('Composição atualizada'); });",
				"/*",
				"    O evento compositionupdate é disparado quando a composição de texto é atualizada.",
				"    Isso é útil para capturar atualizações durante o processo de entrada de texto composto.",
				"*/"
			],
			"description": "Dispara um evento quando a composição de texto é atualizada."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element contentvisibilityautostatechange",
			"body": [
				"element.addEventListener('contentvisibilityautostatechange', (event) => { console.log('Estado de visibilidade do conteúdo alterado automaticamente'); });",
				"/*",
				"    O evento contentvisibilityautostatechange é disparado quando o estado de visibilidade do conteúdo é alterado automaticamente.",
				"    Isso é útil para realizar ações quando a visibilidade do conteúdo muda.",
				"*/"
			],
			"description": "Dispara um evento quando o estado de visibilidade do conteúdo é alterado automaticamente."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element contextmenu",
			"body": [
				"element.addEventListener('contextmenu', (event) => { console.log('Menu de contexto aberto'); });",
				"/*",
				"    O evento contextmenu é disparado quando o menu de contexto é solicitado em um elemento.",
				"    Isso é útil para personalizar o menu de contexto ou realizar ações quando ele é aberto.",
				"*/"
			],
			"description": "Dispara um evento quando o menu de contexto é solicitado em um elemento."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element copy",
			"body": [
				"element.addEventListener('copy', (event) => { console.log('Texto copiado'); });",
				"/*",
				"    O evento copy é disparado quando o conteúdo é copiado para a área de transferência.",
				"    Isso é útil para realizar ações quando o usuário copia conteúdo de um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando o conteúdo é copiado para a área de transferência."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element cut",
			"body": [
				"element.addEventListener('cut', (event) => { console.log('Texto recortado'); });",
				"/*",
				"    O evento cut é disparado quando o conteúdo é recortado para a área de transferência.",
				"    Isso é útil para realizar ações quando o usuário recorta conteúdo de um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando o conteúdo é recortado para a área de transferência."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element dblclick",
			"body": [
				"element.addEventListener('dblclick', (event) => { console.log('Elemento clicado duas vezes'); });",
				"/*",
				"    O evento dblclick é disparado quando um elemento é clicado duas vezes em rápida sucessão.",
				"    Isso é útil para realizar ações em resposta a um duplo clique em um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando um elemento é clicado duas vezes em rápida sucessão."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element focus",
			"body": [
				"element.addEventListener('focus', (event) => { console.log('Elemento focado'); });",
				"/*",
				"    O evento focus é disparado quando um elemento ganha o foco.",
				"    Isso é útil para realizar ações quando um elemento recebe o foco.",
				"*/"
			],
			"description": "Dispara um evento quando um elemento ganha o foco."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element focusin",
			"body": [
				"element.addEventListener('focusin', (event) => { console.log('Elemento dentro do foco'); });",
				"/*",
				"    O evento focusin é disparado quando um elemento, ou um de seus filhos, ganha o foco.",
				"    Isso é útil para realizar ações quando um elemento ou um de seus filhos recebe o foco.",
				"*/"
			],
			"description": "Dispara um evento quando um elemento, ou um de seus filhos, ganha o foco."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element focusout",
			"body": [
				"element.addEventListener('focusout', (event) => { console.log('Elemento fora do foco'); });",
				"/*",
				"    O evento focusout é disparado quando um elemento, ou um de seus filhos, perde o foco.",
				"    Isso é útil para realizar ações quando um elemento ou um de seus filhos perde o foco.",
				"*/"
			],
			"description": "Dispara um evento quando um elemento, ou um de seus filhos, perde o foco."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element fullscreenchange",
			"body": [
				"element.addEventListener('fullscreenchange', (event) => { console.log('Modo de tela cheia alterado'); });",
				"/*",
				"    O evento fullscreenchange é disparado quando o estado de tela cheia é alterado para o documento ou um elemento.",
				"    Isso é útil para realizar ações em resposta a mudanças no modo de tela cheia.",
				"*/"
			],
			"description": "Dispara um evento quando o estado de tela cheia é alterado para o documento ou um elemento."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element fullscreenerror",
			"body": [
				"element.addEventListener('fullscreenerror', (event) => { console.log('Erro de tela cheia'); });",
				"/*",
				"    O evento fullscreenerror é disparado quando ocorre um erro ao tentar ativar o modo de tela cheia para o documento ou um elemento.",
				"    Isso é útil para tratar erros de tela cheia e fornecer feedback ao usuário.",
				"*/"
			],
			"description": "Dispara um evento quando ocorre um erro ao tentar ativar o modo de tela cheia."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element gesturechange",
			"body": [
				"element.addEventListener('gesturechange', (event) => { console.log('Gesto alterado'); });",
				"/*",
				"    O evento gesturechange é disparado quando ocorre uma mudança em um gesto multi-toque.",
				"    Isso é útil para detectar mudanças em gestos como pinçar ou girar em dispositivos com tela sensível ao toque.",
				"*/"
			],
			"description": "Dispara um evento quando ocorre uma mudança em um gesto multi-toque."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element gestureend",
			"body": [
				"element.addEventListener('gestureend', (event) => { console.log('Gesto finalizado'); });",
				"/*",
				"    O evento gestureend é disparado quando um gesto multi-toque é finalizado.",
				"    Isso é útil para detectar o término de gestos como pinçar ou girar em dispositivos com tela sensível ao toque.",
				"*/"
			],
			"description": "Dispara um evento quando um gesto multi-toque é finalizado."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element gesturestart",
			"body": [
				"element.addEventListener('gesturestart', (event) => { console.log('Gesto iniciado'); });",
				"/*",
				"    O evento gesturestart é disparado quando um gesto multi-toque é iniciado.",
				"    Isso é útil para detectar o início de gestos como pinçar ou girar em dispositivos com tela sensível ao toque.",
				"*/"
			],
			"description": "Dispara um evento quando um gesto multi-toque é iniciado."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element gotpointercapture",
			"body": [
				"element.addEventListener('gotpointercapture', (event) => { console.log('Captura de ponteiro obtida'); });",
				"/*",
				"    O evento gotpointercapture é disparado quando um elemento obtém a captura de um ponteiro.",
				"    Isso é útil para detectar quando um elemento começa a capturar eventos de ponteiro.",
				"*/"
			],
			"description": "Dispara um evento quando um elemento obtém a captura de um ponteiro."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element input",
			"body": [
				"element.addEventListener('input', (event) => { console.log('Entrada de dados'); });",
				"/*",
				"    O evento input é disparado quando o valor de um elemento de entrada é alterado.",
				"    Isso é útil para detectar alterações em campos de entrada de texto ou outras entradas de dados.",
				"*/"
			],
			"description": "Dispara um evento quando o valor de um elemento de entrada é alterado."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element keydown",
			"body": [
				"element.addEventListener('keydown', (event) => { console.log('Tecla pressionada'); });",
				"/*",
				"    O evento keydown é disparado quando uma tecla é pressionada.",
				"    Isso é útil para detectar quando o usuário pressiona uma tecla no teclado.",
				"*/"
			],
			"description": "Dispara um evento quando uma tecla é pressionada."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element keyup",
			"body": [
				"element.addEventListener('keyup', (event) => { console.log('Tecla liberada'); });",
				"/*",
				"    O evento keyup é disparado quando uma tecla é liberada.",
				"    Isso é útil para detectar quando o usuário solta uma tecla no teclado.",
				"*/"
			],
			"description": "Dispara um evento quando uma tecla é liberada."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element lostpointercapture",
			"body": [
				"element.addEventListener('lostpointercapture', (event) => { console.log('Captura de ponteiro perdida'); });",
				"/*",
				"    O evento lostpointercapture é disparado quando um elemento perde a captura de um ponteiro.",
				"    Isso é útil para detectar quando um elemento para de capturar eventos de ponteiro.",
				"*/"
			],
			"description": "Dispara um evento quando um elemento perde a captura de um ponteiro."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element mousedown",
			"body": [
				"element.addEventListener('mousedown', (event) => { console.log('Botão do mouse pressionado'); });",
				"/*",
				"    O evento mousedown é disparado quando um botão do mouse é pressionado sobre um elemento.",
				"    Isso é útil para detectar quando o usuário pressiona um botão do mouse em um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando um botão do mouse é pressionado sobre um elemento."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element mouseenter",
			"body": [
				"element.addEventListener('mouseenter', (event) => { console.log('Mouse entrou no elemento'); });",
				"/*",
				"    O evento mouseenter é disparado quando o ponteiro do mouse entra na área de um elemento.",
				"    Isso é útil para detectar quando o usuário move o ponteiro do mouse para dentro de um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando o ponteiro do mouse entra na área de um elemento."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element mouseleave",
			"body": [
				"element.addEventListener('mouseleave', (event) => { console.log('Mouse saiu do elemento'); });",
				"/*",
				"    O evento mouseleave é disparado quando o ponteiro do mouse sai da área de um elemento.",
				"    Isso é útil para detectar quando o usuário move o ponteiro do mouse para fora de um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando o ponteiro do mouse sai da área de um elemento."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element mousemove",
			"body": [
				"element.addEventListener('mousemove', (event) => { console.log('Mouse movido sobre o elemento'); });",
				"/*",
				"    O evento mousemove é disparado quando o ponteiro do mouse é movido sobre um elemento.",
				"    Isso é útil para detectar o movimento do mouse dentro da área de um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando o ponteiro do mouse é movido sobre um elemento."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element mouseout",
			"body": [
				"element.addEventListener('mouseout', (event) => { console.log('Mouse saiu do elemento'); });",
				"/*",
				"    O evento mouseout é disparado quando o ponteiro do mouse sai da área de um elemento ou de um dos seus filhos.",
				"    Isso é útil para detectar quando o ponteiro do mouse deixa a área de um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando o ponteiro do mouse sai da área de um elemento ou de um dos seus filhos."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element mouseover",
			"body": [
				"element.addEventListener('mouseover', (event) => { console.log('Mouse sobre o elemento'); });",
				"/*",
				"    O evento mouseover é disparado quando o ponteiro do mouse é movido para a área de um elemento ou de um dos seus filhos.",
				"    Isso é útil para detectar quando o ponteiro do mouse entra na área de um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando o ponteiro do mouse é movido para a área de um elemento ou de um dos seus filhos."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element mouseup",
			"body": [
				"element.addEventListener('mouseup', (event) => { console.log('Botão do mouse liberado'); });",
				"/*",
				"    O evento mouseup é disparado quando um botão do mouse é liberado sobre um elemento.",
				"    Isso é útil para detectar quando o usuário solta um botão do mouse em um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando um botão do mouse é liberado sobre um elemento."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element paste",
			"body": [
				"element.addEventListener('paste', (event) => { console.log('Conteúdo colado'); });",
				"/*",
				"    O evento paste é disparado quando o conteúdo é colado em um elemento.",
				"    Isso é útil para detectar quando o usuário cola conteúdo em um campo de entrada.",
				"*/"
			],
			"description": "Dispara um evento quando o conteúdo é colado em um elemento."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element pointercancel",
			"body": [
				"element.addEventListener('pointercancel', (event) => { console.log('Evento de ponteiro cancelado'); });",
				"/*",
				"    O evento pointercancel é disparado quando um evento de ponteiro é cancelado.",
				"    Isso é útil para lidar com interrupções em eventos de ponteiro, como toques ou cliques.",
				"*/"
			],
			"description": "Dispara um evento quando um evento de ponteiro é cancelado."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element pointerdown",
			"body": [
				"element.addEventListener('pointerdown', (event) => { console.log('Ponteiro pressionado'); });",
				"/*",
				"    O evento pointerdown é disparado quando um ponteiro é pressionado em um elemento.",
				"    Isso é útil para detectar a interação inicial com um ponteiro, seja um toque, clique ou caneta.",
				"*/"
			],
			"description": "Dispara um evento quando um ponteiro é pressionado em um elemento."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element pointerenter",
			"body": [
				"element.addEventListener('pointerenter', (event) => { console.log('Ponteiro entrou no elemento'); });",
				"/*",
				"    O evento pointerenter é disparado quando um ponteiro entra na área de um elemento.",
				"    Isso é útil para detectar quando o ponteiro se move para dentro da área de um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando um ponteiro entra na área de um elemento."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element pointerleave",
			"body": [
				"element.addEventListener('pointerleave', (event) => { console.log('Ponteiro saiu do elemento'); });",
				"/*",
				"    O evento pointerleave é disparado quando um ponteiro sai da área de um elemento.",
				"    Isso é útil para detectar quando o ponteiro se move para fora da área de um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando um ponteiro sai da área de um elemento."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element pointermove",
			"body": [
				"element.addEventListener('pointermove', (event) => { console.log('Ponteiro movido'); });",
				"/*",
				"    O evento pointermove é disparado quando um ponteiro é movido sobre um elemento.",
				"    Isso é útil para detectar o movimento do ponteiro dentro da área de um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando um ponteiro é movido sobre um elemento."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element pointerout",
			"body": [
				"element.addEventListener('pointerout', (event) => { console.log('Ponteiro fora do elemento'); });",
				"/*",
				"    O evento pointerout é disparado quando um ponteiro sai da área de um elemento ou de um dos seus filhos.",
				"    Isso é útil para detectar quando o ponteiro se move para fora da área de um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando um ponteiro sai da área de um elemento ou de um dos seus filhos."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element pointerover",
			"body": [
				"element.addEventListener('pointerover', (event) => { console.log('Ponteiro sobre o elemento'); });",
				"/*",
				"    O evento pointerover é disparado quando um ponteiro é movido para a área de um elemento ou de um dos seus filhos.",
				"    Isso é útil para detectar quando o ponteiro entra na área de um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando um ponteiro é movido para a área de um elemento ou de um dos seus filhos."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element pointerrawupdate",
			"body": [
				"element.addEventListener('pointerrawupdate', (event) => { console.log('Atualização bruta do ponteiro'); });",
				"/*",
				"    O evento pointerrawupdate é disparado quando há uma atualização bruta do ponteiro.",
				"    Isso é útil para acessar os dados brutos do ponteiro, como posição e movimento.",
				"*/"
			],
			"description": "Dispara um evento quando há uma atualização bruta do ponteiro."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element pointerup",
			"body": [
				"element.addEventListener('pointerup', (event) => { console.log('Ponteiro liberado'); });",
				"/*",
				"    O evento pointerup é disparado quando um ponteiro é liberado de um elemento.",
				"    Isso é útil para detectar quando o usuário termina a interação com um ponteiro, como levantar um dedo ou soltar o botão do mouse.",
				"*/"
			],
			"description": "Dispara um evento quando um ponteiro é liberado de um elemento."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element scroll",
			"body": [
				"element.addEventListener('scroll', (event) => { console.log('Elemento rolado'); });",
				"/*",
				"    O evento scroll é disparado quando um elemento é rolado.",
				"    Isso é útil para detectar mudanças na posição de rolagem de um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando um elemento é rolado."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element scrollend",
			"body": [
				"element.addEventListener('scrollend', (event) => { console.log('Rolagem finalizada'); });",
				"/*",
				"    O evento scrollend é disparado quando a rolagem de um elemento chega ao fim.",
				"    Isso é útil para detectar quando o usuário para de rolar um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando a rolagem de um elemento chega ao fim."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element scrollsnapchange",
			"body": [
				"element.addEventListener('scrollsnapchange', (event) => { console.log('Mudança de snap de rolagem'); });",
				"/*",
				"    O evento scrollsnapchange é disparado quando a rolagem com ajuste de snap muda.",
				"    Isso é útil para detectar mudanças em elementos que utilizam a propriedade CSS scroll-snap.",
				"*/"
			],
			"description": "Dispara um evento quando a rolagem com ajuste de snap muda."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element scrollsnapchanging",
			"body": [
				"element.addEventListener('scrollsnapchanging', (event) => { console.log('Alteração do Snap de Rolagem'); });",
				"/*",
				"    O evento scrollsnapchanging é disparado durante a alteração da posição do snap de rolagem.",
				"    Isso é útil para detectar quando a rolagem com ajuste de snap está mudando.",
				"*/"
			],
			"description": "Dispara um evento durante a alteração da posição do snap de rolagem."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element securitypolicyviolation",
			"body": [
				"element.addEventListener('securitypolicyviolation', (event) => { console.log('Violação da Política de Segurança'); });",
				"/*",
				"    O evento securitypolicyviolation é disparado quando ocorre uma violação da Política de Segurança de Conteúdo (CSP).",
				"    Isso é útil para detectar e lidar com violações de segurança relacionadas a recursos carregados ou executados.",
				"*/"
			],
			"description": "Dispara um evento quando ocorre uma violação da Política de Segurança de Conteúdo (CSP)."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element touchcancel",
			"body": [
				"element.addEventListener('touchcancel', (event) => { console.log('Toque Cancelado'); });",
				"/*",
				"    O evento touchcancel é disparado quando um evento de toque é cancelado.",
				"    Isso é útil para detectar e lidar com cancelamentos de eventos de toque.",
				"*/"
			],
			"description": "Dispara um evento quando um evento de toque é cancelado."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element touchend",
			"body": [
				"element.addEventListener('touchend', (event) => { console.log('Toque Finalizado'); });",
				"/*",
				"    O evento touchend é disparado quando um toque em um elemento é finalizado.",
				"    Isso é útil para detectar quando o usuário remove um toque de um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando um toque em um elemento é finalizado."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element touchmove",
			"body": [
				"element.addEventListener('touchmove', (event) => { console.log('Movimento de Toque'); });",
				"/*",
				"    O evento touchmove é disparado quando um toque é movido dentro da área de um elemento.",
				"    Isso é útil para detectar movimentos de toque, como deslizar, dentro de um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando um toque é movido dentro da área de um elemento."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element touchstart",
			"body": [
				"element.addEventListener('touchstart', (event) => { console.log('Toque Iniciado'); });",
				"/*",
				"    O evento touchstart é disparado quando um toque é iniciado em um elemento.",
				"    Isso é útil para detectar quando o usuário começa a tocar em um elemento.",
				"*/"
			],
			"description": "Dispara um evento quando um toque é iniciado em um elemento."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element transitioncancel",
			"body": [
				"element.addEventListener('transitioncancel', (event) => { console.log('Transição Cancelada'); });",
				"/*",
				"    O evento transitioncancel é disparado quando uma transição CSS é cancelada.",
				"    Isso é útil para detectar e lidar com cancelamentos de transições CSS.",
				"*/"
			],
			"description": "Dispara um evento quando uma transição CSS é cancelada."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element transitionend",
			"body": [
				"element.addEventListener('transitionend', (event) => {",
				"  // A função de callback para o evento transitionend será executada quando uma transição CSS completar",
				"  // Isso pode ser útil para realizar tarefas que devem ocorrer depois que uma animação ou transição CSS termina",
				"  if (event.propertyName === 'opacity') {",
				"    console.log('A transição de opacidade completou:', event);",
				"    // Adicione aqui o código para executar quando a transição de opacidade completar",
				"  }",
				"});"
			],
			"description": "O evento transitionend é disparado quando uma transição CSS termina. Ele é útil para executar tarefas que precisam ser concluídas após uma transição CSS, como alterações de estilo adicionais ou animações. Este evento fornece informações sobre a propriedade que foi animada e a duração da animação."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element transitionrun",
			"body": [
				"element.addEventListener('transitionrun', (event) => {",
				"  // A função de callback para o evento transitionrun será executada quando uma transição CSS começar a ser executada",
				"  // Pode ser útil para iniciar outras animações simultâneas ou preparar a interface para a transição",
				"  console.log('Transição CSS começou a ser executada:', event);",
				"});"
			],
			"description": "O evento transitionrun é disparado quando uma transição CSS começa a ser executada. Pode ser útil para executar tarefas que devem ocorrer no início de uma transição, como iniciar outras animações simultâneas ou preparar a interface do usuário para a transição."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element transitionstart",
			"body": [
				"element.addEventListener('transitionstart', (event) => {",
				"  // A função de callback para o evento transitionstart será executada assim que a transição CSS começar",
				"  // É útil para executar tarefas que precisam ser iniciadas exatamente quando a transição começa",
				"  console.log('Transição CSS começou:', event);",
				"  // Por exemplo, podemos alterar outras propriedades ou iniciar outras animações aqui",
				"});"
			],
			"description": "O evento transitionstart é disparado no início de uma transição CSS. É útil para executar tarefas que precisam ser iniciadas exatamente quando a transição começa, como ajustes de interface do usuário em tempo real ou o início de outras animações."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element webkitmouseforcechanged",
			"body": [
				"element.addEventListener('webkitmouseforcechanged', (event) => {",
				"  // A função de callback para o evento webkitmouseforcechanged será executada quando a força do mouse mudar",
				"  // Isso pode ser útil para detectar diferentes níveis de pressão e responder de acordo",
				"  if (event.webkitForce > 1.5) {",
				"    console.log('Força do mouse aumentada:', event);",
				"    // Adicione aqui o código para executar quando a força do mouse for maior que 1.5",
				"  }",
				"});"
			],
			"description": "O evento webkitmouseforcechanged é um evento não padronizado disparado quando a força aplicada a um trackpad da Apple é alterada. Ele pode ser usado para detectar níveis de pressão do usuário e alterar o comportamento da aplicação com base nisso, permitindo interações mais dinâmicas e responsivas."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element webkitmouseforcedown",
			"body": [
				"element.addEventListener('webkitmouseforcedown', (event) => {",
				"  // A função de callback para o evento webkitmouseforcedown será executada quando o mouse começar a aplicar força",
				"  // Pode ser útil para iniciar interações baseadas na pressão do usuário",
				"  console.log('Força aplicada pelo mouse:', event);",
				"  // Adicione aqui o código para executar quando a força do mouse for detectada",
				"});"
			],
			"description": "O evento webkitmouseforcedown é um evento não padronizado disparado quando o usuário começa a aplicar pressão a um trackpad da Apple. É útil para criar interações mais responsivas baseadas na força aplicada pelo usuário, como ajustar elementos da interface do usuário conforme a pressão é aplicada."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element webkitmouseforceup",
			"body": [
				"element.addEventListener('webkitmouseforceup', (event) => {",
				"  // A função de callback para o evento webkitmouseforceup será executada quando o mouse parar de aplicar força",
				"  // Pode ser usado para redefinir ou ajustar comportamentos que dependem da pressão contínua do usuário",
				"  console.log('Força liberada pelo mouse:', event);",
				"  // Adicione aqui o código para executar quando a força do mouse for liberada",
				"});"
			],
			"description": "O evento webkitmouseforceup é um evento não padronizado disparado quando o usuário para de aplicar pressão a um trackpad da Apple. Pode ser usado para redefinir ou ajustar comportamentos que dependem da pressão contínua do usuário, como finalizar uma ação iniciada pela pressão."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element webkitmouseforcewillbegin",
			"body": [
				"element.addEventListener('webkitmouseforcewillbegin', (event) => {",
				"  // A função de callback para o evento webkitmouseforcewillbegin será executada antes de começar a aplicar força",
				"  // Pode ser útil para preparar a interface para interações baseadas na força",
				"  console.log('Preparando para aplicar força com o mouse:', event);",
				"  // Adicione aqui o código para preparar a interface do usuário para a aplicação de força",
				"});"
			],
			"description": "O evento webkitmouseforcewillbegin é um evento não padronizado disparado antes de o usuário começar a aplicar pressão a um trackpad da Apple. Pode ser útil para preparar a interface do usuário para interações baseadas em força, ajustando elementos antes que a pressão seja aplicada."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Element wheel",
			"body": [
				"element.addEventListener('wheel', (event) => {",
				"  // A função de callback para o evento wheel será executada quando o usuário rolar o mouse",
				"  // Pode ser usada para detectar a direção e a velocidade da rolagem e ajustar o conteúdo da página em resposta",
				"  console.log('Evento de rolagem do mouse:', event);",
				"  const delta = Math.sign(event.deltaY);",
				"  if (delta > 0) {",
				"    console.log('Usuário rolou para baixo');",
				"  } else {",
				"    console.log('Usuário rolou para cima');",
				"  }",
				"  // Adicione aqui o código para ajustar o conteúdo com base na rolagem do mouse",
				"});"
			],
			"description": "O evento wheel é disparado quando o usuário rola a roda do mouse. Ele pode ser usado para detectar a direção e a velocidade da rolagem e ajustar o conteúdo exibido na página em resposta, proporcionando uma experiência de navegação mais interativa e responsiva."
		},
		"❓                                                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Event()",
			"body": [
				"// Cria um novo objeto Event",
				"const evento = new Event('tipoDoEvento');",
				"// Tipo de evento pode ser uma string, ex: 'click', 'keydown'"
			],
			"description": "1. Event(): Cria um novo objeto Event com o tipo de evento especificado."
		},
		"❓                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Event Bubbles",
			"body": [
				"// Verifica se o evento propaga através do DOM",
				"console.log(evento.bubbles); // false"
			],
			"description": "2. bubbles: Um Boolean indicando se o evento propaga através do DOM ou não."
		},
		"❓                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Event Cancelable",
			"body": [
				"// Verifica se o evento é cancelável",
				"console.log(evento.cancelable); // false"
			],
			"description": "3. cancelable: Um Boolean indicando se o evento é cancelável."
		},
		"❓                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Event Composed",
			"body": [
				"// Verifica se o evento pode propagar através do shadow DOM",
				"console.log(evento.composed); // false"
			],
			"description": "4. composed: Um Boolean indicando se o evento pode propagar através da fronteira do shadow DOM."
		},
		"❓                                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Event CurrentTarget",
			"body": [
				"// Referência ao alvo atualmente registrado para o evento",
				"console.log(evento.currentTarget); // null"
			],
			"description": "5. currentTarget: Uma referência ao alvo atualmente registrado para o evento."
		},
		"❓                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Event DefaultPrevented",
			"body": [
				"// Verifica se a ação padrão do evento foi prevenida",
				"console.log(evento.defaultPrevented); // false"
			],
			"description": "6. defaultPrevented: Um Boolean indicando se a ação padrão do evento foi prevenida."
		},
		"❓                                                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Event EventPhase",
			"body": [
				"// Indica qual fase do fluxo de evento está sendo avaliada no momento",
				"console.log(evento.eventPhase); // 0"
			],
			"description": "7. eventPhase: Indica qual fase do fluxo de evento está sendo avaliada no momento."
		},
		"⚠️                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Event ExplicitOriginalTarget",
			"body": [
				"// Alvo explicitamente indicado do evento (Não-padrão)",
				"console.log(evento.explicitOriginalTarget); // null"
			],
			"description": "8. explicitOriginalTarget: (Não-padrão) O alvo explicitamente indicado do evento."
		},
		"❓                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Event IsTrusted",
			"body": [
				"// Verifica se o evento foi gerado por uma ação do usuário",
				"console.log(evento.isTrusted); // false"
			],
			"description": "9. isTrusted: Um Boolean indicando se o evento foi gerado por uma ação do usuário."
		},
		"⚠️               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Event OriginalTarget",
			"body": [
				"// Alvo original do evento antes de qualquer redirecionamento (Não-padrão)",
				"console.log(evento.originalTarget); // null"
			],
			"description": "10. originalTarget: (Não-padrão) O alvo original do evento antes de qualquer redirecionamento."
		},
		"❓                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Event Target",
			"body": [
				"// Referência ao alvo ao qual o evento foi originalmente despachado",
				"console.log(evento.target); // null"
			],
			"description": "11. target: Uma referência ao alvo ao qual o evento foi originalmente despachado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Event TimeStamp",
			"body": [
				"// Momento em que o evento foi criado",
				"console.log(evento.timeStamp); // ex: 1234567890"
			],
			"description": "12. timeStamp: O momento em que o evento foi criado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Event Type",
			"body": [
				"// Tipo de evento",
				"console.log(evento.type); // 'construir'"
			],
			"description": "13. type: O tipo de evento."
		},
		"❓                                                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Event ComposedPath()",
			"body": [
				"// Retorna o caminho do evento",
				"console.log(evento.composedPath()); // []"
			],
			"description": "14. composedPath(): Retorna o caminho do evento, que é um array dos objetos nos quais os ouvintes serão invocados."
		},
		"❓                                                                                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Event PreventDefault",
			"body": [
				"// Cancela o evento (se for cancelável)",
				"evento.preventDefault();"
			],
			"description": "15. preventDefault(): Cancela o evento (se for cancelável)."
		},
		"❓                                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Event StopImmediatePropagation",
			"body": [
				"// Para tarefas imediatas, impede outros ouvintes do mesmo evento",
				"evento.stopImmediatePropagation();"
			],
			"description": "16. stopImmediatePropagation(): Para tarefas imediatas, impede que outros ouvintes do mesmo evento sejam chamados."
		},
		"❓                                                                                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Event StopPropagation",
			"body": [
				"// Impede a propagação adicional do evento atual",
				"evento.stopPropagation();"
			],
			"description": "17. stopPropagation(): Impede a propagação adicional do evento atual."
		},
		"❓                                                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 EventTarget()",
			"body": [
				"// Cria um novo objeto EventTarget",
				"const alvoDeEvento = new EventTarget();",
				"// Exemplo de uso:",
				"alvoDeEvento.addEventListener('click', (event) => {",
				"    console.log('Evento de clique detectado:', event);",
				"});",
				"const eventoClique = new Event('click');",
				"alvoDeEvento.dispatchEvent(eventoClique);"
			],
			"description": "1. EventTarget(): Cria um novo objeto EventTarget. Exemplo: Cria um EventTarget, adiciona um ouvinte de evento 'click' e despacha um evento de clique."
		},
		"❓                                                                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 EventTarget addEventListener",
			"body": [
				"// Adiciona um ouvinte de evento",
				"alvoDeEvento.addEventListener('tipoDoEvento', (event) => {",
				"    console.log('Evento detectado:', event);",
				"});",
				"// Exemplo de uso:",
				"alvoDeEvento.addEventListener('click', (event) => {",
				"    console.log('Evento de clique detectado:', event);",
				"});"
			],
			"description": "2. addEventListener(): Adiciona um ouvinte de evento para o tipo de evento especificado. Exemplo: Adiciona um ouvinte de evento 'click' que registra o evento no console."
		},
		"❓                                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 EventTarget dispatchEvent",
			"body": [
				"// Despacha um evento para o alvo",
				"const evento = new Event('tipoDoEvento');",
				"alvoDeEvento.dispatchEvent(evento);",
				"// Exemplo de uso:",
				"const eventoClique = new Event('click');",
				"alvoDeEvento.dispatchEvent(eventoClique);"
			],
			"description": "3. dispatchEvent(): Despacha um evento para o alvo. Exemplo: Cria e despacha um evento de clique para o alvo de evento."
		},
		"❓                                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 EventTarget removeEventListener",
			"body": [
				"// Remove um ouvinte de evento",
				"function meuOuvinte(event) {",
				"    console.log('Evento detectado:', event);",
				"}",
				"alvoDeEvento.addEventListener('tipoDoEvento', meuOuvinte);",
				"alvoDeEvento.removeEventListener('tipoDoEvento', meuOuvinte);",
				"// Exemplo de uso:",
				"function meuOuvinteDeClique(event) {",
				"    console.log('Evento de clique detectado:', event);",
				"}",
				"alvoDeEvento.addEventListener('click', meuOuvinteDeClique);",
				"alvoDeEvento.removeEventListener('click', meuOuvinteDeClique);"
			],
			"description": "4. removeEventListener(): Remove um ouvinte de evento para o tipo de evento especificado. Exemplo: Adiciona e depois remove um ouvinte de evento 'click'."
		},
		"❓                                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 HTMLCollection length",
			"body": [
				"// Obtém o número de elementos na coleção",
				"const colecao = document.getElementsByTagName('div');",
				"console.log(colecao.length); // Número de elementos 'div' na página"
			],
			"description": "1. length: Obtém o número de elementos na HTMLCollection."
		},
		"❓                                                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 HTMLCollection item()",
			"body": [
				"// Retorna o item na posição especificada",
				"const colecao = document.getElementsByTagName('div');",
				"const item = colecao.item(0);",
				"console.log(item); // O primeiro elemento 'div' na página"
			],
			"description": "2. item(): Retorna o item na posição especificada na HTMLCollection. Exemplo: Obtém o primeiro elemento 'div' na página."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 HTMLCollection namedItem()",
			"body": [
				"// Retorna o item com o nome especificado",
				"const colecao = document.getElementsByName('meuElemento');",
				"const itemNomeado = colecao.namedItem('meuElemento');",
				"console.log(itemNomeado); // Elemento com o nome 'meuElemento'"
			],
			"description": "3. namedItem(): Retorna o item com o nome especificado na HTMLCollection. Exemplo: Obtém o elemento com o nome 'meuElemento'."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 MutationObserver()",
			"body": [
				"// Cria um novo objeto MutationObserver",
				"const observador = new MutationObserver((mutacoes) => {",
				"    mutacoes.forEach((mutacao) => {",
				"        console.log(mutacao);",
				"    });",
				"});",
				"// Exemplo de uso:",
				"const config = { attributes: true, childList: true, subtree: true };",
				"const alvo = document.getElementById('meuElemento');",
				"observador.observe(alvo, config);"
			],
			"description": "1. MutationObserver(): Cria um novo objeto MutationObserver. Exemplo: Cria um MutationObserver, configura a observação de atributos, lista de filhos e subárvore, e inicia a observação em um elemento alvo."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 MutationObserver disconnect()",
			"body": [
				"// Interrompe a observação de todas as mutações",
				"observador.disconnect();",
				"// Exemplo de uso:",
				"observador.disconnect();"
			],
			"description": "2. disconnect(): Interrompe a observação de todas as mutações. Exemplo: Interrompe a observação do MutationObserver."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 MutationObserver observe()",
			"body": [
				"// Inicia a observação de mutações em um alvo",
				"const config = { attributes: true, childList: true, subtree: true };",
				"const alvo = document.getElementById('meuElemento');",
				"observador.observe(alvo, config);",
				"// Exemplo de uso:",
				"const config = { attributes: true, childList: true, subtree: true };",
				"const alvo = document.getElementById('meuElemento');",
				"observador.observe(alvo, config);"
			],
			"description": "3. observe(): Inicia a observação de mutações em um alvo especificado. Exemplo: Configura a observação e inicia a observação em um elemento alvo."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 MutationObserver takeRecords()",
			"body": [
				"// Retorna todas as mutações registradas e limpa a lista de mutações",
				"const mutacoes = observador.takeRecords();",
				"console.log(mutacoes);",
				"// Exemplo de uso:",
				"const mutacoes = observador.takeRecords();",
				"mutacoes.forEach((mutacao) => {",
				"    console.log(mutacao);",
				"});"
			],
			"description": "4. takeRecords(): Retorna todas as mutações registradas e limpa a lista de mutações. Exemplo: Obtém todas as mutações registradas e as exibe no console."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 MutationRecord addedNodes",
			"body": [
				"// Retorna uma lista de nós adicionados",
				"const mutacao = /* objeto MutationRecord */;",
				"const nodesAdicionados = mutacao.addedNodes;",
				"console.log(nodesAdicionados); // Lista de nós adicionados"
			],
			"description": "1. addedNodes: Retorna uma lista de nós adicionados à árvore do DOM."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 MutationRecord attributeName",
			"body": [
				"// Retorna o nome do atributo que foi alterado",
				"const mutacao = /* objeto MutationRecord */;",
				"const nomeAtributo = mutacao.attributeName;",
				"console.log(nomeAtributo); // Nome do atributo alterado"
			],
			"description": "2. attributeName: Retorna o nome do atributo que foi alterado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 MutationRecord attributeNamespace",
			"body": [
				"// Retorna o namespace do atributo que foi alterado",
				"const mutacao = /* objeto MutationRecord */;",
				"const namespaceAtributo = mutacao.attributeNamespace;",
				"console.log(namespaceAtributo); // Namespace do atributo alterado"
			],
			"description": "3. attributeNamespace: Retorna o namespace do atributo que foi alterado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 MutationRecord nextSibling",
			"body": [
				"// Retorna o próximo irmão do nó alvo",
				"const mutacao = /* objeto MutationRecord */;",
				"const proximoIrmao = mutacao.nextSibling;",
				"console.log(proximoIrmao); // Próximo irmão do nó alvo"
			],
			"description": "4. nextSibling: Retorna o próximo irmão do nó alvo."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 MutationRecord oldValue",
			"body": [
				"// Retorna o valor antigo do atributo ou conteúdo de texto",
				"const mutacao = /* objeto MutationRecord */;",
				"const valorAntigo = mutacao.oldValue;",
				"console.log(valorAntigo); // Valor antigo do atributo ou conteúdo de texto"
			],
			"description": "5. oldValue: Retorna o valor antigo do atributo ou do conteúdo de texto do nó alvo."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 MutationRecord previousSibling",
			"body": [
				"// Retorna o irmão anterior do nó alvo",
				"const mutacao = /* objeto MutationRecord */;",
				"const irmaoAnterior = mutacao.previousSibling;",
				"console.log(irmaoAnterior); // Irmão anterior do nó alvo"
			],
			"description": "6. previousSibling: Retorna o irmão anterior do nó alvo."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 MutationRecord removedNodes",
			"body": [
				"// Retorna uma lista de nós removidos",
				"const mutacao = /* objeto MutationRecord */;",
				"const nodesRemovidos = mutacao.removedNodes;",
				"console.log(nodesRemovidos); // Lista de nós removidos"
			],
			"description": "7. removedNodes: Retorna uma lista de nós removidos da árvore do DOM."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 MutationRecord target",
			"body": [
				"// Retorna o nó alvo da mutação",
				"const mutacao = /* objeto MutationRecord */;",
				"const alvo = mutacao.target;",
				"console.log(alvo); // Nó alvo da mutação"
			],
			"description": "8. target: Retorna o nó alvo da mutação."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 MutationRecord type",
			"body": [
				"// Retorna o tipo de mutação",
				"const mutacao = /* objeto MutationRecord */;",
				"const tipo = mutacao.type;",
				"console.log(tipo); // Tipo de mutação"
			],
			"description": "9. type: Retorna o tipo de mutação (attributes, characterData, ou childList)."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NamedNodeMap length",
			"body": [
				"const comprimento = namedNodeMap.length;",
				"console.log('Número de atributos:', comprimento);"
			],
			"description": "Retorna o número de nós no NamedNodeMap."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NamedNodeMap getNamedItem()",
			"body": [
				"const attr = namedNodeMap.getNamedItem('nomeDoAtributo');",
				"if (attr !== null) {",
				"  console.log('Valor do atributo:', attr.value);",
				"} else {",
				"  console.log('Atributo não encontrado.');",
				"}"
			],
			"description": "Retorna o nó Attr para o atributo com o nome especificado, ou null se não houver atributo com esse nome."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NamedNodeMap getNamedItemNS()",
			"body": [
				"const attr = namedNodeMap.getNamedItemNS('namespaceURI', 'nomeLocal');",
				"if (attr !== null) {",
				"  console.log('Valor do atributo:', attr.value);",
				"} else {",
				"  console.log('Atributo não encontrado.');",
				"}"
			],
			"description": "Retorna o nó Attr para o atributo com o namespace URI e nome local especificados, ou null se não houver atributo com esse namespace e nome local."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NamedNodeMap item()",
			"body": [
				"const attr = namedNodeMap.item(indice);",
				"if (attr !== null) {",
				"  console.log('Nome do atributo:', attr.name);",
				"} else {",
				"  console.log('Atributo não encontrado.');",
				"}"
			],
			"description": "Retorna o nó Attr no índice especificado, ou null se o índice estiver fora do intervalo."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NamedNodeMap removeNamedItem()",
			"body": [
				"try {",
				"  const removedAttr = namedNodeMap.removeNamedItem('nomeDoAtributo');",
				"  console.log('Atributo removido:', removedAttr.name);",
				"} catch (e) {",
				"  console.log('Erro:', e.message);",
				"}"
			],
			"description": "Remove o nó Attr para o atributo com o nome especificado e retorna o nó Attr removido. Lança um erro se não houver atributo com esse nome."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NamedNodeMap removeNamedItemNS()",
			"body": [
				"try {",
				"  const removedAttr = namedNodeMap.removeNamedItemNS('namespaceURI', 'nomeLocal');",
				"  console.log('Atributo removido:', removedAttr.name);",
				"} catch (e) {",
				"  console.log('Erro:', e.message);",
				"}"
			],
			"description": "Remove o nó Attr para o atributo com o namespace URI e nome local especificados e retorna o nó Attr removido. Lança um erro se não houver atributo com esse namespace e nome local."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NamedNodeMap setNamedItem()",
			"body": [
				"const newAttr = document.createAttribute('nomeDoAtributo');",
				"newAttr.value = 'valor';",
				"const replacedAttr = namedNodeMap.setNamedItem(newAttr);",
				"if (replacedAttr !== null) {",
				"  console.log('Atributo substituído:', replacedAttr.name);",
				"} else {",
				"  console.log('Atributo adicionado.');",
				"}"
			],
			"description": "Adiciona um novo nó Attr ou substitui um existente com o mesmo nome e retorna o nó Attr substituído ou null se um novo atributo foi adicionado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NamedNodeMap setNamedItemNS()",
			"body": [
				"const newAttr = document.createAttributeNS('namespaceURI', 'nomeQualificado');",
				"newAttr.value = 'valor';",
				"const replacedAttr = namedNodeMap.setNamedItemNS(newAttr);",
				"if (replacedAttr !== null) {",
				"  console.log('Atributo substituído:', replacedAttr.name);",
				"} else {",
				"  console.log('Atributo adicionado.');",
				"}"
			],
			"description": "Adiciona um novo nó Attr com o namespace URI e nome local especificados ou substitui um existente e retorna o nó Attr substituído ou null se um novo atributo foi adicionado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node baseURI",
			"body": [
				"const uriBase = node.baseURI;",
				"console.log('URI base:', uriBase);"
			],
			"description": "Retorna a URI base do node."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node childNodes",
			"body": [
				"const filhos = node.childNodes;",
				"filhos.forEach(filho => console.log(filho));"
			],
			"description": "Retorna uma NodeList dos filhos do node."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node firstChild",
			"body": [
				"const primeiroFilho = node.firstChild;",
				"console.log('Primeiro filho:', primeiroFilho);"
			],
			"description": "Retorna o primeiro filho do node."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node isConnected",
			"body": [
				"const conectado = node.isConnected;",
				"console.log('Está conectado ao documento:', conectado);"
			],
			"description": "Retorna um valor booleano indicando se o node está conectado ao documento DOM."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node lastChild",
			"body": [
				"const ultimoFilho = node.lastChild;",
				"console.log('Último filho:', ultimoFilho);"
			],
			"description": "Retorna o último filho do node."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node nextSibling",
			"body": [
				"const proximoIrmao = node.nextSibling;",
				"console.log('Próximo irmão:', proximoIrmao);"
			],
			"description": "Retorna o próximo node irmão."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node nodeName",
			"body": [
				"const nomeDoNode = node.nodeName;",
				"console.log('Nome do node:', nomeDoNode);"
			],
			"description": "Retorna o nome do node."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node nodeType",
			"body": [
				"const tipoDoNode = node.nodeType;",
				"console.log('Tipo do node:', tipoDoNode);"
			],
			"description": "Retorna o tipo do node como um valor numérico."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node nodeValue",
			"body": [
				"const valorDoNode = node.nodeValue;",
				"console.log('Valor do node:', valorDoNode);"
			],
			"description": "Retorna ou define o valor do node."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node ownerDocument",
			"body": [
				"const documentoProprietario = node.ownerDocument;",
				"console.log('Documento proprietário:', documentoProprietario);"
			],
			"description": "Retorna o objeto Document ao qual o node pertence."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node parentElement",
			"body": [
				"const elementoPai = node.parentElement;",
				"console.log('Elemento pai:', elementoPai);"
			],
			"description": "Retorna o elemento pai do node."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node parentNode",
			"body": [
				"const nodePai = node.parentNode;",
				"console.log('Node pai:', nodePai);"
			],
			"description": "Retorna o node pai."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node previousSibling",
			"body": [
				"const irmaoAnterior = node.previousSibling;",
				"console.log('Irmão anterior:', irmaoAnterior);"
			],
			"description": "Retorna o node irmão anterior."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node textContent",
			"body": [
				"const conteudoTexto = node.textContent;",
				"console.log('Conteúdo do texto:', conteudoTexto);"
			],
			"description": "Retorna ou define o conteúdo textual do node."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node appendChild()",
			"body": [
				"const novoFilho = document.createElement('div');",
				"node.appendChild(novoFilho);",
				"console.log('Novo filho adicionado:', novoFilho);"
			],
			"description": "Adiciona um novo node filho ao final da lista de filhos de um node pai."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node cloneNode()",
			"body": [
				"const clone = node.cloneNode(true);",
				"console.log('Clone do node:', clone);"
			],
			"description": "Clona o node. Se o argumento deep for verdadeiro, todos os descendentes do node também serão clonados."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node compareDocumentPosition()",
			"body": [
				"const posicao = node.compareDocumentPosition(outroNode);",
				"console.log('Posição em relação ao outro node:', posicao);"
			],
			"description": "Compara a posição do node atual com outro node no documento."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node contains()",
			"body": [
				"const contem = node.contains(outroNode);",
				"console.log('Contém o outro node:', contem);"
			],
			"description": "Retorna um valor booleano indicando se o node atual contém o node especificado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node getRootNode()",
			"body": [
				"const raiz = node.getRootNode();",
				"console.log('Node raiz:', raiz);"
			],
			"description": "Retorna o node raiz do node atual."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node hasChildNodes()",
			"body": [
				"const temFilhos = node.hasChildNodes();",
				"console.log('Tem filhos:', temFilhos);"
			],
			"description": "Retorna um valor booleano indicando se o node tem filhos."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node insertBefore()",
			"body": [
				"const novoNode = document.createElement('div');",
				"node.insertBefore(novoNode, node.firstChild);",
				"console.log('Novo node inserido antes do primeiro filho:', novoNode);"
			],
			"description": "Insere um novo node antes de um node filho de referência especificado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node isDefaultNamespace()",
			"body": [
				"const ehNamespacePadrao = node.isDefaultNamespace('namespaceURI');",
				"console.log('É o namespace padrão:', ehNamespacePadrao);"
			],
			"description": "Retorna um valor booleano indicando se o namespaceURI especificado é o namespace padrão."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node isEqualNode()",
			"body": [
				"const ehIgual = node.isEqualNode(outroNode);",
				"console.log('Nodes são iguais:', ehIgual);"
			],
			"description": "Retorna um valor booleano indicando se os nodes são iguais."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node isSameNode()",
			"body": [
				"const ehMesmo = node.isSameNode(outroNode);",
				"console.log('Nodes são os mesmos:', ehMesmo);"
			],
			"description": "Retorna um valor booleano indicando se os nodes são o mesmo node."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node lookupNamespaceURI()",
			"body": [
				"const namespaceURI = node.lookupNamespaceURI('prefix');",
				"console.log('Namespace URI para o prefixo:', namespaceURI);"
			],
			"description": "Retorna o namespace URI associado ao prefixo especificado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node lookupPrefix()",
			"body": [
				"const prefixo = node.lookupPrefix('namespaceURI');",
				"console.log('Prefixo para o namespace URI:', prefixo);"
			],
			"description": "Retorna o prefixo associado ao namespace URI especificado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node normalize()",
			"body": [
				"node.normalize();",
				"console.log('Node normalizado:', node);"
			],
			"description": "Normaliza o node, juntando nós de texto adjacentes e removendo nós vazios."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node removeChild()",
			"body": [
				"const filhoRemovido = node.removeChild(filhoNode);",
				"console.log('Filho removido:', filhoRemovido);"
			],
			"description": "Remove um node filho e retorna o node removido."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node replaceChild()",
			"body": [
				"const novoNode = document.createElement('div');",
				"const nodeSubstituido = node.replaceChild(novoNode, filhoNode);",
				"console.log('Node substituído:', nodeSubstituido);"
			],
			"description": "Substitui um node filho por um novo node e retorna o node substituído."
		},
		"Evento              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Node selectstart",
			"body": [
				"node.addEventListener('selectstart', (event) => {",
				"  console.log('Seleção iniciada:', event);",
				"});"
			],
			"description": "Dispara quando uma seleção de texto é iniciada pelo usuário."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NodeIterator filter",
			"body": [
				"const filtro = nodeIterator.filter;",
				"console.log('Filtro do NodeIterator:', filtro);"
			],
			"description": "Retorna o filtro associado a este NodeIterator, usado para filtrar os nodes durante a iteração."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NodeIterator pointerBeforeReferenceNode",
			"body": [
				"const ponteiroAntes = nodeIterator.pointerBeforeReferenceNode;",
				"console.log('Ponteiro antes do node de referência:', ponteiroAntes);"
			],
			"description": "Retorna um valor booleano que indica se o ponteiro está posicionado antes do node de referência."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NodeIterator referenceNode",
			"body": [
				"const nodeDeReferencia = nodeIterator.referenceNode;",
				"console.log('Node de referência:', nodeDeReferencia);"
			],
			"description": "Retorna o node atual ao qual o NodeIterator está apontando."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NodeIterator root",
			"body": [
				"const raiz = nodeIterator.root;",
				"console.log('Node raiz do NodeIterator:', raiz);"
			],
			"description": "Retorna o node raiz que foi especificado quando o NodeIterator foi criado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NodeIterator whatToShow",
			"body": [
				"const oQueMostrar = nodeIterator.whatToShow;",
				"console.log('O que mostrar no NodeIterator:', oQueMostrar);"
			],
			"description": "Retorna um valor numérico que representa os tipos de nodes que devem ser mostrados pelo NodeIterator."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NodeIterator nextNode()",
			"body": [
				"const proximoNode = nodeIterator.nextNode();",
				"console.log('Próximo node:', proximoNode);"
			],
			"description": "Avança para o próximo node no conjunto e retorna esse node."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NodeIterator previousNode()",
			"body": [
				"const nodeAnterior = nodeIterator.previousNode();",
				"console.log('Node anterior:', nodeAnterior);"
			],
			"description": "Retrocede para o node anterior no conjunto e retorna esse node."
		},
		/*"": {
		"scope": "javascript, typescript",
		"prefix": "",
			"body": [
								],
		"description": ""
		},*/
		"❓                                                                                                                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NodeList length",
			"body": [
				"const comprimento = nodeList.length;",
				"console.log('Comprimento da NodeList:', comprimento);"
			],
			"description": "Retorna o número de nodes na NodeList."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NodeList entries()",
			"body": [
				"for (const [indice, node] of nodeList.entries()) {",
				"  console.log(`Índice: ${indice}, Node:`, node);",
				"}"
			],
			"description": "Retorna um iterador para os pares chave/valor na NodeList."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NodeList forEach()",
			"body": [
				"nodeList.forEach((node, indice) => {",
				"  console.log(`Índice: ${indice}, Node:`, node);",
				"});"
			],
			"description": "Executa uma função para cada node na NodeList."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NodeList item()",
			"body": [
				"const node = nodeList.item(indice);",
				"console.log(`Node no índice ${indice}:`, node);"
			],
			"description": "Retorna o node no índice especificado na NodeList."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NodeList keys()",
			"body": [
				"for (const chave of nodeList.keys()) {",
				"  console.log('Chave:', chave);",
				"}"
			],
			"description": "Retorna um iterador para as chaves na NodeList."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 NodeList values()",
			"body": [
				"for (const valor of nodeList.values()) {",
				"  console.log('Valor:', valor);",
				"}"
			],
			"description": "Retorna um iterador para os valores na NodeList."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 ProcessingInstruction sheet",
			"body": [
				"const folhaDeEstilo = processingInstruction.sheet;",
				"console.log('Folha de estilo associada:', folhaDeEstilo);"
			],
			"description": "Retorna a folha de estilo associada à ProcessingInstruction, se houver uma."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 ProcessingInstruction target",
			"body": [
				"const alvo = processingInstruction.target;",
				"console.log('Alvo da ProcessingInstruction:', alvo);"
			],
			"description": "Retorna o destino da ProcessingInstruction."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range Range()",
			"body": [
				"const range = new Range();",
				"console.log('Novo Range criado:', range);"
			],
			"description": "Construtor para criar um novo objeto Range."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range collapsed",
			"body": [
				"const colapsado = range.collapsed;",
				"console.log('Range está colapsado:', colapsado);"
			],
			"description": "Retorna um valor booleano indicando se o Range está colapsado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range commonAncestorContainer",
			"body": [
				"const containerComum = range.commonAncestorContainer;",
				"console.log('Container ancestral comum:', containerComum);"
			],
			"description": "Retorna o node ancestral comum ao startContainer e endContainer do Range."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range endContainer",
			"body": [
				"const containerFinal = range.endContainer;",
				"console.log('Container final:', containerFinal);"
			],
			"description": "Retorna o node onde o Range termina."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range endOffset",
			"body": [
				"const offsetFinal = range.endOffset;",
				"console.log('Offset final:', offsetFinal);"
			],
			"description": "Retorna a posição dentro do endContainer onde o Range termina."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range startContainer",
			"body": [
				"const containerInicial = range.startContainer;",
				"console.log('Container inicial:', containerInicial);"
			],
			"description": "Retorna o node onde o Range começa."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range startOffset",
			"body": [
				"const offsetInicial = range.startOffset;",
				"console.log('Offset inicial:', offsetInicial);"
			],
			"description": "Retorna a posição dentro do startContainer onde o Range começa."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range cloneContents()",
			"body": [
				"const clone = range.cloneContents();",
				"console.log('Conteúdo clonado:', clone);"
			],
			"description": "Clona o conteúdo do Range e retorna um DocumentFragment contendo os nodes clonados."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range cloneRange()",
			"body": [
				"const rangeClone = range.cloneRange();",
				"console.log('Range clonado:', rangeClone);"
			],
			"description": "Clona o Range e retorna uma nova Range com as mesmas posições de início e fim."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range collapse()",
			"body": [
				"range.collapse(true);",
				"console.log('Range colapsado no início:', range);"
			],
			"description": "Colapsa o Range em sua posição inicial ou final."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range compareBoundaryPoints()",
			"body": [
				"const comparacao = range.compareBoundaryPoints(Range.START_TO_START, outroRange);",
				"console.log('Comparação dos pontos de limite:', comparacao);"
			],
			"description": "Compara os pontos de limite de dois Ranges."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range comparePoint()",
			"body": [
				"const comparacaoPonto = range.comparePoint(node, offset);",
				"console.log('Comparação do ponto:', comparacaoPonto);"
			],
			"description": "Compara um ponto especificado com o Range."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range createContextualFragment()",
			"body": [
				"const fragmento = range.createContextualFragment('<div>Conteúdo</div>');",
				"console.log('Fragmento contextual criado:', fragmento);"
			],
			"description": "Cria e retorna um novo DocumentFragment a partir da string HTML fornecida."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range deleteContents()",
			"body": [
				"range.deleteContents();",
				"console.log('Conteúdo deletado:', range);"
			],
			"description": "Remove o conteúdo do Range do documento."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range detach()",
			"body": [
				"range.detach();",
				"console.log('Range desanexado:', range);"
			],
			"description": "Libera qualquer recurso mantido pelo Range."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range extractContents()",
			"body": [
				"const conteudoExtraido = range.extractContents();",
				"console.log('Conteúdo extraído:', conteudoExtraido);"
			],
			"description": "Remove o conteúdo do Range do documento e retorna um DocumentFragment contendo o conteúdo extraído."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range getBoundingClientRect()",
			"body": [
				"const retangulo = range.getBoundingClientRect();",
				"console.log('Retângulo delimitador:', retangulo);"
			],
			"description": "Retorna um DOMRect que define o menor retângulo que pode conter todo o Range."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range getClientRects()",
			"body": [
				"const retangulos = range.getClientRects();",
				"retangulos.forEach(rect => console.log('Retângulo:', rect));"
			],
			"description": "Retorna uma lista de DOMRects que delimitam o Range."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range insertNode()",
			"body": [
				"const novoNode = document.createElement('div');",
				"range.insertNode(novoNode);",
				"console.log('Novo node inserido:', novoNode);"
			],
			"description": "Insere um node no início do Range."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range intersectsNode()",
			"body": [
				"const intersecta = range.intersectsNode(node);",
				"console.log('Range intersecta o node:', intersecta);"
			],
			"description": "Retorna um valor booleano indicando se o Range intersecta o node especificado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range isPointInRange()",
			"body": [
				"const pontoNoRange = range.isPointInRange(node, offset);",
				"console.log('Ponto está no Range:', pontoNoRange);"
			],
			"description": "Retorna um valor booleano indicando se o ponto especificado está dentro do Range."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range selectNode()",
			"body": [
				"range.selectNode(node);",
				"console.log('Node selecionado:', node);"
			],
			"description": "Seleciona o node especificado e seus conteúdos como o conteúdo do Range."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range selectNodeContents()",
			"body": [
				"range.selectNodeContents(node);",
				"console.log('Conteúdo do node selecionado:', node);"
			],
			"description": "Seleciona os conteúdos do node especificado como o conteúdo do Range."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range setEnd()",
			"body": [
				"range.setEnd(node, offset);",
				"console.log('Fim do Range definido:', range);"
			],
			"description": "Define a posição final do Range em um node e offset especificados."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range setEndAfter()",
			"body": [
				"range.setEndAfter(node);",
				"console.log('Fim do Range definido após o node:', range);"
			],
			"description": "Define a posição final do Range imediatamente após o node especificado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range setEndBefore()",
			"body": [
				"range.setEndBefore(node);",
				"console.log('Fim do Range definido antes do node:', range);"
			],
			"description": "Define a posição final do Range imediatamente antes do node especificado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range setStart()",
			"body": [
				"range.setStart(node, offset);",
				"console.log('Início do Range definido:', range);"
			],
			"description": "Define a posição inicial do Range em um node e offset especificados."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range setStartAfter()",
			"body": [
				"range.setStartAfter(node);",
				"console.log('Início do Range definido após o node:', range);"
			],
			"description": "Define a posição inicial do Range imediatamente após o node especificado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range setStartBefore()",
			"body": [
				"range.setStartBefore(node);",
				"console.log('Início do Range definido antes do node:', range);"
			],
			"description": "Define a posição inicial do Range imediatamente antes do node especificado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range surroundContents()",
			"body": [
				"const novoElemento = document.createElement('div');",
				"range.surroundContents(novoElemento);",
				"console.log('Conteúdo do Range envolvido por novo elemento:', novoElemento);"
			],
			"description": "Envolve o conteúdo do Range com um novo node pai."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Range toString()",
			"body": [
				"const texto = range.toString();",
				"console.log('Texto do Range:', texto);"
			],
			"description": "Retorna uma string que representa o conteúdo textual do Range."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 StaticRange()",
			"body": [
				"const staticRange = new StaticRange({",
				"  startContainer: document.body,",
				"  startOffset: 0,",
				"  endContainer: document.body,",
				"  endOffset: 1",
				"});",
				"console.log('Novo StaticRange criado:', staticRange);"
			],
			"description": "Construtor para criar um novo objeto StaticRange."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 StaticRange collapsed",
			"body": [
				"const colapsado = staticRange.collapsed;",
				"console.log('StaticRange está colapsado:', colapsado);"
			],
			"description": "Retorna um valor booleano indicando se o StaticRange está colapsado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 StaticRange endContainer",
			"body": [
				"const containerFinal = staticRange.endContainer;",
				"console.log('Container final:', containerFinal);"
			],
			"description": "Retorna o node onde o StaticRange termina."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 StaticRange endOffset",
			"body": [
				"const offsetFinal = staticRange.endOffset;",
				"console.log('Offset final:', offsetFinal);"
			],
			"description": "Retorna a posição dentro do endContainer onde o StaticRange termina."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 StaticRange startContainer",
			"body": [
				"const containerInicial = staticRange.startContainer;",
				"console.log('Container inicial:', containerInicial);"
			],
			"description": "Retorna o node onde o StaticRange começa."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 StaticRange startOffset",
			"body": [
				"const offsetInicial = staticRange.startOffset;",
				"console.log('Offset inicial:', offsetInicial);"
			],
			"description": "Retorna a posição dentro do startContainer onde o StaticRange começa."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Text()",
			"body": [
				"const texto = new Text('Texto de exemplo');",
				"console.log('Novo Text node criado:', texto);"
			],
			"description": "Construtor para criar um novo objeto Text."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Text assignedSlot",
			"body": [
				"const slotAtribuido = textNode.assignedSlot;",
				"console.log('Slot atribuído:', slotAtribuido);"
			],
			"description": "Retorna o slot assigned para o Text node, se houver um."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Text wholeText",
			"body": [
				"const textoCompleto = textNode.wholeText;",
				"console.log('Texto completo:', textoCompleto);"
			],
			"description": "Retorna o conteúdo textual completo do Text node."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Text splitText()",
			"body": [
				"const novoTextNode = textNode.splitText(offset);",
				"console.log('Novo Text node após split:', novoTextNode);"
			],
			"description": "Divide o Text node em dois nodes no offset especificado."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window caches",
			"body": [
				"const cachesDisponiveis = window.caches;",
				"console.log('Caches disponíveis:', cachesDisponiveis);"
			],
			"description": "Acesso ao objeto CacheStorage que representa os caches de recurso disponível."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window closed",
			"body": [
				"const janelaFechada = window.closed;",
				"console.log('Janela está fechada:', janelaFechada);"
			],
			"description": "Indica se a janela foi fechada."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window console",
			"body": [
				"const consoleObjeto = window.console;",
				"consoleObjeto.log('Acesso ao console');"
			],
			"description": "Acesso ao objeto Console para saída de logging."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window cookieStoreExperimental",
			"body": [
				"const cookieStore = window.cookieStoreExperimental;",
				"console.log('Acesso ao Cookie Store experimental:', cookieStore);"
			],
			"description": "Acesso ao objeto Cookie Store experimental."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window credentiallessExperimental",
			"body": [
				"const credentialless = window.credentiallessExperimental;",
				"console.log('Acesso ao Credentialless experimental:', credentialless);"
			],
			"description": "Indica se o contexto é credentialless experimental."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window crossOriginIsolated",
			"body": [
				"const crossOrigin = window.crossOriginIsolated;",
				"console.log('Cross Origin Isolated:', crossOrigin);"
			],
			"description": "Indica se o contexto é isolado entre origens."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window crypto",
			"body": [
				"const cryptoObjeto = window.crypto;",
				"console.log('Acesso ao objeto Crypto:', cryptoObjeto);"
			],
			"description": "Acesso ao objeto Crypto para operações criptográficas."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window customElements",
			"body": [
				"const customElementsObjeto = window.customElements;",
				"console.log('Acesso ao objeto Custom Elements:', customElementsObjeto);"
			],
			"description": "Acesso ao objeto Custom Elements para definir elementos personalizados."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window devicePixelRatio",
			"body": [
				"const proporcaoPixels = window.devicePixelRatio;",
				"console.log('Proporção de pixels do dispositivo:', proporcaoPixels);"
			],
			"description": "Retorna a proporção de pixels do dispositivo."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window document",
			"body": [
				"const documento = window.document;",
				"console.log('Acesso ao objeto Document:', documento);"
			],
			"description": "Acesso ao objeto Document que representa a página carregada."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window documentPictureInPictureExperimental",
			"body": [
				"const pictureInPicture = window.documentPictureInPictureExperimental;",
				"console.log('Acesso ao Picture-in-Picture experimental:', pictureInPicture);"
			],
			"description": "Acesso ao objeto Document Picture-in-Picture experimental."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window fenceExperimental",
			"body": [
				"const fence = window.fenceExperimental;",
				"console.log('Acesso ao Fence experimental:', fence);"
			],
			"description": "Acesso ao objeto Fence experimental."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window frameElement",
			"body": [
				"const elementoFrame = window.frameElement;",
				"console.log('Elemento frame que contém a janela:', elementoFrame);"
			],
			"description": "Retorna o elemento frame que contém a janela."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window frames",
			"body": [
				"const janelasFrames = window.frames;",
				"console.log('Coleção de janelas frames:', janelasFrames);"
			],
			"description": "Acesso à coleção de janelas frames."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window fullScreenNon-standard",
			"body": [
				"const telaCheia = window.fullScreenNon-standard;",
				"console.log('Modo tela cheia:', telaCheia);"
			],
			"description": "Indica se a janela está em modo tela cheia (não padrão)."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window history",
			"body": [
				"const historico = window.history;",
				"console.log('Acesso ao objeto History:', historico);"
			],
			"description": "Acesso ao objeto History para manipulação do histórico do navegador."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window indexedDB",
			"body": [
				"const bancoDeDados = window.indexedDB;",
				"console.log('Acesso ao objeto IndexedDB:', bancoDeDados);"
			],
			"description": "Acesso ao objeto IndexedDB para armazenamento de dados no navegador."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window innerHeight",
			"body": [
				"const alturaInterna = window.innerHeight;",
				"console.log('Altura interna da janela:', alturaInterna);"
			],
			"description": "Retorna a altura interna da janela."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window innerWidth",
			"body": [
				"const larguraInterna = window.innerWidth;",
				"console.log('Largura interna da janela:', larguraInterna);"
			],
			"description": "Retorna a largura interna da janela."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window isSecureContext",
			"body": [
				"const contextoSeguro = window.isSecureContext;",
				"console.log('Contexto seguro:', contextoSeguro);"
			],
			"description": "Indica se a janela está em um contexto seguro."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window launchQueueExperimental",
			"body": [
				"const filaLancamento = window.launchQueueExperimental;",
				"console.log('Acesso ao Launch Queue experimental:', filaLancamento);"
			],
			"description": "Acesso ao Launch Queue experimental."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window length",
			"body": [
				"const comprimentoJanelas = window.length;",
				"console.log('Número de janelas frames:', comprimentoJanelas);"
			],
			"description": "Retorna o número de janelas frames na janela atual."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window localStorage",
			"body": [
				"const armazenamentoLocal = window.localStorage;",
				"console.log('Acesso ao objeto LocalStorage:', armazenamentoLocal);"
			],
			"description": "Acesso ao objeto LocalStorage para armazenamento de dados persistentes."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window location",
			"body": [
				"const localizacao = window.location;",
				"console.log('Acesso ao objeto Location:', localizacao);"
			],
			"description": "Acesso ao objeto Location para manipulação da URL da janela atual."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window locationbar",
			"body": [
				"const barraLocalizacao = window.locationbar;",
				"console.log('Barra de localização:', barraLocalizacao);"
			],
			"description": "Acesso à barra de localização."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window locationbar",
			"body": [
				"const barraLocalizacao = window.locationbar;",
				"console.log('Barra de localização:', barraLocalizacao);"
			],
			"description": "Acesso à barra de localização."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window menubar",
			"body": [
				"const barraDeMenu = window.menubar;",
				"console.log('Barra de menu:', barraDeMenu);"
			],
			"description": "Acesso à barra de menu."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window mozInnerScreenXNon-standard",
			"body": [
				"const posX = window.mozInnerScreenXNon-standard;",
				"console.log('Posição X interna (não padrão):', posX);"
			],
			"description": "Retorna a posição X interna da tela (não padrão)."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window mozInnerScreenYNon-standard",
			"body": [
				"const posY = window.mozInnerScreenYNon-standard;",
				"console.log('Posição Y interna (não padrão):', posY);"
			],
			"description": "Retorna a posição Y interna da tela (não padrão)."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window name",
			"body": [
				"const nomeJanela = window.name;",
				"console.log('Nome da janela:', nomeJanela);"
			],
			"description": "Retorna ou define o nome da janela."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window navigationExperimental",
			"body": [
				"const navegacao = window.navigationExperimental;",
				"console.log('Acesso ao objeto Navigation experimental:', navegacao);"
			],
			"description": "Acesso ao objeto Navigation experimental."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window navigator",
			"body": [
				"const navegador = window.navigator;",
				"console.log('Acesso ao objeto Navigator:', navegador);"
			],
			"description": "Acesso ao objeto Navigator que representa o agente do usuário."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window opener",
			"body": [
				"const janelaOpener = window.opener;",
				"console.log('Janela que abriu esta janela:', janelaOpener);"
			],
			"description": "Retorna uma referência para a janela que abriu esta janela."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window origin",
			"body": [
				"const origem = window.origin;",
				"console.log('Origem da janela:', origem);"
			],
			"description": "Retorna a origem da janela."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window originAgentClusterExperimental",
			"body": [
				"const clusterOrigem = window.originAgentClusterExperimental;",
				"console.log('Acesso ao Origin Agent Cluster experimental:', clusterOrigem);"
			],
			"description": "Acesso ao Origin Agent Cluster experimental."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window outerHeight",
			"body": [
				"const alturaExterna = window.outerHeight;",
				"console.log('Altura externa da janela:', alturaExterna);"
			],
			"description": "Retorna a altura externa da janela."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window outerWidth",
			"body": [
				"const larguraExterna = window.outerWidth;",
				"console.log('Largura externa da janela:', larguraExterna);"
			],
			"description": "Retorna a largura externa da janela."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window parent",
			"body": [
				"const janelaPai = window.parent;",
				"console.log('Janela pai:', janelaPai);"
			],
			"description": "Retorna uma referência para a janela pai."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window performance",
			"body": [
				"const desempenho = window.performance;",
				"console.log('Acesso ao objeto Performance:', desempenho);"
			],
			"description": "Acesso ao objeto Performance para medir a performance da janela."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window personalbar",
			"body": [
				"const barraPessoal = window.personalbar;",
				"console.log('Barra pessoal:', barraPessoal);"
			],
			"description": "Acesso à barra pessoal."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window scheduler",
			"body": [
				"const agendador = window.scheduler;",
				"console.log('Acesso ao objeto Scheduler:', agendador);"
			],
			"description": "Acesso ao objeto Scheduler para agendamento de tarefas."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window screen",
			"body": [
				"const tela = window.screen;",
				"console.log('Acesso ao objeto Screen:', tela);"
			],
			"description": "Acesso ao objeto Screen que representa a tela do dispositivo."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window screenLeft",
			"body": [
				"const telaEsquerda = window.screenLeft;",
				"console.log('Posição da tela à esquerda:', telaEsquerda);"
			],
			"description": "Retorna a posição da tela à esquerda da janela."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window screenTop",
			"body": [
				"const telaTopo = window.screenTop;",
				"console.log('Posição da tela no topo:', telaTopo);"
			],
			"description": "Retorna a posição da tela no topo da janela."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window screenX",
			"body": [
				"const telaX = window.screenX;",
				"console.log('Coordenada X da tela:', telaX);"
			],
			"description": "Retorna a coordenada X da tela."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window screenY",
			"body": [
				"const telaY = window.screenY;",
				"console.log('Coordenada Y da tela:', telaY);"
			],
			"description": "Retorna a coordenada Y da tela."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window scrollbars",
			"body": [
				"const barrasDeRolagem = window.scrollbars;",
				"console.log('Acesso às barras de rolagem:', barrasDeRolagem);"
			],
			"description": "Acesso às barras de rolagem da janela."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window scrollMaxXNon-standard",
			"body": [
				"const maxScrollX = window.scrollMaxXNon-standard;",
				"console.log('Máximo de rolagem X (não padrão):', maxScrollX);"
			],
			"description": "Retorna o máximo de rolagem X da janela (não padrão)."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window scrollMaxYNon-standard",
			"body": [
				"const maxScrollY = window.scrollMaxYNon-standard;",
				"console.log('Máximo de rolagem Y (não padrão):', maxScrollY);"
			],
			"description": "Retorna o máximo de rolagem Y da janela (não padrão)."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window scrollX",
			"body": [
				"const rolagemX = window.scrollX;",
				"console.log('Posição de rolagem horizontal:', rolagemX);"
			],
			"description": "Retorna a posição de rolagem horizontal da janela."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window scrollY",
			"body": [
				"const rolagemY = window.scrollY;",
				"console.log('Posição de rolagem vertical:', rolagemY);"
			],
			"description": "Retorna a posição de rolagem vertical da janela."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window self",
			"body": [
				"const selfJanela = window.self;",
				"console.log('Referência para a própria janela:', selfJanela);"
			],
			"description": "Retorna uma referência para a própria janela."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window sessionStorage",
			"body": [
				"const armazenamentoSessao = window.sessionStorage;",
				"console.log('Acesso ao objeto SessionStorage:', armazenamentoSessao);"
			],
			"description": "Acesso ao objeto SessionStorage para armazenamento de dados da sessão."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window sharedStorageExperimental",
			"body": [
				"const armazenamentoCompartilhado = window.sharedStorageExperimental;",
				"console.log('Acesso ao Shared Storage experimental:', armazenamentoCompartilhado);"
			],
			"description": "Acesso ao objeto Shared Storage experimental."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window speechSynthesis",
			"body": [
				"const sinteseFala = window.speechSynthesis;",
				"console.log('Acesso ao objeto SpeechSynthesis:', sinteseFala);"
			],
			"description": "Acesso ao objeto SpeechSynthesis para síntese de fala."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window statusbar",
			"body": [
				"const barraStatus = window.statusbar;",
				"console.log('Barra de status:', barraStatus);"
			],
			"description": "Acesso à barra de status."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window toolbar",
			"body": [
				"const barraFerramentas = window.toolbar;",
				"console.log('Barra de ferramentas:', barraFerramentas);"
			],
			"description": "Acesso à barra de ferramentas."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window top",
			"body": [
				"const janelaTopo = window.top;",
				"console.log('Referência para a janela no topo:', janelaTopo);"
			],
			"description": "Retorna uma referência para a janela no topo da janela de navegação."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window trustedTypes",
			"body": [
				"const tiposConfiaveis = window.trustedTypes;",
				"console.log('Acesso ao objeto TrustedTypes:', tiposConfiaveis);"
			],
			"description": "Acesso ao objeto TrustedTypes para gerenciamento de políticas de tipos confiáveis."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window visualViewport",
			"body": [
				"const viewportVisual = window.visualViewport;",
				"console.log('Acesso ao objeto VisualViewport:', viewportVisual);"
			],
			"description": "Acesso ao objeto VisualViewport que representa a viewport visual."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window window",
			"body": [
				"const janela = window.window;",
				"console.log('Referência para a própria janela:', janela);"
			],
			"description": "Retorna uma referência para a própria janela."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window alert()",
			"body": [
				"window.alert('Alerta!');"
			],
			"description": "Exibe um alerta com a mensagem especificada."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window atob()",
			"body": [
				"const decodedData = window.atob('dGVzdA==');",
				"console.log('Dados decodificados:', decodedData);"
			],
			"description": "Decodifica um string de dados base64."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window btoa()",
			"body": [
				"const encodedData = window.btoa('test');",
				"console.log('Dados codificados:', encodedData);"
			],
			"description": "Codifica um string de dados em base64."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window cancelAnimationFrame()",
			"body": [
				"const id = window.requestAnimationFrame(() => {});",
				"window.cancelAnimationFrame(id);",
				"console.log('Animação cancelada:', id);"
			],
			"description": "Cancela um pedido de quadro de animação."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window cancelIdleCallback()",
			"body": [
				"const id = window.requestIdleCallback(() => {});",
				"window.cancelIdleCallback(id);",
				"console.log('Callback de idle cancelado:', id);"
			],
			"description": "Cancela um callback de idle pedido."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window clearInterval()",
			"body": [
				"const id = window.setInterval(() => {}, 1000);",
				"window.clearInterval(id);",
				"console.log('Intervalo limpo:', id);"
			],
			"description": "Limpa um intervalo que foi configurado com setInterval."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window clearTimeout()",
			"body": [
				"const id = window.setTimeout(() => {}, 1000);",
				"window.clearTimeout(id);",
				"console.log('Timeout limpo:', id);"
			],
			"description": "Limpa um timeout que foi configurado com setTimeout."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window close()",
			"body": [
				"window.close();",
				"console.log('Janela fechada');"
			],
			"description": "Fecha a janela atual."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window confirm()",
			"body": [
				"const confirmado = window.confirm('Você tem certeza?');",
				"console.log('Confirmado:', confirmado);"
			],
			"description": "Exibe uma caixa de diálogo de confirmação."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window createImageBitmap()",
			"body": [
				"const blob = new Blob();",
				"window.createImageBitmap(blob).then(imageBitmap => {",
				"  console.log('ImageBitmap criado:', imageBitmap);",
				"});"
			],
			"description": "Cria um ImageBitmap a partir de uma fonte especificada."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window dump() Non-standard",
			"body": [
				"window.dump('Debug: mensagem de depuração');"
			],
			"description": "Imprime uma mensagem no console de depuração (não padrão)."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window fetch()",
			"body": [
				"fetch('https://example.com/api')",
				"  .then(response => response.json())",
				"  .then(data => console.log('Dados recebidos:', data))",
				"  .catch(error => console.error('Erro:', error));"
			],
			"description": "Faz uma solicitação de rede e retorna uma promessa que resolve com a resposta."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window find() Non-standard",
			"body": [
				"const encontrado = window.find('texto');",
				"console.log('Texto encontrado:', encontrado);"
			],
			"description": "Procura um texto na janela (não padrão)."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window focus()",
			"body": [
				"window.focus();",
				"console.log('Janela focada');"
			],
			"description": "Dá foco à janela atual."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window getComputedStyle()",
			"body": [
				"const estilo = window.getComputedStyle(elemento);",
				"console.log('Estilo computado:', estilo);"
			],
			"description": "Retorna um objeto que fornece os valores dos estilos CSS computados para um elemento."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window getDefaultComputedStyle() Non-standard",
			"body": [
				"const estiloPadrao = window.getDefaultComputedStyle(elemento);",
				"console.log('Estilo computado padrão:', estiloPadrao);"
			],
			"description": "Retorna o estilo computado padrão de um elemento (não padrão)."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window getScreenDetails() Experimental",
			"body": [
				"window.getScreenDetails().then(details => {",
				"  console.log('Detalhes da tela:', details);",
				"});"
			],
			"description": "Retorna uma promessa que resolve com os detalhes da tela (experimental)."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window getSelection()",
			"body": [
				"const selecao = window.getSelection();",
				"console.log('Seleção atual:', selecao);"
			],
			"description": "Retorna a seleção de texto atual da janela."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window matchMedia()",
			"body": [
				"const mediaQuery = window.matchMedia('(max-width: 600px)');",
				"console.log('Media query match:', mediaQuery.matches);"
			],
			"description": "Retorna um objeto MediaQueryList que pode ser usado para verificar o estado de uma media query."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window moveBy()",
			"body": [
				"window.moveBy(100, 100);",
				"console.log('Janela movida');"
			],
			"description": "Move a janela atual em relação à sua posição atual."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window moveTo()",
			"body": [
				"window.moveTo(200, 200);",
				"console.log('Janela movida para');"
			],
			"description": "Move a janela atual para a posição especificada."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window open()",
			"body": [
				"const novaJanela = window.open('https://example.com');",
				"console.log('Nova janela aberta:', novaJanela);"
			],
			"description": "Abre uma nova janela ou aba com a URL especificada."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window postMessage()",
			"body": [
				"window.postMessage('mensagem', 'https://example.com');",
				"console.log('Mensagem enviada');"
			],
			"description": "Envia uma mensagem para a janela de destino especificada."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window print()",
			"body": [
				"window.print();",
				"console.log('Impressão iniciada');"
			],
			"description": "Abre a caixa de diálogo de impressão para imprimir o conteúdo da janela."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window prompt()",
			"body": [
				"const entrada = window.prompt('Digite algo:');",
				"console.log('Entrada do usuário:', entrada);"
			],
			"description": "Exibe uma caixa de diálogo que solicita ao usuário a inserção de dados."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window queryLocalFonts() Experimental",
			"body": [
				"window.queryLocalFonts().then(fonts => {",
				"  console.log('Fontes locais:', fonts);",
				"});"
			],
			"description": "Retorna uma promessa que resolve com a lista de fontes locais (experimental)."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window queueMicrotask()",
			"body": [
				"window.queueMicrotask(() => {",
				"  console.log('Microtask enfileirada');",
				"});"
			],
			"description": "Enfileira uma microtask a ser executada depois do script atual."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window reportError()",
			"body": [
				"window.reportError(new Error('Erro de exemplo'));",
				"console.log('Erro reportado');"
			],
			"description": "Reporta um erro."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window requestAnimationFrame()",
			"body": [
				"const id = window.requestAnimationFrame(() => {",
				"  console.log('Animação solicitada');",
				"});"
			],
			"description": "Solicita um quadro de animação."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window requestIdleCallback()",
			"body": [
				"const id = window.requestIdleCallback(() => {",
				"  console.log('Callback de idle solicitado');",
				"});"
			],
			"description": "Solicita um callback a ser chamado durante o período de inatividade do navegador."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window resizeBy()",
			"body": [
				"window.resizeBy(100, 100);",
				"console.log('Janela redimensionada');"
			],
			"description": "Redimensiona a janela atual por uma determinada quantidade."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window resizeTo()",
			"body": [
				"window.resizeTo(800, 600);",
				"console.log('Janela redimensionada para');"
			],
			"description": "Redimensiona a janela atual para a largura e altura especificadas."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window scroll()",
			"body": [
				"window.scroll(0, 100);",
				"console.log('Janela rolada');"
			],
			"description": "Rola a janela para as coordenadas especificadas."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window scrollBy()",
			"body": [
				"window.scrollBy(0, 100);",
				"console.log('Janela rolada por');"
			],
			"description": "Rola a janela pela quantidade especificada."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window scrollByLines() Non-standard",
			"body": [
				"window.scrollByLines(1);",
				"console.log('Janela rolada por uma linha');"
			],
			"description": "Rola a janela para cima ou para baixo por uma linha (não padrão)."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window scrollByPages() Non-standard",
			"body": [
				"window.scrollByPages(1);",
				"console.log('Janela rolada por uma página');"
			],
			"description": "Rola a janela para cima ou para baixo por uma página (não padrão)."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window scrollTo()",
			"body": [
				"window.scrollTo(0, 100);",
				"console.log('Janela rolada para');"
			],
			"description": "Rola a janela para as coordenadas especificadas."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window setInterval()",
			"body": [
				"const id = window.setInterval(() => {",
				"  console.log('Intervalo executado');",
				"}, 1000);"
			],
			"description": "Chama uma função repetidamente com um intervalo fixo entre cada chamada."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window setResizable() Non-standard Deprecated",
			"body": [
				"window.setResizable(true);",
				"console.log('Janela redimensionável');"
			],
			"description": "Define se a janela pode ser redimensionada (não padrão, obsoleto)."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window setTimeout()",
			"body": [
				"const id = window.setTimeout(() => {",
				"  console.log('Timeout executado');",
				"}, 1000);"
			],
			"description": "Chama uma função após um determinado atraso."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window showDirectoryPicker() Experimental",
			"body": [
				"window.showDirectoryPicker().then(directory => {",
				"  console.log('Diretório selecionado:', directory);",
				"});"
			],
			"description": "Exibe um seletor de diretório e retorna uma promessa que resolve com o diretório selecionado (experimental)."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window showModalDialog() Non-standard Deprecated",
			"body": [
				"window.showModalDialog('https://example.com');",
				"console.log('Diálogo modal exibido');"
			],
			"description": "Exibe um diálogo modal com a URL especificada (não padrão, obsoleto)."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window showOpenFilePicker() Experimental",
			"body": [
				"window.showOpenFilePicker().then(files => {",
				"  console.log('Arquivos selecionados:', files);",
				"});"
			],
			"description": "Exibe um seletor de arquivos e retorna uma promessa que resolve com os arquivos selecionados (experimental)."
		},
		"❓                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window showSaveFilePicker() Experimental",
			"body": [
				"window.showSaveFilePicker().then(file => {",
				"  console.log('Arquivo para salvar selecionado:', file);",
				"});"
			],
			"description": "Exibe um seletor de arquivos para salvar e retorna uma promessa que resolve com o arquivo selecionado (experimental)."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window sizeToContent() Non-standard",
			"body": [
				"window.sizeToContent();",
				"console.log('Janela ajustada ao conteúdo');"
			],
			"description": "Redimensiona a janela para se ajustar ao conteúdo (não padrão)."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window stop()",
			"body": [
				"window.stop();",
				"console.log('Carregamento interrompido');"
			],
			"description": "Interrompe o carregamento do documento."
		},
		"❓{
			"scope": "javascript, typescript",
			"prefix": "#3 Window structuredClone()",
			"body": [
				"const clone = window.structuredClone(objeto);",
				"console.log('Objeto clonado:', clone);"
			],
			"description": "Faz uma cópia profunda de um objeto, incluindo todos os seus valores."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window afterprint",
			"body": [
				"window.addEventListener('afterprint', (event) => {",
				"  console.log('Evento afterprint acionado:', event);",
				"});"
			],
			"description": "Evento disparado depois que uma impressão de documento é concluída."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window appinstalled",
			"body": [
				"window.addEventListener('appinstalled', (event) => {",
				"  console.log('Evento appinstalled acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando um aplicativo é instalado com sucesso."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window beforeinstallprompt",
			"body": [
				"window.addEventListener('beforeinstallprompt', (event) => {",
				"  console.log('Evento beforeinstallprompt acionado:', event);",
				"});"
			],
			"description": "Evento disparado antes de um prompt de instalação de aplicativo ser mostrado."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window beforeprint",
			"body": [
				"window.addEventListener('beforeprint', (event) => {",
				"  console.log('Evento beforeprint acionado:', event);",
				"});"
			],
			"description": "Evento disparado antes de uma impressão de documento começar."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window beforeunload",
			"body": [
				"window.addEventListener('beforeunload', (event) => {",
				"  event.preventDefault();",
				"  event.returnValue = '';",
				"  console.log('Evento beforeunload acionado:', event);",
				"});"
			],
			"description": "Evento disparado antes de a janela ou documento ser descarregado."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window blur",
			"body": [
				"window.addEventListener('blur', (event) => {",
				"  console.log('Evento blur acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando a janela perde o foco."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window copy",
			"body": [
				"window.addEventListener('copy', (event) => {",
				"  console.log('Evento copy acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando o conteúdo é copiado."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window cut",
			"body": [
				"window.addEventListener('cut', (event) => {",
				"  console.log('Evento cut acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando o conteúdo é cortado."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window devicemotion",
			"body": [
				"window.addEventListener('devicemotion', (event) => {",
				"  console.log('Evento devicemotion acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando há movimento do dispositivo."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window deviceorientation",
			"body": [
				"window.addEventListener('deviceorientation', (event) => {",
				"  console.log('Evento deviceorientation acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando há mudança na orientação do dispositivo."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window deviceorientationabsolute",
			"body": [
				"window.addEventListener('deviceorientationabsolute', (event) => {",
				"  console.log('Evento deviceorientationabsolute acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando há mudança na orientação absoluta do dispositivo."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window error",
			"body": [
				"window.addEventListener('error', (event) => {",
				"  console.log('Evento error acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando ocorre um erro na janela."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window focus",
			"body": [
				"window.addEventListener('focus', (event) => {",
				"  console.log('Evento focus acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando a janela ganha foco."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window gamepadconnected",
			"body": [
				"window.addEventListener('gamepadconnected', (event) => {",
				"  console.log('Evento gamepadconnected acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando um gamepad é conectado."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window gamepaddisconnected",
			"body": [
				"window.addEventListener('gamepaddisconnected', (event) => {",
				"  console.log('Evento gamepaddisconnected acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando um gamepad é desconectado."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window hashchange",
			"body": [
				"window.addEventListener('hashchange', (event) => {",
				"  console.log('Evento hashchange acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando o fragmento identificador da URL muda."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window languagechange",
			"body": [
				"window.addEventListener('languagechange', (event) => {",
				"  console.log('Evento languagechange acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando a configuração de idioma do navegador muda."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window load",
			"body": [
				"window.addEventListener('load', (event) => {",
				"  console.log('Evento load acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando a página é completamente carregada."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window message",
			"body": [
				"window.addEventListener('message', (event) => {",
				"  console.log('Evento message acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando uma mensagem é recebida através de diferentes contextos de origem."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window messageerror",
			"body": [
				"window.addEventListener('messageerror', (event) => {",
				"  console.log('Evento messageerror acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando ocorre um erro no processo de mensagem."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window offline",
			"body": [
				"window.addEventListener('offline', (event) => {",
				"  console.log('Evento offline acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando a rede é desconectada."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window online",
			"body": [
				"window.addEventListener('online', (event) => {",
				"  console.log('Evento online acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando a rede é conectada."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window pagehide",
			"body": [
				"window.addEventListener('pagehide', (event) => {",
				"  console.log('Evento pagehide acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando uma página está para ser escondida."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window pagereveal",
			"body": [
				"window.addEventListener('pagereveal', (event) => {",
				"  console.log('Evento pagereveal acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando uma página é revelada."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window pageshow",
			"body": [
				"window.addEventListener('pageshow', (event) => {",
				"  console.log('Evento pageshow acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando uma página é mostrada."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window pageswap",
			"body": [
				"window.addEventListener('pageswap', (event) => {",
				"  console.log('Evento pageswap acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando uma página é trocada."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window paste",
			"body": [
				"window.addEventListener('paste', (event) => {",
				"  console.log('Evento paste acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando o conteúdo é colado."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window popstate",
			"body": [
				"window.addEventListener('popstate', (event) => {",
				"  console.log('Evento popstate acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando o estado da história ativa muda."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window rejectionhandled",
			"body": [
				"window.addEventListener('rejectionhandled', (event) => {",
				"  console.log('Evento rejectionhandled acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando uma promessa rejeitada é tratada."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window resize",
			"body": [
				"window.addEventListener('resize', (event) => {",
				"  console.log('Evento resize acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando a janela é redimensionada."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window scrollsnapchange Experimental",
			"body": [
				"window.addEventListener('scrollsnapchange', (event) => {",
				"  console.log('Evento scrollsnapchange acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando o snap de rolagem muda (experimental)."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window scrollsnapchanging Experimental",
			"body": [
				"window.addEventListener('scrollsnapchanging', (event) => {",
				"  console.log('Evento scrollsnapchanging acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando o snap de rolagem está mudando (experimental)."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window storage",
			"body": [
				"window.addEventListener('storage', (event) => {",
				"  console.log('Evento storage acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando há uma mudança na área de armazenamento."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window unhandledrejection",
			"body": [
				"window.addEventListener('unhandledrejection', (event) => {",
				"  console.log('Evento unhandledrejection acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando uma promessa rejeitada não é tratada."
		},
		"Evento                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "#3 Window unload Deprecated",
			"body": [
				"window.addEventListener('unload', (event) => {",
				"  console.log('Evento unload acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando a janela está para ser descarregada (obsoleto)."
		},
		"Evento{
			"scope": "javascript, typescript",
			"prefix": "#3 Window vrdisplaypresentchange",
			"body": [
				"window.addEventListener('vrdisplaypresentchange', (event) => {",
				"  console.log('Evento vrdisplaypresentchange acionado:', event);",
				"});"
			],
			"description": "Evento disparado quando a apresentação do display VR muda."
		},
		/*
		"DOM                                ": {
			"scope": "javascript, typescript",
			"prefix": "# TextDecoder",
			"body": [],
			"description": ""
		},
		"DOM                                 ": {
			"scope": "javascript, typescript",
			"prefix": "# TextEncoder",
			"body": [],
			"description": ""
		},
		"DOM                                  ": {
			"scope": "javascript, typescript",
			"prefix": "# TimeRanges",
			"body": [],
			"description": ""
		},
		"DOM                                   ": {
			"scope": "javascript, typescript",
			"prefix": "# TreeWalker",
			"body": [],
			"description": ""
		},
		"DOM                                    ": {
			"scope": "javascript, typescript",
			"prefix": "# XMLDocument",
			"body": [],
			"description": ""
		},*/
	/********************************* React Codigo **********************************************************/
		"0 ": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_React 1.0",
				"body": [
					"1 Conceito de usar componente dentro de outros\r\n2 html embutido com fragment\r\n3 Exportando e usando o componente importado\r\n4 Criando uma variavel com o style e entao os usando no componente em style prop\r\n5 Renderização condicional operador tenario e &&\r\n6 Renderizando listas\r\n7 Mantendo componente puro\r\n8 Componente com return abreviado e nao abreviado\r\n9 Codigo limpo, declarando os literals em variaveis e so depois nas props com jsx\r\n10 Usando variaveis javascript dentro do JSX e dentro das tag como texto\r\n11 Usando style elemento css diretamente no html JSX\r\n12 Usando children propriedade passada automaticamente\r\n13 Renderizando itens condicionalmente\r\n14 Renderizando itens condicionalmente e retornando null para nao renderizar\r\n15 Renderizando itens condicionalmente, mas colocando JSX diretamente na variavel\r\n16 Mantendo componente puro\r\n17 Usando nome da className em arquivo css\r\n18 Definindo style diretamente no react\r\n19 Renderização condicional\r\n20 Renderização condicional\r\n21 Responder a um evento\r\n22 Use status\r\n23 Use status autualizando 2 botoes ao mesmo tempo\r\n24 Exportação e nomeada no mesmo arquivo\r\n25 Respondendo a eventos\r\n26 **** export\r\n27 Atualizando objetos no estado\r\n28 Atualizando matrizes no estado\r\n29 Evento simples\r\n30 Evento simples inline, as duas formas\r\n31 Lendo adereços em manipuladores de eventos\r\n32 Passando manipuladores de eventos como adereços\r\n33 Nomeando adereços do manipulador de eventos\r\n34 Parando a propagação\r\n35 Renderizar"
							],
		"description": ""
		},
	
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 1.1",
			"body": [
				"// https://react.dev/learn/describing-the-ui",
				"function Profile() {",
				"  return (",
				"    <img",
				"      src='https://i.imgur.com/MK3eW3As.jpg'",
				"      alt='Katherine Johnson'",
				"    />",
				"  );",
				"}",
				"export default function Gallery() {",
				"  return (",
				"    <section>",
				"      <h1>Amazing scientists</h1>",
				"      <Profile />",
				"      <Profile />",
				"      <Profile />",
				"    </section>",
				"  );",
				"}",
			],
			"description": "Conceito de usar componente dentro de outros"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 1.2",
			"body": [
				"// https://react.dev/learn/describing-the-ui",
				"export default function TodoList() {",
				"  return (",
				"    <>",
				"      <h1>Hedy Lamarr's Todos</h1>",
				"      <img",
				"        src='https://i.imgur.com/yXOvdOSs.jpg'",
				"        alt='Hedy Lamarr'",
				"        className='photo'",
				"      />",
				"      <ul>",
				"        <li>Invent new traffic lights</li>",
				"        <li>Rehearse a movie scene</li>",
				"        <li>Improve spectrum technology</li>",
				"      </ul>",
				"    </>",
				"  );",
				"}",
			],
			"description": "html embutido com fragment"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 1.3",
			"body": [
				"```",
				"> **Gallery.js**",
				"```",
				"import Profile from './Profile.js';",
				"",
				"export default function Gallery() {",
				"  return (",
				"    <section>",
				"      <h1>Amazing scientists</h1>",
				"      <Profile />",
				"      <Profile />",
				"      <Profile />",
				"    </section>",
				"  );",
				"}",
				"```",
				"> **Profile.js**",
				"```",
				"export default function Profile() {",
				"  return (",
				"    <img",
				"      src='https://i.imgur.com/QIrZWGIs.jpg'",
				"      alt='Alan L. Hart'",
				"    />",
				"  );",
				"}",
			],
			"description": "Exportando e usando o componente importado"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 1.4",
			"body": [
				"const person = {",
				"  name: 'Gregorio Y. Zara',",
				"  theme: {",
				"    backgroundColor: 'black',",
				"    color: 'pink'",
				"  }",
				"};",
				"export default function TodoList() {",
				"  return (",
				"    <div style={person.theme}>",
				"      <h1>{person.name}'s Todos</h1>",
				"      <img",
				"        className='avatar'",
				"        src='https://i.imgur.com/7vQD0fPs.jpg'",
				"        alt='Gregorio Y. Zara'",
				"      />",
				"      <ul>",
				"        <li>Improve the videophone</li>",
				"        <li>Prepare aeronautics lectures</li>",
				"        <li>Work on the alcohol-fuelled engine</li>",
				"      </ul>",
				"    </div>",
				"  );",
				"}",
			],
			"description": "Criando uma variavel com o style e entao os usando no componente em style prop"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 1.5",
			"body": [
				"function Item({ name, isPacked }) {",
				"  return (",
				"    <li className='item'>",
				"      {name} {isPacked && '✔'}",
				"    </li>",
				"  );",
				"}",
				"",
				"export default function PackingList() {",
				"  return (",
				"    <section>",
				"      <h1>Sally Ride's Packing List</h1>",
				"      <ul>",
				"        <Item",
				"          isPacked={true}",
				"          name='Space suit'",
				"        />",
				"        <Item",
				"          isPacked={true}",
				"          name='Helmet with a golden leaf'",
				"        />",
				"        <Item",
				"          isPacked={false}",
				"          name='Photo of Tam'",
				"        />",
				"      </ul>",
				"    </section>",
				"  );",
				"}",
			],
			"description": "Renderização condicional operador tenario e &&"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 1.6",
			"body": [
				"```",
				"> App.js",
				"```",
				"import { people } from './data.js';",
				"import { getImageUrl } from './utils.js';",
				"",
				"export default function List() {",
				"  const listItems = people.map(person =>",
				"    <li key={person.id}>",
				"      <img",
				"        src={getImageUrl(person)}",
				"        alt={person.name}",
				"      />",
				"      <p>",
				"        <b>{person.name}:</b>",
				"        {' ' + person.profession + ' '}",
				"        known for {person.accomplishment}",
				"      </p>",
				"    </li>",
				"  );",
				"  return (",
				"    <article>",
				"      <h1>Scientists</h1>",
				"      <ul>{listItems}</ul>",
				"    </article>",
				"  );",
				"}",
				"```",
				"> Data.js",
				"```",
				"export const people = [{",
				" id: 0,",
				" name: 'Creola Katherine Johnson',",
				" profession: 'mathematician',",
				" accomplishment: 'spaceflight calculations',",
				" imageId: 'MK3eW3A'",
				"}, {",
				" id: 1,",
				" name: 'Mario José Molina-Pasquel Henríquez',",
				" profession: 'chemist',",
				" accomplishment: 'discovery of Arctic ozone hole',",
				" imageId: 'mynHUSa'",
				"}, {",
				" id: 2,",
				" name: 'Mohammad Abdus Salam',",
				" profession: 'physicist',",
				" accomplishment: 'electromagnetism theory',",
				" imageId: 'bE7W1ji'",
				"}, {",
				" id: 3,",
				" name: 'Percy Lavon Julian',",
				" profession: 'chemist',",
				" accomplishment: 'pioneering cortisone drugs, steroids and birth control pills',",
				" imageId: 'IOjWm71'",
				"}, {",
				" id: 4,",
				" name: 'Subrahmanyan Chandrasekhar',",
				" profession: 'astrophysicist',",
				" accomplishment: 'white dwarf star mass calculations',",
				" imageId: 'lrWQx8l'",
				"}];",
				"```",
				"> utils.js",
				"```",
				"export function getImageUrl(person) {",
				" return (",
				"  'https://i.imgur.com/' +",
				"   person.imageId +",
				"  's.jpg'",
				" );",
				"}"
			],
			"description": "Renderizando listas"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 1.7",
			"body": [
				"function Cup({ guest }) {",
				"  return <h2>Tea cup for guest #{guest}</h2>;",
				"}",
				"",
				"export default function TeaSet() {",
				"  return (",
				"    <>",
				"      <Cup guest={1} />",
				"      <Cup guest={2} />",
				"      <Cup guest={3} />",
				"    </>",
				"  );",
				"}",
			],
			"description": "Mantendo componente puro"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 1.8",
			"body": [
				"```",
				"> Return componente de linha unica",
				"```",
				"return <img src='https://i.imgur.com/MK3eW3As.jpg' alt='Katherine Johnson' />;",
				"",
				"return (",
				"  <div>",
				"    <img src='https://i.imgur.com/MK3eW3As.jpg' alt='Katherine Johnson' />",
				"  </div>",
				");",
			],
			"description": "Componente com return abreviado e nao abreviado"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 1.9",
			"body": [
				"export default function Avatar() {",
				"  const avatar = 'https://i.imgur.com/7vQD0fPs.jpg';",
				"  const description = 'Gregorio Y. Zara';",
				"  return (",
				"    <img",
				"      className='avatar'",
				"      src={avatar}",
				"      alt={description}",
				"    />",
				"  );",
				"}",
			],
			"description": "Codigo limpo, declarando os literals em variaveis e so depois nas props com jsx"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 2.1",
			"body": [
				"export default function TodoList() {",
				"  const name = 'Gregorio Y. Zara';",
				"  return (",
				"    <h1>{name}'s To Do List</h1>",
				"  );",
				"}",
			],
			"description": "Usando variaveis javascript dentro do JSX e dentro das tag como texto"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 2.2",
			"body": [
				"export default function TodoList() {",
				"  return (",
				"    <ul style={{",
				"      backgroundColor: 'black',",
				"      color: 'pink'",
				"    }}>",
				"      <li>Improve the videophone</li>",
				"      <li>Prepare aeronautics lectures</li>",
				"      <li>Work on the alcohol-fuelled engine</li>",
				"    </ul>",
				"  );",
				"}",
			],
			"description": "Usando style elemento css diretamente no html JSX"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 2.3",
			"body": [
				"```",
				"> App.js",
				"```",
				"import Avatar from './Avatar.js';",
				"",
				"function Card({ children }) {",
				"  return (",
				"    <div className='card'>",
				"      {children}",
				"    </div>",
				"  );",
				"}",
				"",
				"export default function Profile() {",
				"  return (",
				"    <Card>",
				"      <Avatar",
				"        size={100}",
				"        person={{ ",
				"          name: 'Katsuko Saruhashi',",
				"          imageId: 'YfeOqp2'",
				"        }}",
				"      />",
				"    </Card>",
				"  );",
				"}",
				"```",
				"> Avatar.js",
				"```",
				"import { getImageUrl } from './utils.js';",
				"",
				"export default function Avatar({ person, size }) {",
				"  return (",
				"    <img",
				"      className='avatar'",
				"      src={getImageUrl(person)}",
				"      alt={person.name}",
				"      width={size}",
				"      height={size}",
				"    />",
				"  );",
				"}",
				"```",
				"> utils.js",
				"```",
				"export function getImageUrl(person, size = 's') {",
				"  return (",
				"    'https://i.imgur.com/' +",
				"    person.imageId +",
				"    size +",
				"    '.jpg'",
				"  );",
				"}",
			],
			"description": "Usando children propriedade passada automaticamente"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 2.4",
			"body": [
				"function Item({ name, isPacked }) {",
				"  if (isPacked) {",
				"    return <li className='item'>{name} ✔</li>;",
				"  }",
				"  return <li className='item'>{name}</li>;",
				"}",
				"",
				"export default function PackingList() {",
				"  return (",
				"    <section>",
				"      <h1>Sally Ride's Packing List</h1>",
				"      <ul>",
				"        <Item ",
				"          isPacked={true} ",
				"          name='Space suit' ",
				"        />",
				"        <Item ",
				"          isPacked={true} ",
				"          name='Helmet with a golden leaf'",
				"        />",
				"        <Item ",
				"          isPacked={false} ",
				"          name='Photo of Tam'",
				"        />",
				"      </ul>",
				"    </section>",
				"  );",
				"}",
			],
			"description": "Renderizando itens condicionalmente"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 2.5",
			"body": [
				"function Item({ name, isPacked }) {",
				"  if (isPacked) {",
				"    return null;",
				"  }",
				"  return <li className='item'>{name}</li>;",
				"}",
				"",
				"export default function PackingList() {",
				"  return (",
				"    <section>",
				"      <h1>Sally Ride's Packing List</h1>",
				"      <ul>",
				"        <Item ",
				"          isPacked={true} ",
				"          name='Space suit'",
				"        />",
				"        <Item ",
				"          isPacked={true} ",
				"          name='Helmet with a golden leaf'",
				"        />",
				"        <Item ",
				"          isPacked={false} ",
				"          name='Photo of Tam'",
				"        />",
				"      </ul>",
				"    </section>",
				"  );",
				"}",
			],
			"description": "Renderizando itens condicionalmente e retornando null para nao renderizar"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 2.6",
			"body": [
				"function Item({ name, isPacked }) {",
				"  let itemContent = name;",
				"  if (isPacked) {",
				"    itemContent = (",
				"      <del>",
				"        {name + '✔'}",
				"      </del>",
				"    );",
				"  }",
				"  return (",
				"    <li className='item'>",
				"      {itemContent}",
				"    </li>",
				"  );",
				"}",
				"",
				"export default function PackingList() {",
				"  return (",
				"    <section>",
				"      <h1>Sally Ride's Packing List</h1>",
				"      <ul>",
				"        <Item ",
				"          isPacked={true} ",
				"          name='Space suit' ",
				"        />",
				"        <Item ",
				"          isPacked={true} ",
				"          name='Helmet with a golden leaf' ",
				"        />",
				"        <Item ",
				"          isPacked={false} ",
				"          name='Photo of Tam'",
				"        />",
				"      </ul>",
				"    </section>",
				"  );",
				"}",
			],
			"description": "Renderizando itens condicionalmente, mas colocando JSX diretamente na variavel"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 2.7",
			"body": [
				"function Recipe({ drinkers }) {",
				"  return (",
				"    <ol>",
				"      <li>Boil {drinkers} cups of water.</li>",
				"      <li>Add {drinkers} spoons of tea and {0.5 * drinkers} spoons of spice.</li>",
				"      <li>Add {0.5 * drinkers} cups of milk to boil and sugar to taste.</li>",
				"    </ol>",
				"  );",
				"}",
				"",
				"export default function App() {",
				"  return (",
				"    <section>",
				"      <h1>Spiced Chai Recipe</h1>",
				"      <h2>For two</h2>",
				"      <Recipe drinkers={2} />",
				"      <h2>For a gathering</h2>",
				"      <Recipe drinkers={4} />",
				"    </section>",
				"  );",
				"}",
			],
			"description": "Mantendo componente puro"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 2.8",
			"body": [
				"js arquivo",
				"<img className='avatar' />",
				"",
				"css arquivo",
				".avatar {",
				"  border-radius: 50%;",
				"}",
			],
			"description": "Usando nome da className em arquivo css"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 2.9",
			"body": [
				"const user = {",
				"  name: 'Hedy Lamarr',",
				"  imageUrl: 'https://i.imgur.com/yXOvdOSs.jpg',",
				"  imageSize: 90,",
				"};",
				"",
				"export default function Profile() {",
				"  return (",
				"    <>",
				"      <h1>{user.name}</h1>",
				"      <img",
				"        className='avatar'",
				"        src={user.imageUrl}",
				"        alt={'Photo of ' + user.name}",
				"        style={{",
				"          width: user.imageSize,",
				"          height: user.imageSize",
				"        }}",
				"      />",
				"    </>",
				"  );",
				"}",
			],
			"description": "Definindo style diretamente no react"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 3.1",
			"body": [
				"const listItems = products.map(product =>",
				"  <li key={product.id}>",
				"    {product.title}",
				"  </li>",
				");",
				"",
				"return (",
				"  <ul>{listItems}</ul>",
				");",
			],
			"description": "Renderização condicional"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 3.2",
			"body": [
				"const products = [",
				"  { title: 'Cabbage', isFruit: false, id: 1 },",
				"  { title: 'Garlic', isFruit: false, id: 2 },",
				"  { title: 'Apple', isFruit: true, id: 3 },",
				"];",
				"",
				"export default function ShoppingList() {",
				"  const listItems = products.map(product =>",
				"    <li",
				"      key={product.id}",
				"      style={{",
				"        color: product.isFruit ? 'magenta' : 'darkgreen'",
				"      }}",
				"    >",
				"      {product.title}",
				"    </li>",
				"  );",
				"",
				"  return (",
				"    <ul>{listItems}</ul>",
				"  );",
				"}",
			],
			"description": "Renderização condicional"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 3.3",
			"body": [
				"function MyButton() {",
				"  function handleClick() {",
				"    alert('You clicked me!');",
				"  }",
				"",
				"  return (",
				"    <button onClick={handleClick}>",
				"      Click me",
				"    </button>",
				"  );",
				"}",
			],
			"description": "Responder a um evento"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 3.4",
			"body": [
				"import { useState } from 'react';",
				"",
				"export default function MyApp() {",
				"  return (",
				"    <div>",
				"      <h1>Counters that update separately</h1>",
				"      <MyButton />",
				"      <MyButton />",
				"    </div>",
				"  );",
				"}",
				"",
				"function MyButton() {",
				"  const [count, setCount] = useState(0);",
				"",
				"  function handleClick() {",
				"    setCount(count + 1);",
				"  }",
				"",
				"  return (",
				"    <button onClick={handleClick}>",
				"      Clicked {count} times",
				"    </button>",
				"  );",
				"}",
			],
			"description": "Use status"
		},
		{
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 3.5",
			"body": [
				"import { useState } from 'react';",
				"",
				"export default function MyApp() {",
				"  const [count, setCount] = useState(0);",
				"",
				"  function handleClick() {",
				"    setCount(count + 1);",
				"  }",
				"",
				"  return (",
				"    <div>",
				"      <h1>Counters that update together</h1>",
				"      <MyButton count={count} onClick={handleClick} />",
				"      <MyButton count={count} onClick={handleClick} />",
				"    </div>",
				"  );",
				"}",
				"",
				"function MyButton({ count, onClick }) {",
				"  return (",
				"    <button onClick={onClick}>",
				"      Clicked {count} times",
				"    </button>",
				"  );",
				"}",
			],
			"description": "Use status autualizando 2 botoes ao mesmo tempo"
		},
		"24 ": {
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 3.6",
			"body": [
				"// Arquivo App.js.",
				"import Gallery from './Gallery.js';",
				"import { Profile } from './Gallery.js';",
				"",
				"export default function App() {",
				"  return (",
				"    <Profile />",
				"  );",
				"}",
				"",
				"export function Profile() {",
				"  return (",
				"    <img",
				"      src='https://i.imgur.com/QIrZWGIs.jpg'",
				"      alt='Alan L. Hart'",
				"    />",
				"  );",
				"}",
				"",
				"export default function Gallery() {",
				"  return (",
				"    <section>",
				"      <h1>Amazing scientists</h1>",
				"      <Profile />",
				"      <Profile />",
				"      <Profile />",
				"    </section>",
				"  );",
				"}",
			],
			"description": "Exportação e nomeada no mesmo arquivo"
		},
		"25   ": {
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 3.7",
			"body": [
				"export default function App() {\n  return (\n    <Toolbar\n      onPlayMovie={() => alert('Playing!')}\n      onUploadImage={() => alert('Uploading!')}\n    />\n  );\n}\n\nfunction Toolbar({ onPlayMovie, onUploadImage }) {\n  return (\n    <div>\n      <Button onClick={onPlayMovie}>\n        Play Movie\n      </Button>\n      <Button onClick={onUploadImage}>\n        Upload Image\n      </Button>\n    </div>\n  );\n}\n\nfunction Button({ onClick, children }) {\n  return (\n    <button onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n"
			],
			"description": "Respondendo a eventos"
		},
		"26    ": {
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 3.8",
			"body": [
				"```",
				"Data.js",
				"```",
				"export const sculptureList = [{\n  name: 'Homenaje a la Neurocirugía',\n  artist: 'Marta Colvin Andrade',\n  description: 'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',\n  url: 'https://i.imgur.com/Mx7dA2Y.jpg',\n  alt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'\n}, {\n  name: 'Floralis Genérica',\n  artist: 'Eduardo Catalano',\n  description: 'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',\n  url: 'https://i.imgur.com/ZF6s192m.jpg',\n  alt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n}, {\n  name: 'Eternal Presence',\n  artist: 'John Woodrow Wilson',\n  description: 'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',\n  url: 'https://i.imgur.com/aTtVpES.jpg',\n  alt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'\n}, {\n  name: 'Moai',\n  artist: 'Unknown Artist',\n  description: 'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',\n  url: 'https://i.imgur.com/RCwLEoQm.jpg',\n  alt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'\n}, {\n  name: 'Blue Nana',\n  artist: 'Niki de Saint Phalle',\n  description: 'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',\n  url: 'https://i.imgur.com/Sd1AgUOm.jpg',\n  alt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n}, {\n  name: 'Ultimate Form',\n  artist: 'Barbara Hepworth',\n  description: 'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',\n  url: 'https://i.imgur.com/2heNQDcm.jpg',\n  alt: 'A tall sculpture made of three elements stacked on each other reminding of a human figure.'\n}, {\n  name: 'Cavaliere',\n  artist: 'Lamidi Olonade Fakeye',\n  description: \"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",\n  url: 'https://i.imgur.com/wIdGuZwm.png',\n  alt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n}, {\n  name: 'Big Bellies',\n  artist: 'Alina Szapocznikow',\n  description: \"Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.\",\n  url: 'https://i.imgur.com/AlHTAdDm.jpg',\n  alt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n}, {\n  name: 'Terracotta Army',\n  artist: 'Unknown Artist',\n  description: 'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',\n  url: 'https://i.imgur.com/HMFmH6m.jpg',\n  alt: '12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.'\n}, {\n  name: 'Lunar Landscape',\n  artist: 'Louise Nevelson',\n  description: 'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism’s geometric abstraction of space and form.',\n  url: 'https://i.imgur.com/rN7hY6om.jpg',\n  alt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n}, {\n  name: 'Aureole',\n  artist: 'Ranjani Shettar',\n  description: 'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',\n  url: 'https://i.imgur.com/okTpbHhm.jpg',\n  alt: 'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.'\n}, {\n  name: 'Hippos',\n  artist: 'Taipei Zoo',\n  description: 'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',\n  url: 'https://i.imgur.com/6o5Vuyu.jpg',\n  alt: 'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.'\n}];",
				"",
				"```",
				"App.js",
				"```",
				"import { useState } from 'react';\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n  const [index, setIndex] = useState(0);\n  const [showMore, setShowMore] = useState(false);\n  const hasNext = index < sculptureList.length - 1;\n\n  function handleNextClick() {\n    if (hasNext) {\n      setIndex(index + 1);\n    } else {\n      setIndex(0);\n    }\n  }\n\n  function handleMoreClick() {\n    setShowMore(!showMore);\n  }\n\n  let sculpture = sculptureList[index];\n  return (\n    <>\n      <button onClick={handleNextClick}>\n        Next\n      </button>\n      <h2>\n        <i>{sculpture.name} </i>\n        by {sculpture.artist}\n      </h2>\n      <h3>\n        ({index + 1} of {sculptureList.length})\n      </h3>\n      <button onClick={handleMoreClick}>\n        {showMore ? 'Hide' : 'Show'} details\n      </button>\n      {showMore && <p>{sculpture.description}</p>}\n      <img\n        src={sculpture.url}\n        alt={sculpture.alt}\n      />\n    </>\n  );\n}"
			],
			"description": "export"
		},
		"27     ": {
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 3.9",
			"body": [
				"import { useState } from 'react';\n\nexport default function Form() {\n  const [person, setPerson] = useState({\n    name: 'Niki de Saint Phalle',\n    artwork: {\n      title: 'Blue Nana',\n      city: 'Hamburg',\n      image: 'https://i.imgur.com/Sd1AgUOm.jpg',\n    }\n  });\n\n  function handleNameChange(e) {\n    setPerson({\n      ...person,\n      name: e.target.value\n    });\n  }\n\n  function handleTitleChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        title: e.target.value\n      }\n    });\n  }\n\n  function handleCityChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        city: e.target.value\n      }\n    });\n  }\n\n  function handleImageChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        image: e.target.value\n      }\n    });\n  }\n\n  return (\n    <>\n      <label>\n        Name:\n        <input\n          value={person.name}\n          onChange={handleNameChange}\n        />\n      </label>\n      <label>\n        Title:\n        <input\n          value={person.artwork.title}\n          onChange={handleTitleChange}\n        />\n      </label>\n      <label>\n        City:\n        <input\n          value={person.artwork.city}\n          onChange={handleCityChange}\n        />\n      </label>\n      <label>\n        Image:\n        <input\n          value={person.artwork.image}\n          onChange={handleImageChange}\n        />\n      </label>\n      <p>\n        <i>{person.artwork.title}</i>\n        {' by '}\n        {person.name}\n        <br />\n        (located in {person.artwork.city})\n      </p>\n      <img\n        src={person.artwork.image}\n        alt={person.artwork.title}\n      />\n    </>\n  );\n}"
			],
			"description": "Atualizando objetos no estado"
		},
		"28      ": {
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 4.1",
			"body": [
				"import { useState } from 'react';\n\nconst initialList = [\n  { id: 0, title: 'Big Bellies', seen: false },\n  { id: 1, title: 'Lunar Landscape', seen: false },\n  { id: 2, title: 'Terracotta Army', seen: true },\n];\n\nexport default function BucketList() {\n  const [list, setList] = useState(\n    initialList\n  );\n\n  function handleToggle(artworkId, nextSeen) {\n    setList(list.map(artwork => {\n      if (artwork.id === artworkId) {\n        return { ...artwork, seen: nextSeen };\n      } else {\n        return artwork;\n      }\n    }));\n  }\n\n  return (\n    <>\n      <h1>Art Bucket List</h1>\n      <h2>My list of art to see:</h2>\n      <ItemList\n        artworks={list}\n        onToggle={handleToggle} />\n    </>\n  );\n}\n\nfunction ItemList({ artworks, onToggle }) {\n  return (\n    <ul>\n      {artworks.map(artwork => (\n        <li key={artwork.id}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={artwork.seen}\n              onChange={e => {\n                onToggle(\n                  artwork.id,\n                  e.target.checked\n                );\n              }}\n            />\n            {artwork.title}\n          </label>\n        </li>\n      ))}\n    </ul>\n  );\n}"
			],
			"description": "Atualizando matrizes no estado"
		},
		"29       ": {
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 4.2",
			"body": [
				"export default function Button() {\n  function handleClick() {\n    alert('You clicked me!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me\n    </button>\n  );\n}"
			],
			"description": "Evento simples"
		},
		"30         ": {
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 4.3",
			"body": [
				"<button onClick={function handleClick() {\r\n  alert('You clicked me!');\r\n}}>\r\n\r\n<button onClick={() => {\r\n  alert('You clicked me!');\r\n}}>"
			],
			"description": "Evento simples inline, as duas formas"
		},
		"31        ": {
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 4.4",
			"body": [
				"function AlertButton({ message, children }) {\n  return (\n    <button onClick={() => alert(message)}>\n      {children}\n    </button>\n  );\n}\n\nexport default function Toolbar() {\n  return (\n    <div>\n      <AlertButton message=\"Playing!\">\n        Play Movie\n      </AlertButton>\n      <AlertButton message=\"Uploading!\">\n        Upload Image\n      </AlertButton>\n    </div>\n  );\n}"
			],
			"description": "Lendo adereços em manipuladores de eventos"
		},
		"32": {
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 4.5",
			"body": [
				"function Button({ onClick, children }) {\n  return (\n    <button onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\nfunction PlayButton({ movieName }) {\n  function handlePlayClick() {\n    alert(`Playing ${movieName}!`);\n  }\n\n  return (\n    <Button onClick={handlePlayClick}>\n      Play \"{movieName}\"\n    </Button>\n  );\n}\n\nfunction UploadButton() {\n  return (\n    <Button onClick={() => alert('Uploading!')}>\n      Upload Image\n    </Button>\n  );\n}\n\nexport default function Toolbar() {\n  return (\n    <div>\n      <PlayButton movieName=\"Kiki's Delivery Service\" />\n      <UploadButton />\n    </div>\n  );\n}\n"
			],
			"description": "Passando manipuladores de eventos como adereços"
		},
		"33          ": {
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 4.6",
			"body": [
				"function Button({ onSmash, children }) {\n  return (\n    <button onClick={onSmash}>\n      {children}\n    </button>\n  );\n}\n\nexport default function App() {\n  return (\n    <div>\n      <Button onSmash={() => alert('Playing!')}>\n        Play Movie\n      </Button>\n      <Button onSmash={() => alert('Uploading!')}>\n        Upload Image\n      </Button>\n    </div>\n  );\n}\n"
			],
			"description": "Nomeando adereços do manipulador de eventos"
		},
		"34           ": {
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 4.7",
			"body": [
				"function Button({ onClick, children }) {\n  return (\n    <button onClick={e => {\n      e.stopPropagation();\n      onClick();\n    }}>\n      {children}\n    </button>\n  );\n}\n\nexport default function Toolbar() {\n  return (\n    <div className=\"Toolbar\" onClick={() => {\n      alert('You clicked on the toolbar!');\n    }}>\n      <Button onClick={() => alert('Playing!')}>\n        Play Movie\n      </Button>\n      <Button onClick={() => alert('Uploading!')}>\n        Upload Image\n      </Button>\n    </div>\n  );\n}"
			],
			"description": "Parando a propagação"
		},
		"35            ": {
			"scope": "javascriptreact, javascript, typescript",
			"prefix": "_React 4.8",
			"body": [
				"```",
				"gallery",
				"```",
				"export default function Gallery() {\n  return (\n    <section>\n      <h1>Inspiring Sculptures</h1>\n      <Image />\n      <Image />\n      <Image />\n    </section>\n  );\n}\n\nfunction Image() {\n  return (\n    <img\n      src=\"https://i.imgur.com/ZF6s192.jpg\"\n      alt=\"'Floralis Genérica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals\"\n    />\n  );\n}\n",
				"```",
				"Index.js",
				"```",
				"import Gallery from './Gallery.js';\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'))\nroot.render(<Gallery />);"
			],
			"description": "Renderizar"
		},
		/*"jsx": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
				"body": [
							],
		"description": ""
		},*/
	/********************************* Express Library *******************************************************/
		"express": {
			"scope": "javascript",
			"prefix": "#lib",
			"body": [
				"```",
				"> express()",
				"- express.json()",
				"- express.raw()",
				"- express.Router()",
				"- express.static()",
				"- express.text()",
				"- express.urlencoded()",
				"> **Application**",
				"- **Properties**",
				"- app.locals",
				"- app.mountpath",
				"- **Events**",
				"- mount",
				"- **Methods**",
				"- app.all()",
				"- app.delete()",
				"- app.disable()",
				"- app.disabled()",
				"- app.enable()",
				"- app.enabled()",
				"- app.engine()",
				"- app.get()",
				"- app.get()",
				"- app.listen()",
				"- app.METHOD()",
				"- app.param()",
				"- app.path()",
				"- app.post()",
				"- app.put()",
				"- app.render()",
				"- app.route()",
				"- app.set()",
				"- app.use()",
				"> **Request**",
				"- **Properties**",
				"- req.app",
				"- req.baseUrl",
				"- req.body",
				"- req.cookies",
				"- req.fresh",
				"- req.hostname",
				"- req.ip",
				"- req.ips",
				"- req.method",
				"- req.originalUrl",
				"- req.params",
				"- req.path",
				"- req.protocol",
				"- req.query",
				"- req.route",
				"- req.secure",
				"- req.signedCookies",
				"- req.stale",
				"- req.subdomains",
				"- req.xhr",
				"- **Methods**",
				"- req.accepts()",
				"- req.acceptsCharsets()",
				"- req.acceptsEncodings()",
				"- req.acceptsLanguages()",
				"- req.get()",
				"- req.is()",
				"- req.param()",
				"- req.range()",
				"> **Response**",
				"- **Properties**",
				"- res.app",
				"- res.headersSent",
				"- res.locals",
				"- **Methods**",
				"- res.append()",
				"- res.attachment()",
				"- res.cookie()",
				"- res.clearCookie()",
				"- res.download()",
				"- res.end()",
				"- res.format()",
				"- res.get()",
				"- res.json()",
				"- res.jsonp()",
				"- res.links()",
				"- res.location()",
				"- res.redirect()",
				"- res.render()",
				"- res.send()",
				"- res.sendFile()",
				"- res.sendStatus()",
				"- res.set()",
				"- res.status()",
				"- res.type()",
				"- res.vary()",
				"> **Router**",
				"- **Methods**",
				"- router.all()",
				"- router.METHOD()",
				"- router.param()",
				"- router.route()",
				"- router.use()",
				"```",
			],
			"description": "last update outubro 2023"
		},
	/********************************* Express Codigo ********************************************************/
		"0  ": {
		"scope": "javascript",
		"prefix": "_Express 1.0",
			"body": [
					"1 Programa mais basico express\r\n2 Servindo arquivos static\r\n3 Chamando next() metodo com mais de uma função de mindlware empilhada na mesma solicitação get\r\n4 Uma matriz de funções de retorno de chamada podem manipular uma rota\r\n5 Uma combinação de funções independentes e matrizes de funções podem manipular uma rota\r\n6 manipuladores de rotas encadeáveis que são definidos usando app.route()\r\n7 Sem texto\r\n8 Carregando uma função em app.use antes de usar get\r\n9 Alterando uma request no app.use antes de usar get\r\n10 Funcao de mindware diretamente no app.use sendo que a função e anonima\r\n11 App.use com um caminho especificado\r\n12 app.use com funções empilhada de mindware"
						],
		"description": ""
		},
		{
			"scope": "javascript",
			"prefix": "_Express 1.1",
			"body": [
				"const express = require('express')",
				"const app = express()",
				"const port = 3000",
				"",
				"app.get('/', (req, res) => {",
				"  res.send('Hello World!')",
				"})",
				"",
				"app.listen(port, () => {",
				"  console.log('Example app listening on port $ {port}')",
				"})",
			],
			"description": "Programa mais basico express"
		},
		{
			"scope": "javascript",
			"prefix": "_Express 1.2",
			"body": [
				"app.use(express.static('public'));",
				"app.use('/static', express.static('public'));",
				"app.use('/static', express.static(__dirname + '/public'));",
			],
			"description": "Servindo arquivos static"
		},
		{
			"scope": "javascript",
			"prefix": "_Express 1.3",
			"body": [
				"app.get('/example/b', function (req, res, next) {",
				"  console.log('the response will be sent by the next function ...');",
				"  next();",
				"",
				"}, function (req, res) {",
				"  res.send('Hello from B!');",
				"});",
			],
			"description": "Chamando next() metodo com mais de uma função de mindlware empilhada na mesma solicitação get"
		},
		{
			"scope": "javascript",
			"prefix": "_Express 1.4",
			"body": [
				"var cb0 = function (req, res, next) {",
				"  console.log('CB0');",
				"  next();",
				"}",
				"",
				"var cb1 = function (req, res, next) {",
				"  console.log('CB1');",
				"  next();",
				"}",
				"",
				"var cb2 = function (req, res) {",
				"  res.send('Hello from C!');",
				"}",
				"",
				"app.get('/example/c', [cb0, cb1, cb2]);",
			],
			"description": "Uma matriz de funções de retorno de chamada podem manipular uma rota"
		},
		"5                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ": {
			"scope": "javascript",
			"prefix": "_Express 1.5",
			"body": [
				"var cb0 = function (req, res, next) {",
				"  console.log('CB0');",
				"  next();",
				"}",
				"",
				"var cb1 = function (req, res, next) {",
				"  console.log('CB1');",
				"  next();",
				"}",
				"",
				"app.get('/example/d', [cb0, cb1], function (req, res, next) {",
				"  console.log('the response will be sent by the next function ...');",
				"  next();",
				"",
				"}, function (req, res) {",
				"  res.send('Hello from D!');",
				"});",
			],
			"description": "Uma combinação de funções independentes e matrizes de funções podem manipular uma rota"
		},
		{
			"scope": "javascript",
			"prefix": "_Express 1.6",
			"body": [
				"app.route('/book')",
				"  .get(function(req, res) {",
				"    res.send('Get a random book');",
				"  })",
				"  .post(function(req, res) {",
				"    res.send('Add a book');",
				"  })",
				"  .put(function(req, res) {",
				"    res.send('Update the book');",
				"  });",
			],
			"description": "manipuladores de rotas encadeáveis que são definidos usando app.route()"
		},
		{
			"scope": "javascript",
			"prefix": "_Express 1.7",
			"body": [
				"```",
				"> **Arquivo Router**",
				"```",
				"var express = require('express');",
				"var router = express.Router();",
				"",
				"/* middleware that is specific to this router*/",
				"router.use(function timeLog(req, res, next) {",
				"  console.log('Time: ', Date.now());",
				"  next();",
				"});",
				"/* define the home page route*/",
				"router.get('/', function(req, res) {",
				"  res.send('Birds home page');",
				"});",
				"/* define the about route*/",
				"router.get('/about', function(req, res) {",
				"  res.send('About birds');",
				"});",
				"",
				"module.exports = router;",
				"",
				"```",
				"> **Arquivo Aplicativo**",
				"```",
				"var birds = require('./birds');",
				"...",
				"app.use('/birds', birds);",
			],
			"description": "Sem texto"
		},
		"8                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ": {
			"scope": "javascript",
			"prefix": "_Express 1.8",
			"body": [
				"var express = require('express');",
				"var app = express();",
				"",
				"var myLogger = function (req, res, next) {",
				"  console.log('LOGGED');",
				"  next();",
				"};",
				"",
				"app.use(myLogger);",
				"",
				"app.get('/', function (req, res) {",
				"  res.send('Hello World!');",
				"});",
				"",
				"app.listen(3000);",
			],
			"description": "Carregando uma função em app.use antes de usar get"
		},
		{
			"scope": "javascript",
			"prefix": "_Express 1.9",
			"body": [
				"var express = require('express');",
				"var app = express();",
				"",
				"var requestTime = function (req, res, next) {",
				"  req.requestTime = Date.now();",
				"  next();",
				"};",
				"",
				"app.use(requestTime);",
				"",
				"app.get('/', function (req, res) {",
				"  var responseText = 'Hello World!';",
				"  responseText += 'Requested at: ' + req.requestTime + '';",
				"  res.send(responseText);",
				"});",
				"",
				"app.listen(3000);",
			],
			"description": "Alterando uma request no app.use antes de usar get"
		},
		{
			"scope": "javascript",
			"prefix": "_Express 2.1",
			"body": [
				"var app = express();",
				"",
				"app.use(function (req, res, next) {",
				"  console.log('Time:', Date.now());",
				"  next();",
				"});",
			],
			"description": "Funcao de mindware diretamente no app.use sendo que a função e anonima"
		},
		{
			"scope": "javascript",
			"prefix": "_Express 2.2",
			"body": [
				"app.use('/user/:id', function (req, res, next) {",
				"  console.log('Request Type:', req.method);",
				"  next();",
				"});",
			],
			"description": "App.use com um caminho especificado"
		},
		{
			"scope": "javascript",
			"prefix": "_Express 2.3",
			"body": [
				"app.use('/user/:id', function(req, res, next) {",
				"console.log('Request URL:', req.originalUrl);",
				"next();",
				"}, function (req, res, next) {",
				"console.log('Request Type:', req.method);",
				"next();",
				"});",
			],
			"description": "app.use com funções empilhada de mindware"
		},
		/*"": {
		"scope": "javascript",
		"prefix": "_express",
			"body": [
					.
						],
		"description": ""
		},*/
	/********************************* SQL Library ***********************************************************/
		"sql   ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 ADD",
			"body": [
				"ALTER TABLE Customers\r\nADD Email varchar(255);"
			],
			"description": "Adiciona uma coluna em uma tabela existente"
		},
		"sql ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 ADD CONSTRAINT ",
			"body": ["ALTER TABLE Persons\r\nADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);"],
			"description": "Adiciona uma restrição depois que uma tabela já foi criada"
		},
		"sql  ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 ALL",
			"body": ["SELECT ProductName\r\nFROM Products\r\nWHERE ProductID = ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);"],
			"description": "Retorna verdadeiro se todos os valores da subconsulta atenderem à condição"
		},
		"sql    ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 ALTER",
			"body": ["ALTER TABLE Customers\r\nADD Email varchar(255);\r\n\r\nALTER TABLE Customers\r\nDROP COLUMN Email;\r\n\r\nALTER TABLE Employees\r\nALTER COLUMN BirthDate year;"],
			"description": "Adiciona, exclui ou modifica colunas em uma tabela ou altera o tipo de dados de uma coluna em uma tabela"
		},
		"sql     ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 ALTER COLUMN",
			"body": ["ALTER TABLE Employees\r\nALTER COLUMN BirthDate year;"],
			"description": "Altera o tipo de dados de uma coluna em uma tabela"
		},
		"sql      ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 ALTER TABLE⭐",
			"body": [
				"ALTER TABLE Customers\r\nADD Email varchar(255);\r\n\r\nALTER TABLE Customers\r\nDROP COLUMN Email;\r\n\r\nALTER TABLE Employees\r\nALTER COLUMN BirthDate year;"
			],
			"description": "Adiciona, exclui ou modifica colunas em uma tabela"
		},
		"sql       ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 AND☄️",
			"body": [
				"SELECT * FROM Customers\r\nWHERE Country = 'Germany'\r\nAND City = 'Berlin'\r\nAND PostalCode > 12000;"
			],
			"description": "Inclui apenas linhas onde ambas as condições são verdadeiras"
		},
		"sql        ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 ANY",
			"body": [
				"SELECT ProductName\r\nFROM Products\r\nWHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);"
				],
			"description": "Retorna verdadeiro se algum dos valores da subconsulta atender à condição"
		},
		"sql         ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 AS",
			"body": [],
			"description": "Renomeia uma coluna ou tabela com um alias "
		},
		"sql          ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 ASC",
			"body": [],
			"description": "Classifica o conjunto de resultados em ordem crescente, sql"
		},
		"sql           ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 BACKUP DATABASE",
			"body": [],
			"description": "Cria um backup de um banco de dados existente, sql"
		},
		"sql            ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 BETWEEN☄️",
			"body": [
				"SELECT * FROM Products\r\nWHERE Price BETWEEN 10 AND 20\r\nAND CategoryID IN (1,2,3);"
			],
			"description": "Seleciona valores dentro de um determinado intervalo, sql"
		},
		"sql             ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 CASE",
			"body": [],
			"description": "Cria diferentes resultados com base nas condições, sql"
		},
		"sql              ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 CHECK",
			"body": [],
			"description": "Uma restrição que limita o valor que pode ser colocado em uma coluna"
		},
		"sql               ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 COLUMN",
			"body": [],
			"description": "Altera o tipo de dados de uma coluna ou exclui uma coluna de uma tabela"
		},
		"sql                ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 CONSTRAINT",
			"body": [],
			"description": "Adiciona ou exclui uma restrição"
		},
		"sql                 ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 CREATE",
			"body": [],
			"description": "Cria um banco de dados, índice, visualização, tabela ou procedimento"
		},
		"sql                  ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 CREATE DATABASE⭐",
			"body": [],
			"description": "Cria um novo banco de dados SQL"
		},
		"sql                   ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 CREATE INDEX⭐",
			"body": [],
			"description": "Cria um índice em uma tabela (permite valores duplicados)"
		},
		"sql                    ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 CREATE OR REPLACE VIEW",
			"body": [],
			"description": "Atualiza uma visualização"
		},
		"sql                     ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 CREATE TABLE⭐",
			"body": [],
			"description": "Cria uma nova tabela no banco de dados"
		},
		"sql                      ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 CREATE PROCEDURE",
			"body": [],
			"description": "Cria um procedimento armazenado"
		},
		"sql                       ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 CREATE UNIQUE INDEX",
			"body": [],
			"description": "Cria um índice exclusivo em uma tabela (sem valores duplicados)"
		},
		"sql                        ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 CREATE VIEW",
			"body": [],
			"description": "Cria uma visualização baseada no conjunto de resultados de uma instrução SELECT"
		},
		"sql                         ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 DATABASE",
			"body": [],
			"description": "Cria ou exclui um banco de dados SQL"
		},
		"sql                          ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 DEFAULT",
			"body": [],
			"description": "Uma restrição que fornece um valor padrão para uma coluna"
		},
		"sql                           ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 DELETE⭐",
			"body": [
				"DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';\r\n"
			],
			"description": "Exclui linhas de uma tabela"
		},
		"sql                            ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 DESC",
			"body": [],
			"description": "Classifica o conjunto de resultados em ordem decrescente"
		},
		"sql                             ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 DISTINCT",
			"body": [],
			"description": "Seleciona apenas valores distintos (diferentes)"
		},
		"sql                              ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 DROP",
			"body": [],
			"description": "Exclui uma coluna, restrição, banco de dados, índice, tabela ou visualização"
		},
		"sql                               ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 DROP COLUMN",
			"body": [],
			"description": "Exclui uma coluna em uma tabela"
		},
		"sql                                ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 DROP CONSTRAINT",
			"body": [],
			"description": "Exclui uma restrição UNIQUE, PRIMARY KEY, FOREIGN KEY ou CHECK"
		},
		"sql                                  ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 DROP DATABASE",
			"body": [],
			"description": "Exclui um banco de dados SQL existente"
		},
		"sql                                   ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 DROP DEFAULT",
			"body": [],
			"description": "Exclui uma restrição DEFAULT"
		},
		"sql                                    ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 DROP INDEX⭐",
			"body": [],
			"description": "Exclui um índice em uma tabela"
		},
		"sql                                     ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 DROP TABLE⭐",
			"body": [],
			"description": "Exclui uma tabela existente no banco de dados"
		},
		"sql                                      ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 DROP VIEW",
			"body": [],
			"description": "Exclui uma visualização"
		},
		"sql                                       ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 EXEC",
			"body": [],
			"description": "Executa um procedimento armazenado"
		},
		"sql                                 ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 EXISTS",
			"body": [],
			"description": "Testes para a existência de qualquer registro em uma subconsulta"
		},
		"sql                                        ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 FOREIGN KEY",
			"body": [],
			"description": "Uma restrição que é uma chave usada para vincular duas tabelas"
		},
		"sql                                            ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 FROM",
			"body": [],
			"description": "Especifica de qual tabela selecionar ou excluir dados"
		},
		"sql                                           ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 FULL OUTER JOIN",
			"body": [],
			"description": "Retorna todas as linhas quando há uma correspondência na tabela esquerda ou na tabela direita"
		},
		"sql                                          ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 GROUP BY",
			"body": [],
			"description": "Agrupa o conjunto de resultados (usado com funções agregadas: COUNT, MAX, MIN, SUM, AVG)"
		},
		"sql                                         ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 HAVING",
			"body": [],
			"description": "Usado em vez de WHERE com funções agregadas"
		},
		"sql                                              ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 IN",
			"body": [
				"SELECT * FROM Customers\r\nWHERE Country IN ('Germany', 'France', 'UK');"
			],
			"description": "Permite especificar vários valores em uma cláusula WHERE"
		},
		"sql                                               ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 INDEX",
			"body": [],
			"description": "Cria ou exclui um índice em uma tabela"
		},
		"sql                                                ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 INNER JOIN",
			"body": [],
			"description": "Retorna linhas que possuem valores correspondentes em ambas as tabelas"
		},
		"sql                                                 ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 INSERT INTO⭐",
			"body": [],
			"description": "Insere novas linhas em uma tabela"
		},
		"sql                                                  ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 INSERT INTO SELECT",
			"body": [],
			"description": "Copia dados de uma tabela para outra tabela"
		},
		"sql                                                   ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 IS NULL",
			"body": [],
			"description": "Testes para valores vazios"
		},
		"sql                                                    ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 IS NOT NULL",
			"body": [],
			"description": "Testes para valores não vazios"
		},
		"sql                                                     ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 JOIN",
			"body": [],
			"description": "Junta-se a tabelas"
		},
		"sql                                                      ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 LEFT JOIN",
			"body": [],
			"description": "Retorna todas as linhas da tabela esquerda e as linhas correspondentes da tabela direita"
		},
		"sql                                             ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 LIKE",
			"body": [],
			"description": "Procura um padrão especificado em uma coluna"
		},
		"sql                                                        ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 LIMIT",
			"body": [],
			"description": "Especifica o número de registros a serem retornados no conjunto de resultados"
		},
		"sql                                                         ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 NOT",
			"body": [
				"SELECT * FROM Customers\r\nWHERE NOT CustomerId < 50;"
			],
			"description": "Inclui apenas linhas onde uma condição não é verdadeira"
		},
		"sql                                                          ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 NOT NULL",
			"body": [],
			"description": "Uma restrição que impõe uma coluna para não aceitar valores NULL"
		},
		"sql                                                       ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 OR",
			"body": [
				"SELECT * FROM Customers\r\nWHERE Country = 'Germany'\r\nAND City = 'Berlin'\r\nAND PostalCode > 12000;"
			],
			"description": "Inclui linhas onde qualquer uma das condições é verdadeira"
		},
		"sql                                                            ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 ORDER BY☄️",
			"body": [
				"SELECT * FROM Customers\r\nORDER BY Country ASC, CustomerName DESC;"
			],
			"description": "Classifica o conjunto de resultados em ordem crescente ou decrescente"
		},
		"sql                                                             ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 OUTER JOIN",
			"body": [],
			"description": "Retorna todas as linhas quando há uma correspondência na tabela esquerda ou na tabela direita"
		},
		"sql                                                              ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 PRIMARY KEY",
			"body": [],
			"description": "Uma restrição que identifica exclusivamente cada registro em uma tabela de banco de dados"
		},
		"sql                                                               ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 PROCEDURE",
			"body": [],
			"description": "Um procedimento armazenado"
		},
		"sql                                                                ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 RIGHT JOIN",
			"body": [],
			"description": "Retorna todas as linhas da tabela direita e as linhas correspondentes da tabela esquerda"
		},
		"sql                                                                 ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 ROWNUM",
			"body": [],
			"description": "Especifica o número de registros a serem retornados no conjunto de resultados"
		},
		"sql                                                                  ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 SELECT⭐",
			"body": [],
			"description": "Seleciona dados de um banco de dados"
		},
		"sql                                                                   ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 SELECT DISTINCT☄️",
			"body": [],
			"description": "Seleciona apenas valores distintos (diferentes)"
		},
		"sql                                                                    ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 SELECT INTO",
			"body": [
				"INSERT INTO table_name (column1, column2, column3, ...)\r\nVALUES (value1, value2, value3, ...);",
				"",
				"INSERT INTO table_name\r\nVALUES (value1, value2, value3, ...);"
			],
			"description": "Copia dados de uma tabela para uma nova tabela"
		},
		"sql                                                                     ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 SELECT TOP",
			"body": [],
			"description": "Especifica o número de registros a serem retornados no conjunto de resultados"
		},
		"sql                                                                      ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 SET",
			"body": [],
			"description": "Especifica quais colunas e valores devem ser atualizados em uma tabela"
		},
		"sql                                                                       ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 TABLE",
			"body": [],
			"description": "Cria uma tabela ou adiciona, exclui ou modifica colunas em uma tabela ou exclui uma tabela ou dados dentro de uma tabela"
		},
		"sql                                                                        ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 TOP",
			"body": [],
			"description": "Especifica o número de registros a serem retornados no conjunto de resultados"
		},
		"sql                                                                         ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 TRUNCATE TABLE",
			"body": [],
			"description": "Exclui os dados de uma tabela, mas não a própria tabela"
		},
		"sql                                                                          ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 UNION",
			"body": [],
			"description": "Combina o conjunto de resultados de duas ou mais instruções SELECT (somente valores distintos)"
		},
		"sql                                                           ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 UNION ALL",
			"body": [],
			"description": "Combina o conjunto de resultados de duas ou mais instruções SELECT (permite valores duplicados)"
		},
		"sql                                                                           ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 UNIQUE",
			"body": [],
			"description": "Uma restrição que garante que todos os valores em uma coluna sejam únicos"
		},
		"sql                                                                            ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 UPDATE⭐",
			"body": [
				"UPDATE Customers\r\nSET ContactName='Juan'\r\nWHERE Country='Mexico';"
			],
			"description": "Atualiza linhas existentes em uma tabela"
		},
		"sql                                                                             ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 VALUES",
			"body": [],
			"description": "Especifica os valores de uma instrução INSERT INTO"
		},
		"sql                                                                              ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 VIEW",
			"body": [],
			"description": "Cria, atualiza ou exclui uma visualização"
		},
		"sql                                                                               ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 WHERE⭐",
			"body": [
				"SELECT * FROM Customers\r\nWHERE Country='Mexico';"
			],
			"description": "Filtra um conjunto de resultados para incluir apenas registros que atendem a uma condição especificada"
		},
		"sql                                                                                ": {
			"scope": "sql, markdown, plaintext",
			"prefix": "#1 ALTER DATABASE⭐",
			"body": [],
			"description": ""
		},
	/********************************* GIT Library ***********************************************************/
		
		"git                                                                                                                                                                         ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-add",
			"body": [
				"git add [arquivo]"
			],
			"description": "Adicione o conteúdo do arquivo ao índice"
		},
		"git                                                                                                                                                                        ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-am",
			"body": [
				"git am [patch]"
			],
			"description": "Aplicar uma série de patches de uma caixa de correio"
		},
		"git                                                                                                                                                                       ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-archive",
			"body": [
				"git archive --format=tar --output=arquivo.tar [ramo]"
			],
			"description": "Crie um arquivo de arquivos de uma árvore nomeada"
		},
		"git                                                                                                                                                                      ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-bisect",
			"body": [
				"git bisect start",
				"git bisect good [commit-id]",
				"git bisect bad [commit-id]"
			],
			"description": "Use a pesquisa binária para encontrar o commit que introduziu um bug"
		},
		"git                                                                                                                                                                     ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-branch",
			"body": [
				"git branch",
				"git branch [novo-ramo]",
				"git branch -d [ramo]"
			],
			"description": "Listar, criar ou excluir ramificações"
		},
		"git                                                                                                                                                                    ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-bundle",
			"body": [
				"git bundle create [arquivo.bundle] [ramo]",
				"git bundle verify [arquivo.bundle]"
			],
			"description": "Mover objetos e referências por arquivo"
		},
		"git                                                                                                                                                                   ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-checkout",
			"body": [
				"git checkout [ramo]",
				"git checkout -- [arquivo]"
			],
			"description": "Troque de ramificação ou restaure arquivos da árvore de trabalho"
		},
		"git                                                                                                                                                                  ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-cherry-pick",
			"body": [
				"git cherry-pick [commit-id]"
			],
			"description": "Aplicar as alterações introduzidas por alguns commits existentes"
		},
		"git                                                                                                                                                                 ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-citool",
			"body": [
				"git citool"
			],
			"description": "Alternativa gráfica para git-commit"
		},
		"git                                                                                                                                                                ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-clean",
			"body": [
				"git clean -fd"
			],
			"description": "Remova arquivos não rastreados da árvore de trabalho"
		},
		"git                                                                                                                                                               ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-clone",
			"body": [
				"git clone [url] [diretório]"
			],
			"description": "Clonar um repositório em um novo diretório"
		},
		"git                                                                                                                                                              ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-commit",
			"body": [
				"git commit -m \"mensagem de commit\""
			],
			"description": "Registrar alterações no repositório"
		},
		"git                                                                                                                                                             ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-describe",
			"body": [
				"git describe"
			],
			"description": "Dê a um objeto um nome legível por humanos com base em uma referência disponível"
		},
		"git                                                                                                                                                            ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-diff",
			"body": [
				"git diff [commit-id] [commit-id]"
			],
			"description": "Mostrar alterações entre commits, commit e árvore de trabalho, etc."
		},
		"git                                                                                                                                                           ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-fetch",
			"body": [
				"git fetch [remote]"
			],
			"description": "Baixe objetos e referências de outro repositório"
		},
		"git                                                                                                                                                          ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-format-patch",
			"body": [
				"git format-patch [base]"
			],
			"description": "Preparar patches para envio por e-mail"
		},
		"git                                                                                                                                                         ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-gc",
			"body": [
				"git gc"
			],
			"description": "Limpe arquivos desnecessários e otimize o repositório local"
		},
		"git                                                                                                                                                        ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-grep",
			"body": [
				"git grep [padrão]"
			],
			"description": "Imprimir linhas que correspondam a um padrão"
		},
		"git                                                                                                                                                       ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-gui",
			"body": [
				"git gui"
			],
			"description": "Uma interface gráfica portátil para Git"
		},
		"git                                                                                                                                                      ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-init",
			"body": [
				"git init"
			],
			"description": "Crie um repositório Git vazio ou reinicialize um existente"
		},
		"git                                                                                                                                                     ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-log",
			"body": [
				"git log"
			],
			"description": "Mostrar registros de commit"
		},
		"git                                                                                                                                                    ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-maintenance",
			"body": [
				"git maintenance run"
			],
			"description": "Execute tarefas para otimizar os dados do repositório Git"
		},
		"git                                                                                                                                                   ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-merge",
			"body": [
				"git merge [ramo]"
			],
			"description": "Junte duas ou mais histórias de desenvolvimento"
		},
		"git                                                                                                                                                  ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-mv",
			"body": [
				"git mv [arquivo] [novo-arquivo]"
			],
			"description": "Mover ou renomear um arquivo, diretório ou link simbólico"
		},
		"git                                                                                                                                                 ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-notes",
			"body": [
				"git notes add [mensagem]"
			],
			"description": "Adicionar ou inspecionar notas de objeto"
		},
		"git                                                                                                                                                ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-pull",
			"body": [
				"git pull [remote] [ramo]"
			],
			"description": "Buscar e integrar com outro repositório ou filial local"
		},
		"git                                                                                                                                               ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-push",
			"body": [
				"git push [remote] [ramo]"
			],
			"description": "Atualizar referências remotas junto com objetos associados"
		},
		"git                                                                                                                                              ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-range-diff",
			"body": [
				"git range-diff [intervalo1] [intervalo2]"
			],
			"description": "Compare dois intervalos de commit (por exemplo, duas versões de um branch)"
		},
		"git                                                                                                                                             ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-rebase",
			"body": [
				"git rebase [base]"
			],
			"description": "Reaplicar commits em cima de outra dica base"
		},
		"git                                                                                                                                            ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-reset",
			"body": [
				"git reset [commit-id]"
			],
			"description": "Redefinir o HEAD atual para o estado especificado"
		},
		"git                                                                                                                                           ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-restore",
			"body": [
				"git restore [arquivo]"
			],
			"description": "Restaurar arquivos da árvore de trabalho"
		},
		"git                                                                                                                                          ": {
			"scope": "markdown, plaintext",
			"prefix": "#2 git-revert",
			"body": [
				"git revert [commit-id]"
			],
			"description": "Reverter alguns commits existentes"
		},
			"git                                                                                                                                         ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-rm",
				"body": [
					"git rm [arquivo]"
				],
				"description": "Remova arquivos da árvore de trabalho e do índice"
			},
			"git                                                                                                                                        ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-shortlog",
				"body": [
					"git shortlog"
				],
				"description": "Resuma a saída do git log"
			},
			"git                                                                                                                                       ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-show",
				"body": [
					"git show [objeto]"
				],
				"description": "Mostrar vários tipos de objetos"
			},
			"git                                                                                                                                      ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-sparse-checkout",
				"body": [
					"git sparse-checkout init --cone",
					"git sparse-checkout set [pasta]"
				],
				"description": "Reduza sua árvore de trabalho a um subconjunto de arquivos rastreados"
			},
			"git                                                                                                                                     ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-stash",
				"body": [
					"git stash",
					"git stash apply"
				],
				"description": "Armazene as alterações em um diretório de trabalho sujo"
			},
			"git                                                                                                                                    ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-status",
				"body": [
					"git status"
				],
				"description": "Mostrar o status da árvore de trabalho"
			},
			"git                                                                                                                                   ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-submodule",
				"body": [
					"git submodule add [url] [pasta]",
					"git submodule update --init --recursive"
				],
				"description": "Inicialize, atualize ou inspecione submódulos"
			},
			"git                                                                                                                                  ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-switch",
				"body": [
					"git switch [ramo]"
				],
				"description": "Mudar de ramo"
			},
			"git                                                                                                                                 ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-tag",
				"body": [
					"git tag -a [tag] -m \"mensagem\"",
					"git tag -d [tag]",
					"git push origin --tags"
				],
				"description": "Crie, liste, exclua ou verifique um objeto de tag assinado com GPG"
			},
			"git                                                                                                                               ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-worktree",
				"body": [
					"git worktree add [pasta] [ramo]",
					"git worktree remove [pasta]"
				],
				"description": "Gerenciar múltiplas árvores de trabalho"
			},
			"git                                                                                                                                ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 gitk",
				"body": [
					"gitk"
				],
				"description": "O navegador do repositório Git"
			},
			"git                                                                                                                              ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 scalar",
				"body": [
					"scalar register",
					"scalar clone [url]"
				],
				"description": "Uma ferramenta para gerenciar grandes repositórios Git"
			},
			"git                                                                                                                             ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-config",
				"body": [
					"git config --global [nome] [valor]"
				],
				"description": "Obtenha e defina repositório ou opções globais"
			},
			"git                                                                                                                           ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-fast-export",
				"body": [
					"git fast-export [ramo]"
				],
				"description": "Exportador de dados Git"
			},
			"git                                                                                                                            ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-fast-import",
				"body": [
					"git fast-import"
				],
				"description": "Back-end para importadores rápidos de dados Git"
			},
			"git                                                                                                                          ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-filter-branch",
				"body": [
					"git filter-branch --tree-filter '[comando]' HEAD"
				],
				"description": "Reescrever ramificações"
			},
			"git                                                                                                                         ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-mergetool",
				"body": [
					"git mergetool"
				],
				"description": "Execute ferramentas de resolução de conflitos de mesclagem para resolver conflitos de mesclagem"
			},
			"git                                                                                                                        ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-pack-refs",
				"body": [
					"git pack-refs --all"
				],
				"description": "Pack heads e tags para acesso eficiente ao repositório"
			},
	
				"git                                                                                                                       ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-prune",
					"body": [
						"git prune"
					],
					"description": "Remover todos os objetos inacessíveis do banco de dados de objetos"
				},
				"git                                                                                                                      ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-reflog",
					"body": [
						"git reflog"
					],
					"description": "Gerenciar informações de reflog"
				},
				"git                                                                                                                     ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-remote",
					"body": [
						"git remote",
						"git remote add [nome] [url]"
					],
					"description": "Gerenciar conjunto de repositórios rastreados"
				},
				"git                                                                                                                    ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-repack",
					"body": [
						"git repack -a -d -l"
					],
					"description": "Empacotar objetos descompactados em um repositório"
				},
				"git                                                                                                                   ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-replace",
					"body": [
						"git replace [objeto-antigo] [objeto-novo]"
					],
					"description": "Crie, liste e exclua referências para substituir objetos"
				},
				"git                                                                                                                  ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-annotate",
					"body": [
						"git annotate [arquivo]"
					],
					"description": "Anote linhas de arquivo com informações de commit"
				},
				"git                                                                                                                 ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-blame",
					"body": [
						"git blame [arquivo]"
					],
					"description": "Mostrar qual revisão e autor modificou pela última vez cada linha de um arquivo"
				},
				"git                                                                                                                ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-bugreport",
					"body": [
						"git bugreport"
					],
					"description": "Coletar informações para o usuário registrar um relatório de bug"
				},
				"git                                                                                                               ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-count-objects",
					"body": [
						"git count-objects"
					],
					"description": "Conte o número de objetos descompactados e seu consumo de disco"
				},
				"git                                                                                                              ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-diagnose",
					"body": [
						"git diagnose"
					],
					"description": "Gere um arquivo zip de informações de diagnóstico"
				},
				"git                                                                                                             ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-difftool",
					"body": [
						"git difftool"
					],
					"description": "Mostrar alterações usando ferramentas de comparação comuns"
				},
				"git                                                                                                            ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-fsck",
					"body": [
						"git fsck"
					],
					"description": "Verifica a conectividade e validade dos objetos no banco de dados"
				},
				"git                                                                                                           ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-help",
					"body": [
						"git help [comando]"
					],
					"description": "Exibir informações de ajuda sobre o Git"
				},
	
			"git                                                                                                          ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-instaweb",
					"body": [
							"Navegar instantaneamente em seu repositório de trabalho no gitweb",
							"```bash",
							"git instaweb",
							"```"
					],
					"description": "Navegue instantaneamente em seu repositório de trabalho no gitweb"
			},
			"git                                                                                                         ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-merge-tree",
					"body": [
							"Execute a mesclagem sem tocar no índice ou na árvore de trabalho",
							"```bash",
							"git merge-tree <base> <branch1> <branch2>",
							"```"
					],
					"description": "Execute a mesclagem sem tocar no índice ou na árvore de trabalho"
			},
			"git                                                                                                        ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-rerere",
					"body": [
							"Reutilizar resolução gravada de mesclagens conflitantes",
							"```bash",
							"git rerere",
							"```"
					],
					"description": "Reutilizar resolução gravada de mesclagens conflitantes"
			},
			"git                                                                                                       ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-show-branch",
					"body": [
							"Mostrar filiais e seus commits",
							"```bash",
							"git show-branch",
							"```"
					],
					"description": "Mostrar filiais e seus commits"
			},
			"git                                                                                                      ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-verify-commit",
					"body": [
							"Verifique a assinatura GPG dos commits",
							"```bash",
							"git verify-commit <commit>",
							"```"
					],
					"description": "Verifique a assinatura GPG dos commits"
			},
			"git                                                                                                     ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-verify-tag",
					"body": [
							"Verifique a assinatura GPG das tags",
							"```bash",
							"git verify-tag <tag>",
							"```"
					],
					"description": "Verifique a assinatura GPG das tags"
			},
			"git                                                                                                    ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-version",
					"body": [
							"Exibir informações de versão sobre o Git",
							"```bash",
							"git version",
							"```"
					],
					"description": "Exibir informações de versão sobre o Git"
			},
			"git                                                                                                   ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-whatchanged",
					"body": [
							"Mostrar logs com a diferença que cada commit apresenta",
							"```bash",
							"git whatchanged",
							"```"
					],
					"description": "Mostrar logs com a diferença que cada commit apresenta"
			},
			"git                                                                                                  ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 gitweb",
					"body": [
							"Interface web Git (frontend web para repositórios Git)",
							"```bash",
							"gitweb",
							"```"
					],
					"description": "Interface web Git (frontend web para repositórios Git)"
			},
			"git                                                                                                 ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-archimport",
					"body": [
							"Importe um repositório GNU Arch para o Git",
							"```bash",
							"git archimport",
							"```"
					],
					"description": "Importe um repositório GNU Arch para o Git"
			},
			"git                                                                                                ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-cvsexportcommit",
					"body": [
							"Exporte um único commit para um checkout CVS",
							"```bash",
							"git cvsexportcommit -c <commit>",
							"```"
					],
					"description": "Exporte um único commit para um checkout CVS"
			},
			"git                                                                                               ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-cvsimport",
					"body": [
							"Salve seus dados de outro SCM que as pessoas adoram odiar",
							"```bash",
							"git cvsimport",
							"```"
					],
					"description": "Salve seus dados de outro SCM que as pessoas adoram odiar"
			},
			"git                                                                                              ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-cvsserver",
					"body": [
							"Um emulador de servidor CVS para Git",
							"```bash",
							"git cvsserver",
							"```"
					],
					"description": "Um emulador de servidor CVS para Git"
			},
			"git                                                                                            ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-imap-send",
					"body": [
							"Envie uma coleção de patches do stdin para uma pasta IMAP",
							"```bash",
							"git imap-send",
							"```"
					],
					"description": "Envie uma coleção de patches do stdin para uma pasta IMAP"
			},
			"git                                                                                             ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-p4",
					"body": [
							"Importar e enviar para repositórios Perforce",
							"```bash",
							"git p4",
							"```"
					],
					"description": "Importar e enviar para repositórios Perforce"
			},
			"git                                                                                           ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-quiltimport",
					"body": [
							"Aplica um patchset de quilt no branch atual",
							"```bash",
							"git quiltimport",
							"```"
					],
					"description": "Aplica um patchset de quilt no branch atual"
			},
			"git                                                                                          ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-request-pull",
					"body": [
							"Gera um resumo das alterações pendentes",
							"```bash",
							"git request-pull",
							"```"
					],
					"description": "Gera um resumo das alterações pendentes"
			},
			"git                                                                                         ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-send-email",
					"body": [
							"Envie uma coleção de patches como e-mails",
							"```bash",
							"git send-email",
							"```"
					],
					"description": "Envie uma coleção de patches como e-mails"
			},
			"git                                                                                        ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-svn",
					"body": [
							"Operação bidirecional entre um repositório Subversion e Git",
							"```bash",
							"git svn",
							"```"
					],
					"description": "Operação bidirecional entre um repositório Subversion e Git"
			},
			"git                                                                                       ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-revert",
					"body": [
							"Fazer um novo commit que reverte as alterações feitas por outros commits",
							"```bash",
							"git revert <commit>",
							"```"
					],
					"description": "Fazer um novo commit que reverte as alterações feitas por outros commits"
			},
			"git                                                                                      ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-restore",
					"body": [
							"Restaurar arquivos na árvore de trabalho a partir do índice ou de outro commit",
							"```bash",
							"git restore <file>",
							"```"
					],
					"description": "Restaurar arquivos na árvore de trabalho a partir do índice ou de outro commit"
			},
			"git                                                                                     ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-reset",
					"body": [
							"Atualizar seu branch, movendo a dica para adicionar ou remover commits do branch",
							"```bash",
							"git reset <options> <commit>",
							"```"
					],
					"description": "Atualizar seu branch, movendo a dica para adicionar ou remover commits do branch"
			},
	
			"git                                                                                    ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-add",
					"body": [
							"Adicione o conteúdo do arquivo ao índice",
							"```bash",
							"git add <file>",
							"```"
					],
					"description": "Adicione o conteúdo do arquivo ao índice"
			},
			"git                                                                                   ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-am",
					"body": [
							"Aplicar uma série de patches de uma caixa de correio",
							"```bash",
							"git am <patch>",
							"```"
					],
					"description": "Aplicar uma série de patches de uma caixa de correio"
			},
			"git                                                                                  ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-archive",
					"body": [
							"Crie um arquivo de arquivos de uma árvore nomeada",
							"```bash",
							"git archive --format=tar <commit> -o <output-file>",
							"```"
					],
					"description": "Crie um arquivo de arquivos de uma árvore nomeada"
			},
			"git                                                                                 ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-bisect",
					"body": [
							"Use a pesquisa binária para encontrar o commit que introduziu um bug",
							"```bash",
							"git bisect start",
							"git bisect bad",
							"git bisect good <commit>",
							"```"
					],
					"description": "Use a pesquisa binária para encontrar o commit que introduziu um bug"
			},
			"git                                                                                ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-branch",
					"body": [
							"Listar, criar ou excluir ramificações",
							"```bash",
							"git branch",
							"```"
					],
					"description": "Listar, criar ou excluir ramificações"
			},
			"git                                                                               ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-bundle",
					"body": [
							"Mover objetos e referências por arquivo",
							"```bash",
							"git bundle create <file> <branch>",
							"```"
					],
					"description": "Mover objetos e referências por arquivo"
			},
			"git                                                                              ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-checkout",
					"body": [
							"Troque de ramificação ou restaure arquivos da árvore de trabalho",
							"```bash",
							"git checkout <branch>",
							"```"
					],
					"description": "Troque de ramificação ou restaure arquivos da árvore de trabalho"
			},
			"git                                                                             ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-cherry-pick",
					"body": [
							"Aplicar as alterações introduzidas por alguns commits existentes",
							"```bash",
							"git cherry-pick <commit>",
							"```"
					],
					"description": "Aplicar as alterações introduzidas por alguns commits existentes"
			},
			"git                                                                            ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-citool",
					"body": [
							"Alternativa gráfica para git-commit",
							"```bash",
							"git citool",
							"```"
					],
					"description": "Alternativa gráfica para git-commit"
			},
			"git                                                                           ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-clean",
					"body": [
							"Remova arquivos não rastreados da árvore de trabalho",
							"```bash",
							"git clean -f",
							"```"
					],
					"description": "Remova arquivos não rastreados da árvore de trabalho"
			},
			"git                                                                          ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-clone",
					"body": [
							"Clonar um repositório em um novo diretório",
							"```bash",
							"git clone <repository>",
							"```"
					],
					"description": "Clonar um repositório em um novo diretório"
			},
			"git                                                                         ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-commit",
					"body": [
							"Registrar alterações no repositório",
							"```bash",
							"git commit -m \"mensagem do commit\"",
							"```"
					],
					"description": "Registrar alterações no repositório"
			},
			"git                                                                       ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-describe",
					"body": [
							"Dê a um objeto um nome legível por humanos com base em uma referência disponível",
							"```bash",
							"git describe <options>",
							"```"
					],
					"description": "Dê a um objeto um nome legível por humanos com base em uma referência disponível"
			},
			"git                                                                        ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-diff",
					"body": [
							"Mostrar alterações entre commits, commit e árvore de trabalho, etc.",
							"```bash",
							"git diff <options>",
							"```"
					],
					"description": "Mostrar alterações entre commits, commit e árvore de trabalho, etc."
			},
			"git                                                                      ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-fetch",
					"body": [
							"Baixe objetos e referências de outro repositório",
							"```bash",
							"git fetch <remote>",
							"```"
					],
					"description": "Baixe objetos e referências de outro repositório"
			},
			"git                                                                     ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-format-patch",
					"body": [
							"Preparar patches para envio por e-mail",
							"```bash",
							"git format-patch <options>",
							"```"
					],
					"description": "Preparar patches para envio por e-mail"
			},
			"git                                                                    ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-gc",
					"body": [
							"Limpe arquivos desnecessários e otimize o repositório local",
							"```bash",
							"git gc",
							"```"
					],
					"description": "Limpe arquivos desnecessários e otimize o repositório local"
			},
			"git                                                                   ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-grep",
					"body": [
							"Imprimir linhas que correspondam a um padrão",
							"```bash",
							"git grep <pattern>",
							"```"
					],
					"description": "Imprimir linhas que correspondam a um padrão"
			},
			"git                                                                  ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-gui",
					"body": [
							"Uma interface gráfica portátil para Git",
							"```bash",
							"git gui",
							"```"
					],
					"description": "Uma interface gráfica portátil para Git"
			},
			"git                                                                 ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-init",
					"body": [
							"Crie um repositório Git vazio ou reinicialize um existente",
							"```bash",
							"git init",
							"```"
					],
					"description": "Crie um repositório Git vazio ou reinicialize um existente"
			},
			"git                                                                ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-log",
					"body": [
							"Mostrar registros de commit",
							"```bash",
							"git log",
							"```"
					],
					"description": "Mostrar registros de commit"
			},
			"git                                                               ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-maintenance",
				"body": [
						"Execute tarefas para otimizar os dados do repositório Git",
						"```bash",
						"git maintenance run",
						"```"
				],
				"description": "Execute tarefas para otimizar os dados do repositório Git"
		},
	
			"git                                                              ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-merge",
				"body": [
					"git merge <branch>"
				],
				"description": "Junte duas ou mais histórias de desenvolvimento"
			},
			"git                                                             ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-mv",
				"body": [
					"git mv <source> <destination>"
				],
				"description": "Mover ou renomear um arquivo, diretório ou link simbólico"
			},
			"git                                                            ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-notes",
				"body": [
					"git notes add -m \"<message>\""
				],
				"description": "Adicionar ou inspecionar notas de objeto"
			},
			"git                                                           ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-pull",
				"body": [
					"git pull <remote> <branch>"
				],
				"description": "Buscar e integrar com outro repositório ou filial local"
			},
			"git                                                          ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-push",
				"body": [
					"git push <remote> <branch>"
				],
				"description": "Atualizar referências remotas junto com objetos associados"
			},
			"git                                                         ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-range-diff",
				"body": [
					"git range-diff <base-branch> <compare-branch>"
				],
				"description": "Compare dois intervalos de commit (por exemplo, duas versões de um branch)"
			},
			"git                                                        ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-rebase",
				"body": [
					"git rebase <branch>"
				],
				"description": "Reaplicar commits em cima de outra dica base"
			},
			"git                                                     ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-reset",
				"body": [
					"git reset <commit>"
				],
				"description": "Redefinir o HEAD atual para o estado especificado"
			},
			"git                                                       ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-restore",
				"body": [
					"git restore <file>"
				],
				"description": "Restaurar arquivos da árvore de trabalho"
			},
			"git                                                      ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-revert",
				"body": [
					"git revert <commit>"
				],
				"description": "Reverter alguns commits existentes"
			},
			"git                                                    ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-rm",
				"body": [
					"git rm <file>"
				],
				"description": "Remova arquivos da árvore de trabalho e do índice"
			},
			"git                                                   ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-shortlog",
				"body": [
					"git shortlog"
				],
				"description": "Resuma a saída do git log"
			},
			"git                                                  ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-show",
				"body": [
					"git show <object>"
				],
				"description": "Mostrar vários tipos de objetos"
			},
			"git                                                 ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-sparse-checkout",
				"body": [
					"git sparse-checkout init --cone",
					"git sparse-checkout set <directory>"
				],
				"description": "Reduza sua árvore de trabalho a um subconjunto de arquivos rastreados"
			},
			"git                                                ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-stash",
				"body": [
					"git stash save \"<message>\""
				],
				"description": "Armazene as alterações em um diretório de trabalho sujo"
			},
			"git                                               ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-status",
				"body": [
					"git status"
				],
				"description": "Mostrar o status da árvore de trabalho"
			},
			"git                                              ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-submodule",
				"body": [
					"git submodule update --init --recursive"
				],
				"description": "Inicialize, atualize ou inspecione submódulos"
			},
			"git                                            ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-switch",
				"body": [
					"git switch <branch>"
				],
				"description": "Mudar de ramo"
			},
			"git                                             ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-tag",
				"body": [
					"git tag -a <tag> -m \"<message>\""
				],
				"description": "Crie, liste, exclua ou verifique um objeto de tag assinado com GPG"
			},
			"git                                           ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 git-worktree",
				"body": [
					"git worktree add <path> <branch>"
				],
				"description": "Gerenciar múltiplas árvores de trabalho"
			},
			"git                                          ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 gitk",
				"body": [
					"gitk"
				],
				"description": "O navegador do repositório Git"
			},
			"git                                        ": {
				"scope": "markdown, plaintext",
				"prefix": "#2 scalar",
				"body": [
					"scalar register"
				],
				"description": "Uma ferramenta para gerenciar grandes repositórios Git"
			},
				"git                                         ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-config",
					"body": [
						"git config --global user.name \"<name>\"",
						"git config --global user.email \"<email>\""
					],
					"description": "Obtenha e defina repositório ou opções globais"
				},
				"git                                     ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-fast-export",
					"body": [
						"git fast-export <revision>"
					],
					"description": "Exportador de dados Git"
				},
				"git                                       ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-fast-import",
					"body": [
						"git fast-import <data>"
					],
					"description": "Back-end para importadores rápidos de dados Git"
				},
				"git                                      ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-filter-branch",
					"body": [
						"git filter-branch --tree-filter '<command>' HEAD"
					],
					"description": "Reescrever ramificações"
				},
				"git                                    ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-mergetool",
					"body": [
						"git mergetool"
					],
					"description": "Execute ferramentas de resolução de conflitos de mesclagem para resolver conflitos de mesclagem"
				},
				"git                                   ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-pack-refs",
					"body": [
						"git pack-refs --all"
					],
					"description": "Pack heads e tags para acesso eficiente ao repositório"
				},
				"git                                  ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-prune",
					"body": [
						"git prune"
					],
					"description": "Remover todos os objetos inacessíveis do banco de dados de objetos"
				},
				"git                                 ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-reflog",
					"body": [
						"git reflog"
					],
					"description": "Gerenciar informações de reflog"
				},
				"git                                ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-remote",
					"body": [
						"git remote add <name> <url>"
					],
					"description": "Gerenciar conjunto de repositórios rastreados"
				},
				"git                               ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-repack",
					"body": [
						"git repack -a -d"
					],
					"description": "Empacotar objetos descompactados em um repositório"
				},
				"git                              ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-replace",
					"body": [
						"git replace <object> <replacement>"
					],
					"description": "Crie, liste e exclua referências para substituir objetos"
				},
				"git                             ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-annotate",
					"body": [
						"git annotate <file>"
					],
					"description": "Anote linhas de arquivo com informações de commit"
				},
				"git                            ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-blame",
					"body": [
						"git blame <file>"
					],
					"description": "Mostrar qual revisão e autor modificou pela última vez cada linha de um arquivo"
				},
				"git                           ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-bugreport",
					"body": [
						"git bugreport"
					],
					"description": "Coletar informações para o usuário registrar um relatório de bug"
				},
				"git                          ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-count-objects",
					"body": [
						"git count-objects -v"
					],
					"description": "Conte o número de objetos descompactados e seu consumo de disco"
				},
				"git                         ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-diagnose",
					"body": [
						"git diagnose"
					],
					"description": "Gere um arquivo zip de informações de diagnóstico"
				},
				"git                        ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-difftool",
					"body": [
						"git difftool <commit>"
					],
					"description": "Mostrar alterações usando ferramentas de comparação comuns"
				},
				"git                       ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-fsck",
					"body": [
						"git fsck"
					],
					"description": "Verifica a conectividade e validade dos objetos no banco de dados"
				},
				"git                      ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-help",
					"body": [
						"git help <command>"
					],
					"description": "Exibir informações de ajuda sobre o Git"
				},
				"git                     ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-instaweb",
					"body": [
						"git instaweb"
					],
					"description": "Navegue instantaneamente em seu repositório de trabalho no gitweb"
				},
				"git                    ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-merge-tree",
					"body": [
						"git merge-tree <base> <branch1> <branch2>"
					],
					"description": "Execute a mesclagem sem tocar no índice ou na árvore de trabalho"
				},
				"git                   ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-rerere",
					"body": [
						"git rerere"
					],
					"description": "Reutilizar resolução gravada de mesclagens conflitantes"
				},
				"git                  ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-show-branch",
					"body": [
						"git show-branch"
					],
					"description": "Mostrar filiais e seus commits"
				},
				"git                 ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-verify-commit",
					"body": [
						"git verify-commit <commit>"
					],
					"description": "Verifique a assinatura GPG dos commits"
				},
				"git                ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-verify-tag",
					"body": [
						"git verify-tag <tag>"
					],
					"description": "Verifique a assinatura GPG das tags"
				},
				"git               ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-version",
					"body": [
						"git version"
					],
					"description": "Exibir informações de versão sobre o Git"
				},
				"git              ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-whatchanged",
					"body": [
						"git whatchanged"
					],
					"description": "Mostrar logs com a diferença que cada commit apresenta"
				},
				"git             ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 gitweb",
					"body": [
						"gitweb"
					],
					"description": "Interface web Git (frontend web para repositórios Git)"
				},
				"git            ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-archimport",
					"body": [
						"git archimport <arch-repository>"
					],
					"description": "Importe um repositório GNU Arch para o Git"
				},
				"git          ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-cvsexportcommit",
					"body": [
						"git cvsexportcommit -c <CVS-branch> -r <commit>"
					],
					"description": "Exporte um único commit para um checkout CVS"
				},
				"git           ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-cvsimport",
					"body": [
						"git cvsimport -C <git-repo> -r cvs <cvs-repo>"
					],
					"description": "Salve seus dados de outro SCM que as pessoas adoram odiar"
				},
				"git         ": {
					"scope": "markdown, plaintext",
					"prefix": "#2 git-cvsserver",
					"body": [
						"git cvsserver"
					],
					"description": "Um emulador de servidor CVS para Git"
				},
					"git        ": {
						"scope": "markdown, plaintext",
						"prefix": "#2 git-imap-send",
						"body": [
							"git imap-send"
						],
						"description": "Envie uma coleção de patches do stdin para uma pasta IMAP"
					},
					"git       ": {
						"scope": "markdown, plaintext",
						"prefix": "#2 git-p4",
						"body": [
							"git p4 clone //depot/path/project //local/path/project"
						],
						"description": "Importar e enviar para repositórios Perforce"
					},
					"git      ": {
						"scope": "markdown, plaintext",
						"prefix": "#2 git-quiltimport",
						"body": [
							"git quiltimport <quilt-patchset>"
						],
						"description": "Aplica um patchset de quilt no branch atual"
					},
					"git     ": {
						"scope": "markdown, plaintext",
						"prefix": "#2 git-request-pull",
						"body": [
							"git request-pull <start> <url> <end>"
						],
						"description": "Gera um resumo das alterações pendentes"
					},
					"git   ": {
						"scope": "markdown, plaintext",
						"prefix": "#2 git-send-email",
						"body": [
							"git send-email --to=<email> <patch>"
						],
						"description": "Envie uma coleção de patches como e-mails"
					},
					"git    ": {
						"scope": "markdown, plaintext",
						"prefix": "#2 git-svn",
						"body": [
							"git svn clone <svn-repo-url>"
						],
						"description": "Operação bidirecional entre um repositório Subversion e Git"
					},
					"git  ": {
						"scope": "markdown, plaintext",
						"prefix": "#2 git-revert",
						"body": [
							"git revert <commit>"
						],
						"description": "Trata de fazer um novo commit que reverte as alterações feitas por outros commits."
					},
					"git ": {
						"scope": "markdown, plaintext",
						"prefix": "#2 git-restore",
						"body": [
							"git restore <file>"
						],
						"description": "Trata de restaurar arquivos na árvore de trabalho a partir do índice ou de outro commit. Este comando não atualiza seu branch. O comando também pode ser usado para restaurar arquivos no índice de outro commit."
					},
					"git": {
						"scope": "markdown, plaintext",
						"prefix": "#2 git-reset",
						"body": [
							"git reset <commit>"
						],
						"description": "Trata de atualizar seu branch, movendo a dica para adicionar ou remover commits do branch. Esta operação altera o histórico de commits. git reset também pode ser usado para restaurar o índice, sobrepondo-se ao git restore."
					},
				
	/********************************* Eletron codigo ********************************************************/
		{
			"scope": "javascript",
			"prefix": "_codigo eletron 1.1",
			"body": [
				"const { app, BrowserWindow } = require('electron')\r\n\r\nconst createWindow = () => {\r\n  const win = new BrowserWindow({\r\n    width: 800,\r\n    height: 600\r\n  })\r\n\r\n  win.loadFile('index.html')\r\n}\r\n\r\napp.whenReady().then(() => {\r\n  createWindow()\r\n})"
			],
			"description": "Programa simples elétron"
		},
		{
			"scope": "javascript",
			"prefix": "_codigo eletron 1.2",
			"body": [
				"```main.js```",
				"const { app, BrowserWindow } = require('electron/main')\r\n\r\nconst createWindow = () => {\r\n  const win = new BrowserWindow({\r\n    width: 800,\r\n    height: 600\r\n  })\r\n\r\n  win.loadFile('index.html')\r\n}\r\n\r\napp.whenReady().then(() => {\r\n  createWindow()\r\n\r\n  app.on('activate', () => {\r\n    if (BrowserWindow.getAllWindows().length === 0) {\r\n      createWindow()\r\n    }\r\n  })\r\n})\r\n\r\napp.on('window-all-closed', () => {\r\n  if (process.platform !== 'darwin') {\r\n    app.quit()\r\n  }\r\n})",
				"",
				"```index.html```",
				"<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta\r\n      http-equiv=\"Content-Security-Policy\"\r\n      content=\"default-src 'self'; script-src 'self'\"\r\n    />\r\n    <meta\r\n      http-equiv=\"X-Content-Security-Policy\"\r\n      content=\"default-src 'self'; script-src 'self'\"\r\n    />\r\n    <title>Hello from Electron renderer!</title>\r\n  </head>\r\n  <body>\r\n    <h1>Hello from Electron renderer!</h1>\r\n    <p>👋</p>\r\n    <p id=\"info\"></p>\r\n  </body>\r\n  <script src=\"./renderer.js\"></script>\r\n</html>"
			],
			"description": "Programa simples elétron"
		},
		{
			"scope": "javascript",
			"prefix": "_codigo eletron 1.3",
			"body": [
				"```Main.js```",
				"const { app, BrowserWindow } = require('electron/main')\r\nconst path = require('node:path')\r\n\r\nconst createWindow = () => {\r\n  const win = new BrowserWindow({\r\n    width: 800,\r\n    height: 600,\r\n    webPreferences: {\r\n      preload: path.join(__dirname, 'preload.js')\r\n    }\r\n  })\r\n\r\n  win.loadFile('index.html')\r\n}\r\n\r\napp.whenReady().then(() => {\r\n  createWindow()\r\n\r\n  app.on('activate', () => {\r\n    if (BrowserWindow.getAllWindows().length === 0) {\r\n      createWindow()\r\n    }\r\n  })\r\n})\r\n\r\napp.on('window-all-closed', () => {\r\n  if (process.platform !== 'darwin') {\r\n    app.quit()\r\n  }\r\n})",
				"",
				"",
				"```preload.js```",
				"const { contextBridge } = require('electron/renderer')\r\n\r\ncontextBridge.exposeInMainWorld('versions', {\r\n  node: () => process.versions.node,\r\n  chrome: () => process.versions.chrome,\r\n  electron: () => process.versions.electron\r\n})",
				"",
				"",
				"```renderer.js```",
				"const information = document.getElementById('info')\r\ninformation.innerText = `This app is using Chrome (v${window.versions.chrome()}), Node.js (v${window.versions.node()}), and Electron (v${window.versions.electron()})`",
				"",
				"",
				"```index.html```",
				"<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta\r\n      http-equiv=\"Content-Security-Policy\"\r\n      content=\"default-src 'self'; script-src 'self'\"\r\n    />\r\n    <meta\r\n      http-equiv=\"X-Content-Security-Policy\"\r\n      content=\"default-src 'self'; script-src 'self'\"\r\n    />\r\n    <title>Hello from Electron renderer!</title>\r\n  </head>\r\n  <body>\r\n    <h1>Hello from Electron renderer!</h1>\r\n    <p>👋</p>\r\n    <p id=\"info\"></p>\r\n  </body>\r\n  <script src=\"./renderer.js\"></script>\r\n</html>",
			],
			"description": ""
		},
		"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ": {
			"scope": "javascript",
			"prefix": "_codigo eletron 1.4",
			"body": [
				"```Main.js```",
				"const { app, BrowserWindow, ipcMain } = require('electron/main')\r\nconst path = require('node:path')\r\n\r\nconst createWindow = () => {\r\n  const win = new BrowserWindow({\r\n    width: 800,\r\n    height: 600,\r\n    webPreferences: {\r\n      preload: path.join(__dirname, 'preload.js')\r\n    }\r\n  })\r\n  win.loadFile('index.html')\r\n}\r\napp.whenReady().then(() => {\r\n  ipcMain.handle('ping', () => 'pong')\r\n  createWindow()\r\n})",
				"",
				"```preload.js```",
				"const { contextBridge, ipcRenderer } = require('electron')\r\n\r\ncontextBridge.exposeInMainWorld('versions', {\r\n  node: () => process.versions.node,\r\n  chrome: () => process.versions.chrome,\r\n  electron: () => process.versions.electron,\r\n  ping: () => ipcRenderer.invoke('ping')\r\n  // we can also expose variables, not just functions\r\n})",
				"",
				"```renderer.js```",
				"const func = async () => {\r\n  const response = await window.versions.ping()\r\n  console.log(response) // prints out 'pong'\r\n}\r\n\r\nfunc()",
				"",
				"```index.html```",
				"<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta\r\n      http-equiv=\"Content-Security-Policy\"\r\n      content=\"default-src 'self'; script-src 'self'\"\r\n    />\r\n    <meta\r\n      http-equiv=\"X-Content-Security-Policy\"\r\n      content=\"default-src 'self'; script-src 'self'\"\r\n    />\r\n    <title>Hello from Electron renderer!</title>\r\n  </head>\r\n  <body>\r\n    <h1>Hello from Electron renderer!</h1>\r\n    <p>👋</p>\r\n    <p id=\"info\"></p>\r\n  </body>\r\n  <script src=\"./renderer.js\"></script>\r\n</html>",
			],
			"description": ""
		},
		{
		"scope": "javascript",
		"prefix": "_codigo electron",
				 "body": [
						],
		"description": ""
		},*/
	/********************************* Eletron Library *******************************************************/
		"                                    ": {
			"scope": "javascript",
			"prefix": "#0",
			"body": [
				"1 = javascript",
				"2 = eletron",
				"3 = DOM"
			],
			"description": ""
		},
		"": {
			"scope": "javascript",
			"prefix": "#2 app.on('window-all-closed')",
			"body": [],
			"description": "https://www.electronjs.org/docs/latest/api/app#event-window-all-closed"
		},
		" ": {
			"scope": "javascript",
			"prefix": "#2 app.on('activate')",
			"body": [],
			"description": ""
		},
		"                              ": {
			"scope": "javascript",
			"prefix": "#2 BrowserWindow.getAllWindows()",
			"body": [
				"app.whenReady().then(() => {\r\n  createWindow()\r\n\r\n  app.on('activate', () => {\r\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\r\n  })\r\n})"
			],
			"description": ""
		},
		"                               ": {
			"scope": "javascript",
			"prefix": "#2 app.quit()",
			"body": [],
			"description": ""
		},
		"                                     ": {
			"scope": "javascript",
			"prefix": "#2 app.whenReady()",
			"body": [],
			"description": ""
		},
		/*"": {
		"scope": "javascript",
		"prefix": "z",
				 "body": [
						],
			"description": ""
		},*/
		/*"": {
		"scope": "javascript",
		"prefix": "z",
				 "body": [
						],
			"description": ""
		},*/
	/********************************* Sequelize codigo ******************************************************/
		"0                                                            ": {
		"scope": "javascript",
		"prefix": "_Sequelize 1.0",
								 "body": [
									"1 Codigo de conexao com o banco de dados\r\n2 Codigo de conexao com o banco de dados configurando logging\r\n3 Definir uma tabela\r\n4 Definir mais de uma tabela\r\n5 Outra forma de declarar um model extendendo de Model, e tambem o erro que ocorre se ocultarmos modelName\r\n6 Outras opções para o sequelize define, interropendo pluralização\r\n7 Extends model com opções, nesse caso interropendo pluralização\r\n8 Definindo o nome da tabela para anular o 'User'\r\n9 Usando sync função para sincronizar\r\n10 Campo com defaultValue\r\n11 Usando build e save\r\n12 Usando User.Create\r\n13 Atualizando um campo e depois usando save\r\n14 Usando update e save\r\n15 Usando Destroy\r\n16 Usando reload"
								],
		"description": ""
		},
	
		"1                                      ": {
			"scope": "javascript",
			"prefix": "_Sequelize 1.1",
			"body": [
				"const { Sequelize } = require('sequelize');\r\n\r\n// Option 3: Passing parameters separately (other dialects)\r\nconst sequelize = new Sequelize('firstdatabase', 'root', '1234', {\r\n  host: 'localhost',\r\n  dialect: 'mysql',\r\n  port: 3000,\r\n});\r\n\r\n(async () => {\r\n  try {\r\n    await sequelize.authenticate();\r\n    console.log('Connection has been established successfully.');\r\n  } catch (error) {\r\n    console.error('error:', error);\r\n  }\r\n})();"
			],
			"description": "Codigo de conexao com o banco de dados"
		},
		"2                                       ": {
			"scope": "javascript",
			"prefix": "_Sequelize 1.2",
			"body": [
				"const { Sequelize } = require('sequelize');\r\n\r\n// Option 3: Passing parameters separately (other dialects)\r\nconst sequelize = new Sequelize('firstdatabase', 'root', '1234', {\r\n  host: 'localhost',\r\n  dialect: 'mysql',\r\n  port: 3000,\r\n  logging: false\r\n});\r\n\r\n(async () => {\r\n  try {\r\n    await sequelize.authenticate();\r\n    console.log('Connection has been established successfully.');\r\n  } catch (error) {\r\n    console.error('error:', error);\r\n  }\r\n})();"
			],
			"description": "Codigo de conexao com o banco de dados configurando logging"
		},
		"3                                        ": {
			"scope": "javascript",
			"prefix": "_Sequelize 1.3",
			"body": [
				"const { Sequelize, DataTypes } = require('sequelize');\r\nconst sequelize = new Sequelize('nome_do_banco', 'nome_do_usuario', 'senha_do_usuario', {\r\n  host: 'localhost',\r\n  dialect: 'mysql',\r\n});\r\n\r\nconst User = sequelize.define(\r\n  'User',\r\n  {\r\n    // Model attributes are defined here\r\n    firstName: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    lastName: {\r\n      type: DataTypes.STRING,\r\n      // allowNull defaults to true\r\n    },\r\n  },\r\n  {\r\n    // Other model options go here\r\n  },\r\n);\r\n\r\n// `sequelize.define` also returns the model\r\nconsole.log(User === sequelize.models.User); // true\r\n\r\n\r\n(async () => {\r\n  try {\r\n    await sequelize.sync({ force: true }); // Sincroniza o modelo com o banco de dados\r\n    console.log('Modelo sincronizado com o banco de dados.');\r\n  } catch (error) {\r\n    console.error('Erro ao sincronizar modelo:', error);\r\n  } finally {\r\n    await sequelize.close(); // Fecha a conexão com o banco de dados\r\n  }\r\n})();"
			],
			"description": "Definir uma tabela"
		},
		"4                                        ": {
			"scope": "javascript",
			"prefix": "_Sequelize 1.4",
			"body": [
				"const { Sequelize, DataTypes } = require('sequelize');\r\nconst sequelize = new Sequelize('nome_do_banco', 'nome_do_usuario', 'senha_do_usuario', {\r\n  host: 'localhost',\r\n  dialect: 'mysql',\r\n});\r\n\r\nconst User = sequelize.define(\r\n  'User',\r\n  {\r\n    // Atributos do modelo User são definidos aqui\r\n    firstName: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    lastName: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n  },\r\n  {\r\n    // Outras opções do modelo User vão aqui\r\n  },\r\n);\r\n\r\nconst Address = sequelize.define(\r\n  'Address',\r\n  {\r\n    // Atributos do modelo Address são definidos aqui\r\n    street: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    city: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    state: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    zipCode: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n  },\r\n  {\r\n    // Outras opções do modelo Address vão aqui\r\n  },\r\n);\r\n\r\n// `sequelize.define` também retorna os modelos\r\nconsole.log(User === sequelize.models.User); // true\r\nconsole.log(Address === sequelize.models.Address); // true\r\n\r\n(async () => {\r\n  try {\r\n    await sequelize.sync({ force: true }); // Sincroniza os modelos com o banco de dados\r\n    console.log('Modelos sincronizados com o banco de dados.');\r\n  } catch (error) {\r\n    console.error('Erro ao sincronizar modelos:', error);\r\n  } finally {\r\n    await sequelize.close(); // Fecha a conexão com o banco de dados\r\n  }\r\n})();"
			],
			"description": "Definir mais de uma tabela"
		},
		"5                                           ": {
			"scope": "javascript",
			"prefix": "_Sequelize 1.5",
			"body": [
				"const { Sequelize, DataTypes, Model } = require('sequelize');\r\nconst sequelize = new Sequelize('sqlite::memory:');\r\n\r\nclass User extends Model {}\r\n\r\nUser.init(\r\n  {\r\n    // Model attributes are defined here\r\n    firstName: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    lastName: {\r\n      type: DataTypes.STRING,\r\n      // allowNull defaults to true\r\n    },\r\n  },\r\n  {\r\n    // Other model options go here\r\n    sequelize, // We need to pass the connection instance\r\n    // modelName: 'User', // If we hide modelName, Sequelize will generate a default name\r\n  },\r\n);\r\n\r\n// the defined model is the class itself\r\nconsole.log(User === sequelize.models.User); // false"
			],
			"description": "Outra forma de declarar um model extendendo de Model, e tambem o erro que ocorre se ocultarmos modelName"
		},
		"6                                                  ": {
			"scope": "javascript",
			"prefix": "_Sequelize 1.6",
			"body": [
				"const { Sequelize, DataTypes } = require('sequelize');\r\nconst sequelize = new Sequelize('nome_do_banco', 'nome_do_usuario', 'senha_do_usuario', {\r\n  host: 'localhost',\r\n  dialect: 'mysql',\r\n});\r\n\r\nconst User = sequelize.define(\r\n  'User',\r\n  {\r\n    // Atributos do modelo User são definidos aqui\r\n    firstName: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    lastName: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n  },\r\n  {\r\n    // Outras opções do modelo User vão aqui\r\n    freezeTableName: true, // Impede que o Sequelize altere o nome da tabela\r\n  },\r\n);\r\n\r\n(async () => {\r\n  try {\r\n    await sequelize.sync({ force: true }); // Sincroniza o modelo com o banco de dados\r\n    console.log('Modelo sincronizado com o banco de dados.');\r\n  } catch (error) {\r\n    console.error('Erro ao sincronizar modelo:', error);\r\n  } finally {\r\n    await sequelize.close(); // Fecha a conexão com o banco de dados\r\n  }\r\n})();"
			],
			"description": "Outras opções para o sequelize define, interropendo pluralização"
		},
		"7                                            ": {
			"scope": "javascript",
			"prefix": "_Sequelize 1.7",
			"body": [
				"const { Sequelize, DataTypes, Model } = require('sequelize');\r\nconst sequelize = new Sequelize('nome_do_banco', 'nome_do_usuario', 'senha_do_usuario', {\r\n  host: 'localhost',\r\n  dialect: 'mysql',\r\n});\r\n\r\nclass User extends Model {}\r\n\r\nUser.init(\r\n  {\r\n    // Atributos do modelo User são definidos aqui\r\n    firstName: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    lastName: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n  },\r\n  {\r\n    // Outras opções do modelo User vão aqui\r\n    sequelize, // Passamos a instância de conexão\r\n    modelName: 'User', // Nome do modelo\r\n    freezeTableName: true, // Impede que o Sequelize altere o nome da tabela\r\n  },\r\n);\r\n\r\n(async () => {\r\n  try {\r\n    await sequelize.sync({ force: true }); // Sincroniza o modelo com o banco de dados\r\n    console.log('Modelo sincronizado com o banco de dados.');\r\n  } catch (error) {\r\n    console.error('Erro ao sincronizar modelo:', error);\r\n  } finally {\r\n    await sequelize.close(); // Fecha a conexão com o banco de dados\r\n  }\r\n})();"
			],
			"description": "Extends model com opções, nesse caso interropendo pluralização"
		},
		"8                                                   ": {
			"scope": "javascript",
			"prefix": "_Sequelize 1.8",
			"body": [
				"const User = sequelize.define(\r\n  'User',\r\n  {\r\n    // ... (atributos)\r\n  },\r\n  {\r\n    tableName: 'Employees',\r\n  },\r\n);"
			],
			"description": "Definindo o nome da tabela para anular o 'User'"
		},
		"9                                                    ": {
			"scope": "javascript",
			"prefix": "_Sequelize 1.9",
			"body": [
				"const { Sequelize, DataTypes } = require('sequelize');\r\nconst sequelize = new Sequelize('nome_do_banco', 'nome_do_usuario', 'senha_do_usuario', {\r\n  host: 'localhost',\r\n  dialect: 'mysql',\r\n});\r\n\r\nconst User = sequelize.define(\r\n  'User',\r\n  {\r\n    firstName: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    lastName: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n  },\r\n  {\r\n    tableName: 'Employees', // Nome da tabela no banco de dados será 'Employees'\r\n  },\r\n);\r\n\r\n(async () => {\r\n  try {\r\n    await sequelize.sync({ force: true }); // Sincroniza o modelo com o banco de dados\r\n    console.log('All models were synchronized successfully.');\r\n  } catch (error) {\r\n    console.error('Error synchronizing models:', error);\r\n  } finally {\r\n    await sequelize.close(); // Fecha a conexão com o banco de dados\r\n  }\r\n})();"
			],
			"description": "Usando sync função para sincronizar"
		},
		"10                                                     ": {
			"scope": "javascript",
			"prefix": "_Sequelize 2.1",
			"body": [
				"sequelize.define('User', {\r\n  name: {\r\n    type: DataTypes.STRING,\r\n    defaultValue: 'John Doe',\r\n  },\r\n});"
			],
			"description": "Campo com defaultValue"
		},
		"11                                                      ": {
			"scope": "javascript",
			"prefix": "_Sequelize 2.2",
			"body": [
				"const { Sequelize, DataTypes } = require('sequelize');\r\nconst sequelize = new Sequelize('nome_do_banco', 'nome_do_usuario', 'senha_do_usuario', {\r\n  host: 'localhost',\r\n  dialect: 'mysql',\r\n});\r\n\r\nconst User = sequelize.define(\r\n  'User',\r\n  {\r\n    name: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n  },\r\n  {\r\n    tableName: 'Employees', // Nome da tabela no banco de dados será 'Employees'\r\n  },\r\n);\r\n\r\n(async () => {\r\n  try {\r\n    await sequelize.sync({ force: true }); // Sincroniza o modelo com o banco de dados\r\n\r\n    // Cria uma instância de User usando User.build\r\n    const jane = User.build({ name: 'Jane' });\r\n    console.log(jane instanceof User); // true\r\n    console.log(jane.name); // \"Jane\"\r\n\r\n    // Salva jane no banco de dados\r\n    await jane.save();\r\n    console.log('Jane was saved to the database!');\r\n  } catch (error) {\r\n    console.error('Error synchronizing models:', error);\r\n  } finally {\r\n    await sequelize.close(); // Fecha a conexão com o banco de dados\r\n  }\r\n})();"
			],
			"description": "Usando build e save"
		},
		"12                                                           ": {
			"scope": "javascript",
			"prefix": "_Sequelize 2.3",
			"body": [
				"const { Sequelize, DataTypes } = require('sequelize');\r\nconst sequelize = new Sequelize('nome_do_banco', 'nome_do_usuario', 'senha_do_usuario', {\r\n  host: 'localhost',\r\n  dialect: 'mysql',\r\n});\r\n\r\nconst User = sequelize.define(\r\n  'User',\r\n  {\r\n    name: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n  },\r\n  {\r\n    tableName: 'Employees', // Nome da tabela no banco de dados será 'Employees'\r\n  },\r\n);\r\n\r\n(async () => {\r\n  try {\r\n    await sequelize.sync({ force: true }); // Sincroniza o modelo com o banco de dados\r\n\r\n    // Cria e salva uma instância de User usando User.create\r\n    const jane = await User.create({ name: 'Jane' });\r\n    console.log(jane instanceof User); // true\r\n    console.log(jane.name); // \"Jane\"\r\n\r\n    console.log('Jane exists in the database now!');\r\n  } catch (error) {\r\n    console.error('Error synchronizing models:', error);\r\n  } finally {\r\n    await sequelize.close(); // Fecha a conexão com o banco de dados\r\n  }\r\n})();"
			],
			"description": "Usando User.Create"
		},
		"13                                                            ": {
			"scope": "javascript",
			"prefix": "_Sequelize 2.4",
			"body": [
				"const jane = await User.create({ name: 'Jane' });\r\nconsole.log(jane.name); // \"Jane\"\r\njane.name = 'Ada';\r\n// the name is still \"Jane\" in the database\r\nawait jane.save();\r\n// Now the name was updated to \"Ada\" in the database!"
			],
			"description": "Atualizando um campo e depois usando save"
		},
		"14                                                             ": {
			"scope": "javascript",
			"prefix": "_Sequelize 2.5",
			"body": [
				"const jane = await User.create({ name: 'Jane' });\r\njane.favoriteColor = 'blue';\r\nawait jane.update({ name: 'Ada' });\r\n// The database now has \\\"Ada\\\" for name, but still has the default \\\"green\\\" for favorite color\r\nawait jane.save();\r\n// Now the database has \\\"Ada\\\" for name and \\\"blue\\\" for favorite color"
			],
			"description": "Usando update e save"
		},
		"15                                                              ": {
			"scope": "javascript",
			"prefix": "_Sequelize 2.6",
			"body": [
				"const jane = await User.create({ name: 'Jane' });\r\nconsole.log(jane.name); // \"Jane\"\r\nawait jane.destroy();\r\n// Now this entry was removed from the database"
			],
			"description": "Usando Destroy"
		},
		"16                                                                       ": {
			"scope": "javascript",
			"prefix": "_Sequelize 2.7",
			"body": [
				"const jane = await User.create({ name: 'Jane' });\r\nconsole.log(jane.name); // \"Jane\"\r\njane.name = 'Ada';\r\n// the name is still \"Jane\" in the database\r\nawait jane.reload();\r\nconsole.log(jane.name); // \"Jane\""
			],
			"description": "Usando reload"
		},
	
		/*"                                                            ": {
		"scope": "javascript",
		"prefix": "#4 sequelize",
								 "body": [
								],
		"description": ""
		},*/
		/*"                                                            ": {
		"scope": "javascript",
		"prefix": "#4 sequelize",
								 "body": [
								],
		"description": ""
		},*/
		/*"                                                            ": {
		"scope": "javascript",
		"prefix": "#4 sequelize",
								 "body": [
								],
		"description": ""
		},*/
		/*"                                                            ": {
		"scope": "javascript",
		"prefix": "#4 sequelize",
								 "body": [
								],
		"description": ""
		},*/
		/*"                                                            ": {
		"scope": "javascript",
		"prefix": "#4 sequelize",
								 "body": [
								],
		"description": ""
		},*/
		/*"                                                            ": {
		"scope": "javascript",
		"prefix": "#4 sequelize",
								 "body": [
								],
		"description": ""
		},*/
	
	
	}